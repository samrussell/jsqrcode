// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 29488;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([216,29,0,0,0,0,0,0,16,29,0,0,0,0,0,0,0,0,0,0,104,0,0,0,24,29,0,0,1,0,0,0,0,0,0,0,111,0,0,0,32,29,0,0,1,0,0,0,0,0,0,0,108,0,0,0,40,29,0,0,1,0,0,0,0,0,0,0,115,0,0,0,48,29,0,0,1,0,0,0,0,0,0,0,118,0,0,0,64,29,0,0,1,0,0,0,0,0,0,0,109,0,0,0,72,29,0,0,1,0,0,0,0,0,0,0,100,0,0,0,80,29,0,0,1,0,0,0,0,0,0,0,116,0,0,0,88,29,0,0,0,0,0,0,0,0,0,0,83,0,0,0,104,29,0,0,0,0,0,0,0,0,0,0,107,0,0,0,112,29,0,0,0,0,0,0,0,0,0,0,99,0,0,0,128,29,0,0,0,0,0,0,0,0,0,0,105,0,0,0,144,29,0,0,0,0,0,0,0,0,0,0,56,0,0,0,152,29,0,0,0,0,0,0,56,7,0,0,1,0,0,0,160,29,0,0,0,0,0,0,0,0,0,0,77,0,0,0,168,29,0,0,1,0,0,0,0,0,0,0,102,0,0,0,184,29,0,0,1,0,0,0,0,0,0,0,98,0,0,0,200,29,0,0,0,0,0,0,0,0,0,0,86,0,0,0,208,29,0,0,0,0,0,0,72,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,105,122,101,58,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,118,101,114,115,105,111,110,58,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,108,101,118,101,108,58,32,37,115,10,0,0,0,0,0,0,255,255,255,255,0,0,0,0,73,110,118,97,108,105,100,32,109,97,114,103,105,110,58,32,37,100,10,0,0,0,0,0,72,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,68,80,73,58,32,37,100,10,0,0,0,0,0,0,0,0,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,101,112,115,0,0,0,0,0,115,118,103,0,0,0,0,0,97,110,115,105,0,0,0,0,97,110,115,105,50,53,54,0,97,115,99,105,105,105,0,0,97,115,99,105,105,0,0,0,117,116,102,56,0,0,0,0,97,110,115,105,117,116,102,56,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,116,121,112,101,58,32,37,115,10,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,73,110,118,97,108,105,100,32,102,111,114,101,103,114,111,117,110,100,32,99,111,108,111,114,32,118,97,108,117,101,46,10,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,73,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,32,118,97,108,117,101,46,10,0,0,0,0,0,0,0,0,84,114,121,32,96,113,114,101,110,99,111,100,101,32,45,45,104,101,108,112,39,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0,0,0,0,78,111,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,32,105,115,32,103,105,118,101,110,46,10,0,0,0,86,101,114,115,105,111,110,32,115,104,111,117,108,100,32,98,101,32,108,101,115,115,32,111,114,32,101,113,117,97,108,32,116,111,32,37,100,46,10,0,86,101,114,115,105,111,110,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,101,110,99,111,100,101,32,97,32,77,105,99,114,111,32,81,82,32,67,111,100,101,32,115,121,109,98,111,108,46,10,0,0,0,0,77,105,99,114,111,32,81,82,32,67,111,100,101,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,115,116,114,117,99,116,117,114,101,100,32,115,121,109,98,111,108,115,46,10,0,0,0,0,0,86,101,114,115,105,111,110,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,101,110,99,111,100,101,32,115,116,114,117,99,116,117,114,101,100,32,115,121,109,98,111,108,115,46,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,101,110,99,111,100,101,32,116,104,101,32,105,110,112,117,116,32,100,97,116,97,0,0,0,0,0,0,0,0,0,70,105,108,101,58,32,37,115,44,32,86,101,114,115,105,111,110,58,32,37,100,10,0,0,40,115,116,100,111,117,116,41,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,46,10,0,0,0,0,27,91,52,48,59,51,55,59,49,109,0,0,0,0,0,0,27,91,48,109,0,0,0,0,226,150,136,0,0,0,0,0,226,150,132,0,0,0,0,0,226,150,128,0,0,0,0,0,119,98,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,46,10,0,0,0,0,0,27,91,52,56,59,53,59,50,51,49,109,0,0,0,0,0,27,91,52,56,59,53,59,49,54,109,0,0,0,0,0,0,27,91,52,55,109,0,0,0,27,91,52,48,109,0,0,0,32,32,0,0,0,0,0,0,27,91,48,109,10,0,0,0,37,48,50,120,37,48,50,120,37,48,50,120,0,0,0,0,60,63,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,32,115,116,97,110,100,97,108,111,110,101,61,34,121,101,115,34,63,62,10,0,0,0,0,0,0,0,0,60,33,45,45,32,67,114,101,97,116,101,100,32,119,105,116,104,32,113,114,101,110,99,111,100,101,32,37,115,32,40,104,116,116,112,58,47,47,102,117,107,117,99,104,105,46,111,114,103,47,119,111,114,107,115,47,113,114,101,110,99,111,100,101,47,105,110,100,101,120,46,104,116,109,108,46,101,110,41,32,45,45,62,10,0,0,0,0,60,115,118,103,32,119,105,100,116,104,61,34,37,48,46,50,102,99,109,34,32,104,101,105,103,104,116,61,34,37,48,46,50,102,99,109,34,32,118,105,101,119,66,111,120,61,34,48,32,48,32,37,100,32,37,100,34,32,112,114,101,115,101,114,118,101,65,115,112,101,99,116,82,97,116,105,111,61,34,110,111,110,101,34,32,118,101,114,115,105,111,110,61,34,49,46,49,34,32,120,109,108,110,115,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,115,118,103,34,62,10,0,9,60,103,32,105,100,61,34,81,82,99,111,100,101,34,62,10,0,0,0,0,0,0,0,9,9,60,114,101,99,116,32,120,61,34,48,34,32,121,61,34,48,34,32,119,105,100,116,104,61,34,37,100,34,32,104,101,105,103,104,116,61,34,37,100,34,32,102,105,108,108,61,34,35,37,115,34,32,102,105,108,108,45,111,112,97,99,105,116,121,61,34,37,102,34,32,47,62,10,0,0,0,0,0,9,9,60,114,101,99,116,32,120,61,34,48,34,32,121,61,34,48,34,32,119,105,100,116,104,61,34,37,100,34,32,104,101,105,103,104,116,61,34,37,100,34,32,102,105,108,108,61,34,35,37,115,34,32,47,62,10,0,0,0,0,0,0,0,9,9,60,103,32,105,100,61,34,80,97,116,116,101,114,110,34,62,10,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,60,47,103,62,10,0,9,60,47,103,62,10,0,0,60,47,115,118,103,62,10,0,9,9,9,60,114,101,99,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,119,105,100,116,104,61,34,37,100,34,32,104,101,105,103,104,116,61,34,49,34,32,102,105,108,108,61,34,35,37,115,34,32,102,105,108,108,45,111,112,97,99,105,116,121,61,34,37,102,34,32,47,62,10,0,0,0,9,9,9,60,114,101,99,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,119,105,100,116,104,61,34,37,100,34,32,104,101,105,103,104,116,61,34,49,34,32,102,105,108,108,61,34,35,37,115,34,32,47,62,10,0,0,0,0,0,37,37,33,80,83,45,65,100,111,98,101,45,50,46,48,32,69,80,83,70,45,49,46,50,10,37,37,37,37,66,111,117,110,100,105,110,103,66,111,120,58,32,48,32,48,32,37,100,32,37,100,10,37,37,37,37,80,97,103,101,115,58,32,49,32,49,10,37,37,37,37,69,110,100,67,111,109,109,101,110,116,115,10,0,0,0,0,0,47,112,32,123,32,109,111,118,101,116,111,32,48,32,49,32,114,108,105,110,101,116,111,32,49,32,48,32,114,108,105,110,101,116,111,32,48,32,45,49,32,114,108,105,110,101,116,111,32,102,105,108,108,32,125,32,98,105,110,100,32,100,101,102,32,37,100,32,37,100,32,115,99,97,108,101,32,0,0,0,37,100,32,37,100,32,112,32,0,0,0,0,0,0,0,0,10,37,37,37,37,69,79,70,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,80,78,71,32,119,114,105,116,101,114,46,10,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,80,78,71,32,119,114,105,116,101,46,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,80,78,71,32,105,109,97,103,101,46,10,0,0,0,0,0,46,112,110,103,0,0,0,0,46,101,112,115,0,0,0,0,46,115,118,103,0,0,0,0,46,116,120,116,0,0,0,0,65,110,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,115,116,111,114,101,32,116,104,101,32,115,116,114,117,99,116,117,114,101,100,32,105,109,97,103,101,115,46,10,0,0,0,70,97,105,108,101,100,32,116,111,32,101,110,99,111,100,101,32,116,104,101,32,105,110,112,117,116,32,100,97,116,97,46,10,0,0,0,0,0,0,0,37,115,45,37,48,50,100,37,115,0,0,0,0,0,0,0,37,115,45,37,48,50,100,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,78,111,32,105,110,112,117,116,32,100,97,116,97,46,10,0,73,110,112,117,116,32,100,97,116,97,32,105,115,32,116,111,111,32,108,97,114,103,101,46,10,0,0,0,0,0,0,0,37,48,50,120,37,48,50,120,37,48,50,120,37,110,0,0,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,110,0,0,0,0,0,0,113,114,101,110,99,111,100,101,32,118,101,114,115,105,111,110,32,37,115,10,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,54,45,50,48,49,50,32,75,101,110,116,97,114,111,32,70,117,107,117,99,104,105,10,0,0,0,0,85,115,97,103,101,58,32,113,114,101,110,99,111,100,101,32,91,79,80,84,73,79,78,93,46,46,46,32,91,83,84,82,73,78,71,93,10,69,110,99,111,100,101,32,105,110,112,117,116,32,100,97,116,97,32,105,110,32,97,32,81,82,32,67,111,100,101,32,97,110,100,32,115,97,118,101,32,97,115,32,97,32,80,78,71,32,111,114,32,69,80,83,32,105,109,97,103,101,46,10,10,32,32,45,104,44,32,45,45,104,101,108,112,32,32,32,100,105,115,112,108,97,121,32,116,104,101,32,104,101,108,112,32,109,101,115,115,97,103,101,46,32,45,104,32,100,105,115,112,108,97,121,115,32,111,110,108,121,32,116,104,101,32,104,101,108,112,32,111,102,32,115,104,111,114,116,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,112,116,105,111,110,115,46,10,10,32,32,45,111,32,70,73,76,69,78,65,77,69,44,32,45,45,111,117,116,112,117,116,61,70,73,76,69,78,65,77,69,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,114,105,116,101,32,105,109,97,103,101,32,116,111,32,70,73,76,69,78,65,77,69,46,32,73,102,32,39,45,39,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,104,101,32,114,101,115,117,108,116,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,108,108,32,98,101,32,111,117,116,112,117,116,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,46,32,73,102,32,45,83,32,105,115,32,103,105,118,101,110,44,32,115,116,114,117,99,116,117,114,101,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,121,109,98,111,108,115,32,97,114,101,32,119,114,105,116,116,101,110,32,116,111,32,70,73,76,69,78,65,77,69,45,48,49,46,112,110,103,44,32,70,73,76,69,78,65,77,69,45,48,50,46,112,110,103,44,32,46,46,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,115,117,102,102,105,120,32,105,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,70,73,76,69,78,65,77,69,44,32,105,102,32,115,112,101,99,105,102,105,101,100,41,10,32,32,45,115,32,78,85,77,66,69,82,44,32,45,45,115,105,122,101,61,78,85,77,66,69,82,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,109,111,100,117,108,101,32,115,105,122,101,32,105,110,32,100,111,116,115,32,40,112,105,120,101,108,115,41,46,32,40,100,101,102,97,117,108,116,61,51,41,10,10,32,32,45,108,32,123,76,77,81,72,125,44,32,45,45,108,101,118,101,108,61,123,76,77,81,72,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,101,114,114,111,114,32,99,111,114,114,101,99,116,105,111,110,32,108,101,118,101,108,32,102,114,111,109,32,76,32,40,108,111,119,101,115,116,41,32,116,111,32,72,32,40,104,105,103,104,101,115,116,41,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,100,101,102,97,117,108,116,61,76,41,10,10,32,32,45,118,32,78,85,77,66,69,82,44,32,45,45,115,121,109,118,101,114,115,105,111,110,61,78,85,77,66,69,82,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,115,121,109,98,111,108,46,32,83,101,101,32,83,89,77,66,79,76,32,86,69,82,83,73,79,78,83,32,102,111,114,32,109,111,114,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,102,111,114,109,97,116,105,111,110,46,32,40,100,101,102,97,117,108,116,61,97,117,116,111,41,10,10,32,32,45,109,32,78,85,77,66,69,82,44,32,45,45,109,97,114,103,105,110,61,78,85,77,66,69,82,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,119,105,100,116,104,32,111,102,32,116,104,101,32,109,97,114,103,105,110,115,46,32,40,100,101,102,97,117,108,116,61,52,32,40,50,32,102,111,114,32,77,105,99,114,111,32,81,82,41,41,41,10,10,32,32,45,100,32,78,85,77,66,69,82,44,32,45,45,100,112,105,61,78,85,77,66,69,82,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,68,80,73,32,111,102,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,80,78,71,46,32,40,100,101,102,97,117,108,116,61,55,50,41,10,10,32,32,45,116,32,123,80,78,71,44,69,80,83,44,83,86,71,44,65,78,83,73,44,65,78,83,73,50,53,54,44,65,83,67,73,73,44,65,83,67,73,73,105,44,85,84,70,56,44,65,78,83,73,85,84,70,56,125,44,32,45,45,116,121,112,101,61,123,80,78,71,44,69,80,83,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,86,71,44,65,78,83,73,44,65,78,83,73,50,53,54,44,65,83,67,73,73,44,65,83,67,73,73,105,44,85,84,70,56,44,65,78,83,73,85,84,70,56,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,116,121,112,101,32,111,102,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,105,109,97,103,101,46,32,40,100,101,102,97,117,108,116,61,80,78,71,41,10,10,32,32,45,83,44,32,45,45,115,116,114,117,99,116,117,114,101,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,97,107,101,32,115,116,114,117,99,116,117,114,101,100,32,115,121,109,98,111,108,115,46,32,86,101,114,115,105,111,110,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,46,10,10,32,32,45,107,44,32,45,45,107,97,110,106,105,32,32,97,115,115,117,109,101,32,116,104,97,116,32,116,104,101,32,105,110,112,117,116,32,116,101,120,116,32,99,111,110,116,97,105,110,115,32,107,97,110,106,105,32,40,115,104,105,102,116,45,106,105,115,41,46,10,10,32,32,45,99,44,32,45,45,99,97,115,101,115,101,110,115,105,116,105,118,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,99,111,100,101,32,108,111,119,101,114,45,99,97,115,101,32,97,108,112,104,97,98,101,116,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,56,45,98,105,116,32,109,111,100,101,46,32,40,100,101,102,97,117,108,116,41,10,10,32,32,45,105,44,32,45,45,105,103,110,111,114,101,99,97,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,103,110,111,114,101,32,99,97,115,101,32,100,105,115,116,105,110,99,116,105,111,110,115,32,97,110,100,32,117,115,101,32,111,110,108,121,32,117,112,112,101,114,45,99,97,115,101,32,99,104,97,114,97,99,116,101,114,115,46,10,10,32,32,45,56,44,32,45,45,56,98,105,116,32,32,32,101,110,99,111,100,101,32,101,110,116,105,114,101,32,100,97,116,97,32,105,110,32,56,45,98,105,116,32,109,111,100,101,46,32,45,107,44,32,45,99,32,97,110,100,32,45,105,32,119,105,108,108,32,98,101,32,105,103,110,111,114,101,100,46,10,10,32,32,32,32,32,32,45,45,114,108,101,32,32,32,32,101,110,97,98,108,101,32,114,117,110,45,108,101,110,103,116,104,32,101,110,99,111,100,105,110,103,32,102,111,114,32,83,86,71,46,10,10,32,32,45,77,44,32,45,45,109,105,99,114,111,32,32,101,110,99,111,100,101,32,105,110,32,97,32,77,105,99,114,111,32,81,82,32,67,111,100,101,46,32,40,101,120,112,101,114,105,109,101,110,116,97,108,41,10,10,32,32,32,32,32,32,45,45,102,111,114,101,103,114,111,117,110,100,61,82,82,71,71,66,66,91,65,65,93,10,32,32,32,32,32,32,45,45,98,97,99,107,103,114,111,117,110,100,61,82,82,71,71,66,66,91,65,65,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,102,111,114,101,103,114,111,117,110,100,47,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,32,105,110,32,104,101,120,97,100,101,99,105,109,97,108,32,110,111,116,97,116,105,111,110,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,54,45,100,105,103,105,116,32,40,82,71,66,41,32,111,114,32,56,45,100,105,103,105,116,32,40,82,71,66,65,41,32,102,111,114,109,32,97,114,101,32,115,117,112,112,111,114,116,101,100,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,111,108,111,114,32,111,117,116,112,117,116,32,115,117,112,112,111,114,116,32,97,118,97,105,108,97,98,108,101,32,111,110,108,121,32,105,110,32,80,78,71,32,97,110,100,32,83,86,71,46,10,32,32,45,86,44,32,45,45,118,101,114,115,105,111,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,101,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,97,110,100,32,99,111,112,121,114,105,103,104,116,115,32,111,102,32,116,104,101,32,113,114,101,110,99,111,100,101,46,10,10,32,32,32,32,32,32,45,45,118,101,114,98,111,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,118,101,114,98,111,115,101,32,105,110,102,111,114,109,97,116,105,111,110,32,116,111,32,115,116,100,101,114,114,46,10,10,32,32,91,83,84,82,73,78,71,93,32,32,32,32,32,105,110,112,117,116,32,100,97,116,97,46,32,73,102,32,105,116,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,100,97,116,97,32,119,105,108,108,32,98,101,32,116,97,107,101,110,32,102,114,111,109,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,46,10,10,42,83,89,77,66,79,76,32,86,69,82,83,73,79,78,83,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,104,101,32,115,121,109,98,111,108,32,118,101,114,115,105,111,110,115,32,111,102,32,81,82,32,67,111,100,101,32,114,97,110,103,101,32,102,114,111,109,32,86,101,114,115,105,111,110,32,49,32,116,111,32,86,101,114,115,105,111,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,48,46,32,69,97,99,104,32,118,101,114,115,105,111,110,32,104,97,115,32,97,32,100,105,102,102,101,114,101,110,116,32,109,111,100,117,108,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,111,114,32,110,117,109,98,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,102,32,109,111,100,117,108,101,115,44,32,114,97,110,103,105,110,103,32,102,114,111,109,32,86,101,114,115,105,111,110,32,49,32,40,50,49,32,120,32,50,49,32,109,111,100,117,108,101,115,41,32,117,112,32,116,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,101,114,115,105,111,110,32,52,48,32,40,49,55,55,32,120,32,49,55,55,32,109,111,100,117,108,101,115,41,46,32,69,97,99,104,32,104,105,103,104,101,114,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,109,112,114,105,115,101,115,32,52,32,97,100,100,105,116,105,111,110,97,108,32,109,111,100,117,108,101,115,32,112,101,114,32,115,105,100,101,32,98,121,32,100,101,102,97,117,108,116,46,32,83,101,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,104,116,116,112,58,47,47,119,119,119,46,113,114,99,111,100,101,46,99,111,109,47,101,110,47,97,98,111,117,116,47,118,101,114,115,105,111,110,46,104,116,109,108,32,102,111,114,32,97,32,100,101,116,97,105,108,101,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,101,114,115,105,111,110,32,108,105,115,116,46,10,0,0,0,0,0,0,0,85,115,97,103,101,58,32,113,114,101,110,99,111,100,101,32,91,79,80,84,73,79,78,93,46,46,46,32,91,83,84,82,73,78,71,93,10,69,110,99,111,100,101,32,105,110,112,117,116,32,100,97,116,97,32,105,110,32,97,32,81,82,32,67,111,100,101,32,97,110,100,32,115,97,118,101,32,97,115,32,97,32,80,78,71,32,111,114,32,69,80,83,32,105,109,97,103,101,46,10,10,32,32,45,104,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,105,115,32,109,101,115,115,97,103,101,46,10,32,32,45,45,104,101,108,112,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,101,32,117,115,97,103,101,32,111,102,32,108,111,110,103,32,111,112,116,105,111,110,115,46,10,32,32,45,111,32,70,73,76,69,78,65,77,69,32,32,119,114,105,116,101,32,105,109,97,103,101,32,116,111,32,70,73,76,69,78,65,77,69,46,32,73,102,32,39,45,39,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,104,101,32,114,101,115,117,108,116,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,108,108,32,98,101,32,111,117,116,112,117,116,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,46,32,73,102,32,45,83,32,105,115,32,103,105,118,101,110,44,32,115,116,114,117,99,116,117,114,101,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,121,109,98,111,108,115,32,97,114,101,32,119,114,105,116,116,101,110,32,116,111,32,70,73,76,69,78,65,77,69,45,48,49,46,112,110,103,44,32,70,73,76,69,78,65,77,69,45,48,50,46,112,110,103,44,32,46,46,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,115,117,102,102,105,120,32,105,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,70,73,76,69,78,65,77,69,44,32,105,102,32,115,112,101,99,105,102,105,101,100,41,10,32,32,45,115,32,78,85,77,66,69,82,32,32,32,32,115,112,101,99,105,102,121,32,109,111,100,117,108,101,32,115,105,122,101,32,105,110,32,100,111,116,115,32,40,112,105,120,101,108,115,41,46,32,40,100,101,102,97,117,108,116,61,51,41,10,32,32,45,108,32,123,76,77,81,72,125,32,32,32,32,115,112,101,99,105,102,121,32,101,114,114,111,114,32,99,111,114,114,101,99,116,105,111,110,32,108,101,118,101,108,32,102,114,111,109,32,76,32,40,108,111,119,101,115,116,41,32,116,111,32,72,32,40,104,105,103,104,101,115,116,41,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,100,101,102,97,117,108,116,61,76,41,10,32,32,45,118,32,78,85,77,66,69,82,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,115,121,109,98,111,108,46,32,40,100,101,102,97,117,108,116,61,97,117,116,111,41,10,32,32,45,109,32,78,85,77,66,69,82,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,119,105,100,116,104,32,111,102,32,116,104,101,32,109,97,114,103,105,110,115,46,32,40,100,101,102,97,117,108,116,61,52,32,40,50,32,102,111,114,32,77,105,99,114,111,41,41,10,32,32,45,100,32,78,85,77,66,69,82,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,68,80,73,32,111,102,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,80,78,71,46,32,40,100,101,102,97,117,108,116,61,55,50,41,10,32,32,45,116,32,123,80,78,71,44,69,80,83,44,83,86,71,44,65,78,83,73,44,65,78,83,73,50,53,54,44,65,83,67,73,73,44,65,83,67,73,73,105,44,85,84,70,56,44,65,78,83,73,85,84,70,56,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,116,104,101,32,116,121,112,101,32,111,102,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,105,109,97,103,101,46,32,40,100,101,102,97,117,108,116,61,80,78,71,41,10,32,32,45,83,32,32,32,32,32,32,32,32,32,32,32,109,97,107,101,32,115,116,114,117,99,116,117,114,101,100,32,115,121,109,98,111,108,115,46,32,86,101,114,115,105,111,110,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,46,10,32,32,45,107,32,32,32,32,32,32,32,32,32,32,32,97,115,115,117,109,101,32,116,104,97,116,32,116,104,101,32,105,110,112,117,116,32,116,101,120,116,32,99,111,110,116,97,105,110,115,32,107,97,110,106,105,32,40,115,104,105,102,116,45,106,105,115,41,46,10,32,32,45,99,32,32,32,32,32,32,32,32,32,32,32,101,110,99,111,100,101,32,108,111,119,101,114,45,99,97,115,101,32,97,108,112,104,97,98,101,116,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,56,45,98,105,116,32,109,111,100,101,46,32,40,100,101,102,97,117,108,116,41,10,32,32,45,105,32,32,32,32,32,32,32,32,32,32,32,105,103,110,111,114,101,32,99,97,115,101,32,100,105,115,116,105,110,99,116,105,111,110,115,32,97,110,100,32,117,115,101,32,111,110,108,121,32,117,112,112,101,114,45,99,97,115,101,32,99,104,97,114,97,99,116,101,114,115,46,10,32,32,45,56,32,32,32,32,32,32,32,32,32,32,32,101,110,99,111,100,101,32,101,110,116,105,114,101,32,100,97,116,97,32,105,110,32,56,45,98,105,116,32,109,111,100,101,46,32,45,107,44,32,45,99,32,97,110,100,32,45,105,32,119,105,108,108,32,98,101,32,105,103,110,111,114,101,100,46,10,32,32,45,77,32,32,32,32,32,32,32,32,32,32,32,101,110,99,111,100,101,32,105,110,32,97,32,77,105,99,114,111,32,81,82,32,67,111,100,101,46,10,32,32,45,45,102,111,114,101,103,114,111,117,110,100,61,82,82,71,71,66,66,91,65,65,93,10,32,32,45,45,98,97,99,107,103,114,111,117,110,100,61,82,82,71,71,66,66,91,65,65,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,121,32,102,111,114,101,103,114,111,117,110,100,47,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,32,105,110,32,104,101,120,97,100,101,99,105,109,97,108,32,110,111,116,97,116,105,111,110,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,54,45,100,105,103,105,116,32,40,82,71,66,41,32,111,114,32,56,45,100,105,103,105,116,32,40,82,71,66,65,41,32,102,111,114,109,32,97,114,101,32,115,117,112,112,111,114,116,101,100,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,111,108,111,114,32,111,117,116,112,117,116,32,115,117,112,112,111,114,116,32,97,118,97,105,108,97,98,108,101,32,111,110,108,121,32,105,110,32,80,78,71,32,97,110,100,32,83,86,71,46,10,32,32,45,86,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,101,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,97,110,100,32,99,111,112,121,114,105,103,104,116,115,32,111,102,32,116,104,101,32,113,114,101,110,99,111,100,101,46,10,32,32,91,83,84,82,73,78,71,93,32,32,32,32,32,105,110,112,117,116,32,100,97,116,97,46,32,73,102,32,105,116,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,100,97,116,97,32,119,105,108,108,32,98,101,32,116,97,107,101,110,32,102,114,111,109,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,46,10,0,0,0,0,104,101,108,112,0,0,0,0,111,117,116,112,117,116,0,0,108,101,118,101,108,0,0,0,115,105,122,101,0,0,0,0,115,121,109,118,101,114,115,105,111,110,0,0,0,0,0,0,109,97,114,103,105,110,0,0,100,112,105,0,0,0,0,0,116,121,112,101,0,0,0,0,115,116,114,117,99,116,117,114,101,100,0,0,0,0,0,0,107,97,110,106,105,0,0,0,99,97,115,101,115,101,110,115,105,116,105,118,101,0,0,0,105,103,110,111,114,101,99,97,115,101,0,0,0,0,0,0,56,98,105,116,0,0,0,0,114,108,101,0,0,0,0,0,109,105,99,114,111,0,0,0,102,111,114,101,103,114,111,117,110,100,0,0,0,0,0,0,98,97,99,107,103,114,111,117,110,100,0,0,0,0,0,0,118,101,114,115,105,111,110,0,118,101,114,98,111,115,101,0,104,111,58,108,58,115,58,118,58,109,58,100,58,116,58,83,107,99,105,56,77,86,0,0,49,46,50,46,53,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,72,68,82,0,0,0,0,73,68,65,84,0,0,0,0,73,69,78,68,0,0,0,0,80,76,84,69,0,0,0,0,98,75,71,68,0,0,0,0,99,72,82,77,0,0,0,0,103,65,77,65,0,0,0,0,104,73,83,84,0,0,0,0,105,67,67,80,0,0,0,0,111,70,70,115,0,0,0,0,112,67,65,76,0,0,0,0,115,67,65,76,0,0,0,0,112,72,89,115,0,0,0,0,115,66,73,84,0,0,0,0,115,80,76,84,0,0,0,0,115,82,71,66,0,0,0,0,116,69,88,116,0,0,0,0,116,73,77,69,0,0,0,0,116,82,78,83,0,0,0,0,122,84,88,116,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,121,32,118,97,108,117,101,0,0,0,0,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,99,104,114,111,109,97,116,105,99,105,116,121,32,118,97,108,117,101,32,101,120,99,101,101,100,105,110,103,32,50,49,52,55,52,46,56,51,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,119,104,105,116,101,32,112,111,105,110,116,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,114,101,100,32,112,111,105,110,116,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,103,114,101,101,110,32,112,111,105,110,116,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,98,108,117,101,32,112,111,105,110,116,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,99,72,82,77,32,82,71,66,32,116,114,105,97,110,103,108,101,32,119,105,116,104,32,122,101,114,111,32,97,114,101,97,0,0,0,0,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0,0,0,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0,0,0,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,116,104,105,115,32,97,114,99,104,105,116,101,99,116,117,114,101,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0,0,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,110,117,109,95,116,114,97,110,115,32,118,97,108,117,101,0,0,0,0,0,0,0,0,116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,0,0,0,0,0,0,77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0,0,0,0,0,0,0,0,87,114,105,116,105,110,103,32,122,101,114,111,45,108,101,110,103,116,104,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0,0,0,0,0,0,0,86,97,108,105,100,32,112,97,108,101,116,116,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,115,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,119,114,105,116,101,32,105,110,116,101,114,110,97,116,105,111,110,97,108,32,116,101,120,116,0,0,0,0,0,0,78,111,32,73,68,65,84,115,32,119,114,105,116,116,101,110,32,105,110,116,111,32,102,105,108,101,0,0,0,0,0,0,49,46,50,46,53,51,0,0,65,112,112,108,105,99,97,116,105,111,110,32,119,97,115,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,112,110,103,46,104,32,102,114,111,109,32,108,105,98,112,110,103,45,37,46,50,48,115,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,32,105,115,32,32,114,117,110,110,105,110,103,32,119,105,116,104,32,112,110,103,46,99,32,102,114,111,109,32,108,105,98,112,110,103,45,37,46,50,48,115,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,108,105,98,112,110,103,32,118,101,114,115,105,111,110,32,105,110,32,97,112,112,108,105,99,97,116,105,111,110,32,97,110,100,32,108,105,98,114,97,114,121,0,0,112,110,103,95,119,114,105,116,101,95,105,110,102,111,32,119,97,115,32,110,101,118,101,114,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,112,110,103,95,119,114,105,116,101,95,114,111,119,46,0,0,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,104,101,117,114,105,115,116,105,99,32,109,101,116,104,111,100,0,79,117,116,32,111,102,32,77,101,109,111,114,121,33,0,0,79,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,109,101,109,99,112,121,95,99,104,101,99,107,46,0,0,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,32,110,111,46,32,37,115,58,32,37,115,0,0,0,0,0,0,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0,0,0,0,0,0,108,105,98,112,110,103,32,101,114,114,111,114,32,110,111,46,32,37,115,58,32,37,115,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,44,32,111,102,102,115,101,116,61,37,100,0,0,0,0,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255,0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,137,80,78,71,13,10,26,10,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,32,105,109,97,103,101,0,0,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,32,105,109,97,103,101,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,0,0,0,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,43,97,108,112,104,97,32,105,109,97,103,101,0,0,0,0,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,65,32,105,109,97,103,101,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,99,111,108,111,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,0,0,73,110,118,97,108,105,100,32,105,110,116,101,114,108,97,99,101,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,0,0,0,49,46,50,46,56,0,0,0,122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,99,111,109,112,114,101,115,115,111,114,32,45,45,32,118,101,114,115,105,111,110,32,101,114,114,111,114,0,0,0,122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,99,111,109,112,114,101,115,115,111,114,32,45,45,32,115,116,114,101,97,109,32,101,114,114,111,114,0,0,0,0,122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,99,111,109,112,114,101,115,115,111,114,32,45,45,32,109,101,109,32,101,114,114,111,114,0,0,0,0,0,0,0,122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,99,111,109,112,114,101,115,115,111,114,0,0,0,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,99,111,108,111,114,115,32,105,110,32,112,97,108,101,116,116,101,0,0,0,0,0,73,103,110,111,114,105,110,103,32,114,101,113,117,101,115,116,32,116,111,32,119,114,105,116,101,32,97,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,73,110,118,97,108,105,100,32,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,111,114,32,102,108,97,103,115,32,105,110,32,73,68,65,84,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,82,71,66,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,32,115,112,101,99,105,102,105,101,100,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0,0,69,109,98,101,100,100,101,100,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,105,110,32,105,67,67,80,32,99,104,117,110,107,32,105,115,32,110,101,103,97,116,105,118,101,0,0,0,0,0,0,0,69,109,98,101,100,100,101,100,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,116,111,111,32,108,97,114,103,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0,84,114,117,110,99,97,116,105,110,103,32,112,114,111,102,105,108,101,32,116,111,32,97,99,116,117,97,108,32,108,101,110,103,116,104,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,66,73,84,32,100,101,112,116,104,32,115,112,101,99,105,102,105,101,100,0,0,0,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,116,114,97,110,115,112,97,114,101,110,116,32,99,111,108,111,114,115,32,115,112,101,99,105,102,105,101,100,0,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,116,82,78,83,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,116,82,78,83,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0,67,97,110,39,116,32,119,114,105,116,101,32,116,82,78,83,32,119,105,116,104,32,97,110,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0,0,73,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,112,97,108,101,116,116,101,32,105,110,100,101,120,0,0,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,98,75,71,68,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,98,75,71,68,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,104,105,115,116,111,103,114,97,109,32,101,110,116,114,105,101,115,32,115,112,101,99,105,102,105,101,100,0,0,0,122,101,114,111,32,108,101,110,103,116,104,32,107,101,121,119,111,114,100,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,105,110,103,32,107,101,121,119,111,114,100,0,0,0,105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,32,99,104,97,114,97,99,116,101,114,32,48,120,37,48,50,88,0,0,0,0,0,0,0,0,116,114,97,105,108,105,110,103,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0,0,0,0,108,101,97,100,105,110,103,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0,0,0,0,0,101,120,116,114,97,32,105,110,116,101,114,105,111,114,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0,0,0,0,0,0,90,101,114,111,32,108,101,110,103,116,104,32,107,101,121,119,111,114,100,0,0,0,0,0,107,101,121,119,111,114,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,49,32,45,32,55,57,32,99,104,97,114,97,99,116,101,114,115,0,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,111,70,70,115,32,99,104,117,110,107,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0,0,0,0,0,0,0,37,49,50,46,49,50,101,0,85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,112,72,89,115,32,99,104,117,110,107,0,0,0,73,110,118,97,108,105,100,32,116,105,109,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,116,73,77,69,32,99,104,117,110,107,0,0,0,122,108,105,98,32,101,114,114,111,114,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,37,100,0,0,0,0,0,67,97,108,108,32,116,111,32,78,85,76,76,32,119,114,105,116,101,32,102,117,110,99,116,105,111,110,0,0,0,0,0,87,114,105,116,101,32,69,114,114,111,114,0,0,0,0,0,65,116,116,101,109,112,116,101,100,32,116,111,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,0,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,46,32,32,82,101,115,101,116,116,105,110,103,32,114,101,97,100,95,100,97,116,97,95,102,110,32,116,111,32,78,85,76,76,46,0,0,0,0,51,46,52,46,52,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,255,255,255,37,38,255,255,255,255,39,40,255,41,42,43,0,1,2,3,4,5,6,7,8,9,44,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,26,0,0,0,0,0,0,0,7,0,0,0,10,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,44,0,0,0,7,0,0,0,10,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,29,0,0,0,70,0,0,0,7,0,0,0,15,0,0,0,26,0,0,0,36,0,0,0,44,0,0,0,33,0,0,0,100,0,0,0,7,0,0,0,20,0,0,0,36,0,0,0,52,0,0,0,64,0,0,0,37,0,0,0,134,0,0,0,7,0,0,0,26,0,0,0,48,0,0,0,72,0,0,0,88,0,0,0,41,0,0,0,172,0,0,0,7,0,0,0,36,0,0,0,64,0,0,0,96,0,0,0,112,0,0,0,45,0,0,0,196,0,0,0,0,0,0,0,40,0,0,0,72,0,0,0,108,0,0,0,130,0,0,0,49,0,0,0,242,0,0,0,0,0,0,0,48,0,0,0,88,0,0,0,132,0,0,0,156,0,0,0,53,0,0,0,36,1,0,0,0,0,0,0,60,0,0,0,110,0,0,0,160,0,0,0,192,0,0,0,57,0,0,0,90,1,0,0,0,0,0,0,72,0,0,0,130,0,0,0,192,0,0,0,224,0,0,0,61,0,0,0,148,1,0,0,0,0,0,0,80,0,0,0,150,0,0,0,224,0,0,0,8,1,0,0,65,0,0,0,210,1,0,0,0,0,0,0,96,0,0,0,176,0,0,0,4,1,0,0,52,1,0,0,69,0,0,0,20,2,0,0,0,0,0,0,104,0,0,0,198,0,0,0,32,1,0,0,96,1,0,0,73,0,0,0,69,2,0,0,3,0,0,0,120,0,0,0,216,0,0,0,64,1,0,0,128,1,0,0,77,0,0,0,143,2,0,0,3,0,0,0,132,0,0,0,240,0,0,0,104,1,0,0,176,1,0,0,81,0,0,0,221,2,0,0,3,0,0,0,144,0,0,0,24,1,0,0,152,1,0,0,224,1,0,0,85,0,0,0,47,3,0,0,3,0,0,0,168,0,0,0,52,1,0,0,192,1,0,0,20,2,0,0,89,0,0,0,133,3,0,0,3,0,0,0,180,0,0,0,82,1,0,0,248,1,0,0,76,2,0,0,93,0,0,0,223,3,0,0,3,0,0,0,196,0,0,0,108,1,0,0,34,2,0,0,138,2,0,0,97,0,0,0,61,4,0,0,3,0,0,0,224,0,0,0,160,1,0,0,88,2,0,0,188,2,0,0,101,0,0,0,132,4,0,0,4,0,0,0,224,0,0,0,186,1,0,0,132,2,0,0,238,2,0,0,105,0,0,0,234,4,0,0,4,0,0,0,252,0,0,0,220,1,0,0,178,2,0,0,48,3,0,0,109,0,0,0,84,5,0,0,4,0,0,0,14,1,0,0,248,1,0,0,238,2,0,0,132,3,0,0,113,0,0,0,194,5,0,0,4,0,0,0,44,1,0,0,48,2,0,0,42,3,0,0,192,3,0,0,117,0,0,0,52,6,0,0,4,0,0,0,56,1,0,0,76,2,0,0,102,3,0,0,26,4,0,0,121,0,0,0,170,6,0,0,4,0,0,0,80,1,0,0,132,2,0,0,184,3,0,0,86,4,0,0,125,0,0,0,36,7,0,0,4,0,0,0,104,1,0,0,188,2,0,0,252,3,0,0,176,4,0,0,129,0,0,0,129,7,0,0,3,0,0,0,134,1,0,0,216,2,0,0,26,4,0,0,236,4,0,0,133,0,0,0,3,8,0,0,3,0,0,0,164,1,0,0,16,3,0,0,116,4,0,0,70,5,0,0,137,0,0,0,137,8,0,0,3,0,0,0,194,1,0,0,44,3,0,0,176,4,0,0,160,5,0,0,141,0,0,0,19,9,0,0,3,0,0,0,224,1,0,0,100,3,0,0,10,5,0,0,250,5,0,0,145,0,0,0,161,9,0,0,3,0,0,0,254,1,0,0,156,3,0,0,70,5,0,0,84,6,0,0,149,0,0,0,51,10,0,0,3,0,0,0,28,2,0,0,212,3,0,0,160,5,0,0,174,6,0,0,153,0,0,0,201,10,0,0,3,0,0,0,58,2,0,0,12,4,0,0,250,5,0,0,8,7,0,0,157,0,0,0,60,11,0,0,0,0,0,0,58,2,0,0,40,4,0,0,54,6,0,0,98,7,0,0,161,0,0,0,218,11,0,0,0,0,0,0,88,2,0,0,96,4,0,0,144,6,0,0,188,7,0,0,165,0,0,0,124,12,0,0,0,0,0,0,118,2,0,0,180,4,0,0,234,6,0,0,52,8,0,0,169,0,0,0,34,13,0,0,0,0,0,0,148,2,0,0,236,4,0,0,68,7,0,0,172,8,0,0,173,0,0,0,204,13,0,0,0,0,0,0,208,2,0,0,36,5,0,0,158,7,0,0,6,9,0,0,177,0,0,0,122,14,0,0,0,0,0,0,238,2,0,0,92,5,0,0,248,7,0,0,126,9,0,0,0,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,9,0,0,0,11,0,0,0,13,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,8,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,11,0,0,0,5,0,0,0,11,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,7,0,0,0,5,0,0,0,1,0,0,0,7,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,3,0,0,0,13,0,0,0,1,0,0,0,5,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,17,0,0,0,5,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,17,0,0,0,1,0,0,0,2,0,0,0,19,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,11,0,0,0,17,0,0,0,4,0,0,0,9,0,0,0,16,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,13,0,0,0,15,0,0,0,5,0,0,0,15,0,0,0,10,0,0,0,4,0,0,0,4,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,6,0,0,0,19,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,17,0,0,0,0,0,0,0,7,0,0,0,16,0,0,0,34,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,14,0,0,0,11,0,0,0,14,0,0,0,16,0,0,0,14,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,14,0,0,0,11,0,0,0,16,0,0,0,30,0,0,0,2,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,13,0,0,0,7,0,0,0,22,0,0,0,22,0,0,0,13,0,0,0,10,0,0,0,2,0,0,0,19,0,0,0,4,0,0,0,28,0,0,0,6,0,0,0,33,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,8,0,0,0,26,0,0,0,12,0,0,0,28,0,0,0,3,0,0,0,10,0,0,0,3,0,0,0,23,0,0,0,4,0,0,0,31,0,0,0,11,0,0,0,31,0,0,0,7,0,0,0,7,0,0,0,21,0,0,0,7,0,0,0,1,0,0,0,37,0,0,0,19,0,0,0,26,0,0,0,5,0,0,0,10,0,0,0,19,0,0,0,10,0,0,0,15,0,0,0,25,0,0,0,23,0,0,0,25,0,0,0,13,0,0,0,3,0,0,0,2,0,0,0,29,0,0,0,42,0,0,0,1,0,0,0,23,0,0,0,28,0,0,0,17,0,0,0,0,0,0,0,10,0,0,0,23,0,0,0,10,0,0,0,35,0,0,0,19,0,0,0,35,0,0,0,17,0,0,0,1,0,0,0,14,0,0,0,21,0,0,0,29,0,0,0,19,0,0,0,11,0,0,0,46,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,23,0,0,0,44,0,0,0,7,0,0,0,59,0,0,0,1,0,0,0,12,0,0,0,7,0,0,0,12,0,0,0,26,0,0,0,39,0,0,0,14,0,0,0,22,0,0,0,41,0,0,0,6,0,0,0,14,0,0,0,6,0,0,0,34,0,0,0,46,0,0,0,10,0,0,0,2,0,0,0,64,0,0,0,17,0,0,0,4,0,0,0,29,0,0,0,14,0,0,0,49,0,0,0,10,0,0,0,24,0,0,0,46,0,0,0,4,0,0,0,18,0,0,0,13,0,0,0,32,0,0,0,48,0,0,0,14,0,0,0,42,0,0,0,32,0,0,0,20,0,0,0,4,0,0,0,40,0,0,0,7,0,0,0,43,0,0,0,22,0,0,0,10,0,0,0,67,0,0,0,19,0,0,0,6,0,0,0,18,0,0,0,31,0,0,0,34,0,0,0,34,0,0,0,20,0,0,0,61,0,0,0,148,124,0,0,188,133,0,0,153,154,0,0,211,164,0,0,246,187,0,0,98,199,0,0,71,216,0,0,13,230,0,0,40,249,0,0,120,11,1,0,93,20,1,0,23,42,1,0,50,53,1,0,166,73,1,0,131,86,1,0,201,104,1,0,236,119,1,0,196,142,1,0,225,145,1,0,171,175,1,0,142,176,1,0,26,204,1,0,63,211,1,0,117,237,1,0,80,242,1,0,213,9,2,0,240,22,2,0,186,40,2,0,159,55,2,0,11,75,2,0,46,84,2,0,100,106,2,0,65,117,2,0,105,140,2,0,196,119,0,0,243,114,0,0,170,125,0,0,157,120,0,0,47,102,0,0,24,99,0,0,65,108,0,0,118,105,0,0,18,84,0,0,37,81,0,0,124,94,0,0,75,91,0,0,249,69,0,0,206,64,0,0,151,79,0,0,160,74,0,0,95,53,0,0,104,48,0,0,49,63,0,0,6,58,0,0,180,36,0,0,131,33,0,0,218,46,0,0,237,43,0,0,137,22,0,0,190,19,0,0,231,28,0,0,208,25,0,0,98,7,0,0,85,2,0,0,12,13,0,0,59,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,22,0,0,0,38,0,0,0,24,0,0,0,42,0,0,0,26,0,0,0,46,0,0,0,28,0,0,0,50,0,0,0,30,0,0,0,54,0,0,0,32,0,0,0,58,0,0,0,34,0,0,0,62,0,0,0,26,0,0,0,46,0,0,0,26,0,0,0,48,0,0,0,26,0,0,0,50,0,0,0,30,0,0,0,54,0,0,0,30,0,0,0,56,0,0,0,30,0,0,0,58,0,0,0,34,0,0,0,62,0,0,0,28,0,0,0,50,0,0,0,26,0,0,0,50,0,0,0,30,0,0,0,54,0,0,0,28,0,0,0,54,0,0,0,32,0,0,0,58,0,0,0,30,0,0,0,58,0,0,0,34,0,0,0,62,0,0,0,26,0,0,0,50,0,0,0,30,0,0,0,54,0,0,0,26,0,0,0,52,0,0,0,30,0,0,0,56,0,0,0,34,0,0,0,60,0,0,0,30,0,0,0,58,0,0,0,34,0,0,0,62,0,0,0,30,0,0,0,54,0,0,0,24,0,0,0,50,0,0,0,28,0,0,0,54,0,0,0,32,0,0,0,58,0,0,0,26,0,0,0,54,0,0,0,30,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,8,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,3,0,0,0,4,0,0,0,255,255,255,255,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,69,68,0,0,174,85,0,0,147,103,0,0,120,118,0,0,222,6,0,0,53,23,0,0,8,37,0,0,227,52,0,0,114,65,0,0,153,80,0,0,164,98,0,0,79,115,0,0,233,3,0,0,2,18,0,0,63,32,0,0,212,49,0,0,43,78,0,0,192,95,0,0,253,109,0,0,22,124,0,0,176,12,0,0,91,29,0,0,102,47,0,0,141,62,0,0,28,75,0,0,247,90,0,0,202,104,0,0,33,121,0,0,135,9,0,0,108,24,0,0,81,42,0,0,186,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,0,0,0,0,0,0,0,0,13,0,0,0,4,0,4,0,8,0,4,0,14,0,0,0,4,0,5,0,16,0,8,0,14,0,0,0,4,0,6,0,32,0,32,0,14,0,0,0,4,0,4,0,16,0,16,0,15,0,0,0,8,0,16,0,32,0,32,0,15,0,0,0,8,0,16,0,128,0,128,0,15,0,0,0,8,0,32,0,128,0,0,1,15,0,0,0,32,0,128,0,2,1,0,4,15,0,0,0,32,0,2,1,2,1,0,16,15,0,0,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,0,100,0,0,248,104,0,0,1,1,0,0,30,1,0,0,15,0,0,0,0,0,0,0,128,104,0,0,232,105,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,240,106,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,105,108,101,32,101,114,114,111,114,0,0,0,0,0,0,115,116,114,101,97,109,32,101,114,114,111,114,0,0,0,0,100,97,116,97,32,101,114,114,111,114,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,98,117,102,102,101,114,32,101,114,114,111,114,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,0,0,0,64,107,0,0,80,107,0,0,96,107,0,0,104,107,0,0,120,107,0,0,136,107,0,0,152,107,0,0,176,107,0,0,192,107,0,0,96,107,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_cleanup_setjmp=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _pthread_mutex_lock() {}

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  var _emscripten_prep_setjmp=true;


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;


  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

   
  Module["_strcpy"] = _strcpy;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _pthread_mutex_unlock() {}



  var _emscripten_setjmp=true;

  
  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_send": _send, "_fread": _fread, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_write": _write, "_longjmp": _longjmp, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_fprintf": _fprintf, "_open": _open, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_perror": _perror, "_sysconf": _sysconf, "_close": _close, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_puts": _puts, "_mkport": _mkport, "_fclose": _fclose, "__reallyNegative": __reallyNegative, "_feof": _feof, "_fsync": _fsync, "___errno_location": ___errno_location, "_recv": _recv, "_fputc": _fputc, "__exit": __exit, "_read": _read, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fputs": _fputs, "_fopen": _fopen, "_exit": _exit, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _send=env._send;
  var _fread=env._fread;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _write=env._write;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _fprintf=env._fprintf;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var __reallyNegative=env.__reallyNegative;
  var _feof=env._feof;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fputc=env._fputc;
  var __exit=env.__exit;
  var _read=env._read;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $intext = 0, $length = 0, $lindex = 0, $opt = 0, $outfile = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lindex = sp + 128|0;
 $length = sp + 116|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 HEAP32[$lindex>>2] = -1;
 $outfile = 0;
 $intext = 0;
 HEAP32[$length>>2] = 0;
 L1: while(1) {
  $3 = $1;
  $4 = $2;
  $5 = HEAP32[8>>2]|0;
  $6 = (_getopt_long($3,$4,$5,16,$lindex)|0);
  $opt = $6;
  $7 = ($6|0)!=(-1);
  if (!($7)) {
   label = 72;
   break;
  }
  $8 = $opt;
  do {
   switch ($8|0) {
   case 104:  {
    label = 4;
    break L1;
    break;
   }
   case 111:  {
    $11 = HEAP32[27752>>2]|0;
    $outfile = $11;
    break;
   }
   case 115:  {
    $12 = HEAP32[27752>>2]|0;
    $13 = (_atoi($12)|0);
    HEAP32[336>>2] = $13;
    $14 = HEAP32[336>>2]|0;
    $15 = ($14|0)<=(0);
    if ($15) {
     label = 10;
     break L1;
    }
    break;
   }
   case 118:  {
    $18 = HEAP32[27752>>2]|0;
    $19 = (_atoi($18)|0);
    HEAP32[368>>2] = $19;
    $20 = HEAP32[368>>2]|0;
    $21 = ($20|0)<(0);
    if ($21) {
     label = 13;
     break L1;
    }
    break;
   }
   case 109:  {
    $29 = HEAP32[27752>>2]|0;
    $30 = (_atoi($29)|0);
    HEAP32[432>>2] = $30;
    $31 = HEAP32[432>>2]|0;
    $32 = ($31|0)<(0);
    if ($32) {
     label = 23;
     break L1;
    }
    break;
   }
   case 100:  {
    $35 = HEAP32[27752>>2]|0;
    $36 = (_atoi($35)|0);
    HEAP32[464>>2] = $36;
    $37 = HEAP32[464>>2]|0;
    $38 = ($37|0)<(0);
    if ($38) {
     label = 26;
     break L1;
    }
    break;
   }
   case 108:  {
    $24 = HEAP32[27752>>2]|0;
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    switch ($26|0) {
    case 76: case 108:  {
     HEAP32[400>>2] = 0;
     break;
    }
    case 77: case 109:  {
     HEAP32[400>>2] = 1;
     break;
    }
    case 81: case 113:  {
     HEAP32[400>>2] = 2;
     break;
    }
    case 72: case 104:  {
     HEAP32[400>>2] = 3;
     break;
    }
    default: {
     label = 20;
     break L1;
    }
    }
    break;
   }
   case 116:  {
    $41 = HEAP32[27752>>2]|0;
    $42 = (_strcasecmp($41,496)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     HEAP32[504>>2] = 0;
    } else {
     $44 = HEAP32[27752>>2]|0;
     $45 = (_strcasecmp($44,512)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      HEAP32[504>>2] = 1;
     } else {
      $47 = HEAP32[27752>>2]|0;
      $48 = (_strcasecmp($47,520)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       HEAP32[504>>2] = 2;
      } else {
       $50 = HEAP32[27752>>2]|0;
       $51 = (_strcasecmp($50,528)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        HEAP32[504>>2] = 3;
       } else {
        $53 = HEAP32[27752>>2]|0;
        $54 = (_strcasecmp($53,536)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         HEAP32[504>>2] = 4;
        } else {
         $56 = HEAP32[27752>>2]|0;
         $57 = (_strcasecmp($56,544)|0);
         $58 = ($57|0)==(0);
         if ($58) {
          HEAP32[504>>2] = 6;
         } else {
          $59 = HEAP32[27752>>2]|0;
          $60 = (_strcasecmp($59,552)|0);
          $61 = ($60|0)==(0);
          if ($61) {
           HEAP32[504>>2] = 5;
          } else {
           $62 = HEAP32[27752>>2]|0;
           $63 = (_strcasecmp($62,560)|0);
           $64 = ($63|0)==(0);
           if ($64) {
            HEAP32[504>>2] = 7;
           } else {
            $65 = HEAP32[27752>>2]|0;
            $66 = (_strcasecmp($65,568)|0);
            $67 = ($66|0)==(0);
            if (!($67)) {
             label = 46;
             break L1;
            }
            HEAP32[504>>2] = 8;
           }
          }
         }
        }
       }
      }
     }
    }
    break;
   }
   case 83:  {
    HEAP32[608>>2] = 1;
    break;
   }
   case 107:  {
    HEAP32[616>>2] = 3;
    break;
   }
   case 99:  {
    HEAP32[624>>2] = 1;
    break;
   }
   case 105:  {
    HEAP32[624>>2] = 0;
    break;
   }
   case 56:  {
    HEAP32[632>>2] = 1;
    break;
   }
   case 77:  {
    HEAP32[640>>2] = 1;
    break;
   }
   case 98:  {
    $74 = HEAP32[27752>>2]|0;
    $75 = (_color_set(704,$74)|0);
    $76 = ($75|0)!=(0);
    if ($76) {
     label = 66;
     break L1;
    }
    break;
   }
   case 86:  {
    label = 68;
    break L1;
    break;
   }
   case 0:  {
    break;
   }
   case 102:  {
    $70 = HEAP32[27752>>2]|0;
    $71 = (_color_set(648,$70)|0);
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 63;
     break L1;
    }
    break;
   }
   default: {
    label = 70;
    break L1;
   }
   }
  } while(0);
 }
 switch (label|0) {
  case 4: {
   $9 = HEAP32[$lindex>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    _usage(1,1);
    _exit(0);
    // unreachable;
   } else {
    _usage(1,0);
    _exit(0);
    // unreachable;
   }
   break;
  }
  case 10: {
   $16 = HEAP32[_stderr>>2]|0;
   $17 = HEAP32[336>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   (_fprintf(($16|0),(344|0),($vararg_buffer|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 13: {
   $22 = HEAP32[_stderr>>2]|0;
   $23 = HEAP32[368>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $23;
   (_fprintf(($22|0),(376|0),($vararg_buffer1|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 20: {
   $27 = HEAP32[_stderr>>2]|0;
   $28 = HEAP32[27752>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $28;
   (_fprintf(($27|0),(408|0),($vararg_buffer4|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 23: {
   $33 = HEAP32[_stderr>>2]|0;
   $34 = HEAP32[432>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $34;
   (_fprintf(($33|0),(440|0),($vararg_buffer7|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 26: {
   $39 = HEAP32[_stderr>>2]|0;
   $40 = HEAP32[464>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $40;
   (_fprintf(($39|0),(472|0),($vararg_buffer10|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 46: {
   $68 = HEAP32[_stderr>>2]|0;
   $69 = HEAP32[27752>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $69;
   (_fprintf(($68|0),(584|0),($vararg_buffer13|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 63: {
   $73 = HEAP32[_stderr>>2]|0;
   (_fprintf(($73|0),(664|0),($vararg_buffer16|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 66: {
   $77 = HEAP32[_stderr>>2]|0;
   (_fprintf(($77|0),(720|0),($vararg_buffer18|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 68: {
   _usage(0,0);
   _exit(0);
   // unreachable;
   break;
  }
  case 70: {
   $78 = HEAP32[_stderr>>2]|0;
   (_fprintf(($78|0),(760|0),($vararg_buffer20|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 72: {
   $79 = $1;
   $80 = ($79|0)==(1);
   if ($80) {
    _usage(1,0);
    _exit(0);
    // unreachable;
   }
   $81 = $outfile;
   $82 = ($81|0)==(0|0);
   if ($82) {
    $83 = HEAP32[504>>2]|0;
    $84 = ($83|0)==(0);
    if ($84) {
     $85 = HEAP32[_stderr>>2]|0;
     (_fprintf(($85|0),(808|0),($vararg_buffer22|0))|0);
     _exit(1);
     // unreachable;
    }
   }
   $86 = HEAP32[27648>>2]|0;
   $87 = $1;
   $88 = ($86|0)<($87|0);
   if ($88) {
    $89 = HEAP32[27648>>2]|0;
    $90 = $2;
    $91 = (($90) + ($89<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $intext = $92;
    $93 = $intext;
    $94 = (_strlen(($93|0))|0);
    HEAP32[$length>>2] = $94;
   }
   $95 = $intext;
   $96 = ($95|0)==(0|0);
   if ($96) {
    $97 = (_readStdin($length)|0);
    $intext = $97;
   }
   $98 = HEAP32[640>>2]|0;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = HEAP32[368>>2]|0;
    $101 = ($100|0)>(4);
    if ($101) {
     $102 = HEAP32[_stderr>>2]|0;
     HEAP32[$vararg_buffer24>>2] = 4;
     (_fprintf(($102|0),(840|0),($vararg_buffer24|0))|0);
     _exit(1);
     // unreachable;
    }
   }
   $103 = HEAP32[640>>2]|0;
   $104 = ($103|0)!=(0);
   if (!($104)) {
    $105 = HEAP32[368>>2]|0;
    $106 = ($105|0)>(40);
    if ($106) {
     $107 = HEAP32[_stderr>>2]|0;
     HEAP32[$vararg_buffer27>>2] = 40;
     (_fprintf(($107|0),(840|0),($vararg_buffer27|0))|0);
     _exit(1);
     // unreachable;
    }
   }
   $108 = HEAP32[432>>2]|0;
   $109 = ($108|0)<(0);
   if ($109) {
    $110 = HEAP32[640>>2]|0;
    $111 = ($110|0)!=(0);
    if ($111) {
     HEAP32[432>>2] = 2;
    } else {
     HEAP32[432>>2] = 4;
    }
   }
   $112 = HEAP32[640>>2]|0;
   $113 = ($112|0)!=(0);
   do {
    if ($113) {
     $114 = HEAP32[368>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      $116 = HEAP32[_stderr>>2]|0;
      (_fprintf(($116|0),(880|0),($vararg_buffer30|0))|0);
      _exit(1);
      // unreachable;
     }
     $117 = HEAP32[608>>2]|0;
     $118 = ($117|0)!=(0);
     if ($118) {
      $119 = HEAP32[_stderr>>2]|0;
      (_fprintf(($119|0),(944|0),($vararg_buffer32|0))|0);
      _exit(1);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $120 = HEAP32[608>>2]|0;
   $121 = ($120|0)!=(0);
   if (!($121)) {
    $128 = $intext;
    $129 = HEAP32[$length>>2]|0;
    $130 = $outfile;
    _qrencode($128,$129,$130);
    STACKTOP = sp;return 0;
   }
   $122 = HEAP32[368>>2]|0;
   $123 = ($122|0)==(0);
   if ($123) {
    $124 = HEAP32[_stderr>>2]|0;
    (_fprintf(($124|0),(1000|0),($vararg_buffer34|0))|0);
    _exit(1);
    // unreachable;
   }
   $125 = $intext;
   $126 = HEAP32[$length>>2]|0;
   $127 = $outfile;
   _qrencodeStructured($125,$126,$127);
   STACKTOP = sp;return 0;
   break;
  }
 }
 return (0)|0;
}
function _usage($help,$longopt) {
 $help = $help|0;
 $longopt = $longopt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $help;
 $1 = $longopt;
 $2 = HEAP32[_stderr>>2]|0;
 $3 = (_QRcode_APIVersionString()|0);
 HEAP32[$vararg_buffer>>2] = $3;
 (_fprintf(($2|0),(2632|0),($vararg_buffer|0))|0);
 $4 = $0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[_stderr>>2]|0;
  (_fprintf(($8|0),(2696|0),($vararg_buffer1|0))|0);
 } else {
  $9 = HEAP32[_stderr>>2]|0;
  (_fprintf(($9|0),(5600|0),($vararg_buffer3|0))|0);
 }
 STACKTOP = sp;return;
}
function _color_set($color,$value) {
 $color = $color|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $len = sp + 40|0;
 $1 = $color;
 $2 = $value;
 $3 = $2;
 $4 = (_strlen(($3|0))|0);
 HEAP32[$len>>2] = $4;
 $5 = HEAP32[$len>>2]|0;
 $6 = ($5|0)==(6);
 do {
  if ($6) {
   $7 = $2;
   $8 = $1;
   $9 = $1;
   $10 = (($9) + 4|0);
   $11 = $1;
   $12 = (($11) + 8|0);
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $12;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $len;
   $13 = (_sscanf($7,2592,$vararg_buffer)|0);
   $count = $13;
   $14 = $count;
   $15 = ($14|0)<(3);
   if (!($15)) {
    $16 = HEAP32[$len>>2]|0;
    $17 = ($16|0)!=(6);
    if (!($17)) {
     $18 = $1;
     $19 = (($18) + 12|0);
     HEAP32[$19>>2] = 255;
     break;
    }
   }
   $0 = -1;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  } else {
   $20 = HEAP32[$len>>2]|0;
   $21 = ($20|0)==(8);
   if (!($21)) {
    $0 = -1;
    $35 = $0;
    STACKTOP = sp;return ($35|0);
   }
   $22 = $2;
   $23 = $1;
   $24 = $1;
   $25 = (($24) + 4|0);
   $26 = $1;
   $27 = (($26) + 8|0);
   $28 = $1;
   $29 = (($28) + 12|0);
   HEAP32[$vararg_buffer4>>2] = $23;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $25;
   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $27;
   $vararg_ptr9 = (($vararg_buffer4) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $29;
   $vararg_ptr10 = (($vararg_buffer4) + 16|0);
   HEAP32[$vararg_ptr10>>2] = $len;
   $30 = (_sscanf($22,2608,$vararg_buffer4)|0);
   $count = $30;
   $31 = $count;
   $32 = ($31|0)<(4);
   if (!($32)) {
    $33 = HEAP32[$len>>2]|0;
    $34 = ($33|0)!=(8);
    if (!($34)) {
     break;
    }
   }
   $0 = -1;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 } while(0);
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _readStdin($length) {
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $length;
 $1 = (_malloc(113441)|0);
 $buffer = $1;
 $2 = $buffer;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fprintf(($4|0),(2512|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $5 = $buffer;
 $6 = HEAP32[_stdin>>2]|0;
 $7 = (_fread(($5|0),1,113440,($6|0))|0);
 $ret = $7;
 $8 = $ret;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[_stderr>>2]|0;
  (_fprintf(($10|0),(2544|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 $11 = HEAP32[_stdin>>2]|0;
 $12 = (_feof(($11|0))|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[_stderr>>2]|0;
  (_fprintf(($14|0),(2560|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $15 = $ret;
  $16 = $buffer;
  $17 = (($16) + ($15)|0);
  HEAP8[$17>>0] = 0;
  $18 = $ret;
  $19 = $0;
  HEAP32[$19>>2] = $18;
  $20 = $buffer;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _qrencodeStructured($intext,$length,$outfile) {
 $intext = $intext|0;
 $length = $length|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $base = 0, $filename = 0, $i = 0, $p = 0, $q = 0, $qrlist = 0, $suffix = 0, $suffix_size = 0, $type_suffix = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $filename = sp + 112|0;
 $0 = $intext;
 $1 = $length;
 $2 = $outfile;
 $suffix = 0;
 $i = 1;
 $3 = HEAP32[504>>2]|0;
 switch ($3|0) {
 case 2:  {
  $type_suffix = 2360;
  break;
 }
 case 0:  {
  $type_suffix = 2344;
  break;
 }
 case 8: case 7: case 5: case 4: case 3:  {
  $type_suffix = 2368;
  break;
 }
 case 1:  {
  $type_suffix = 2352;
  break;
 }
 default: {
  $4 = HEAP32[_stderr>>2]|0;
  (_fprintf(($4|0),(1144|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 }
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(2376|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 $8 = $2;
 $9 = (___strdup($8)|0);
 $base = $9;
 $10 = $base;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[_stderr>>2]|0;
  (_fprintf(($12|0),(1256|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 }
 $13 = $type_suffix;
 $14 = (_strlen(($13|0))|0);
 $suffix_size = $14;
 $15 = $base;
 $16 = (_strlen(($15|0))|0);
 $17 = $suffix_size;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $base;
  $20 = $base;
  $21 = (_strlen(($20|0))|0);
  $22 = (($19) + ($21)|0);
  $23 = $suffix_size;
  $24 = (0 - ($23))|0;
  $25 = (($22) + ($24)|0);
  $q = $25;
  $26 = $type_suffix;
  $27 = $q;
  $28 = (_strcasecmp($26,$27)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = $q;
   $31 = (___strdup($30)|0);
   $suffix = $31;
   $32 = $q;
   HEAP8[$32>>0] = 0;
  }
 }
 $33 = $0;
 $34 = $1;
 $35 = (_encodeStructured($33,$34)|0);
 $qrlist = $35;
 $36 = $qrlist;
 $37 = ($36|0)==(0|0);
 if ($37) {
  _perror((1064|0));
  _exit(1);
  // unreachable;
 }
 $38 = $qrlist;
 $p = $38;
 L23: while(1) {
  $39 = $p;
  $40 = ($39|0)!=(0|0);
  if (!($40)) {
   label = 38;
   break;
  }
  $41 = $p;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   label = 20;
   break;
  }
  $45 = $suffix;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $base;
   $48 = $i;
   $49 = $suffix;
   HEAP32[$vararg_buffer7>>2] = $47;
   $vararg_ptr9 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $48;
   $vararg_ptr10 = (($vararg_buffer7) + 8|0);
   HEAP32[$vararg_ptr10>>2] = $49;
   (_snprintf($filename,4096,2488,$vararg_buffer7)|0);
  } else {
   $50 = $base;
   $51 = $i;
   HEAP32[$vararg_buffer11>>2] = $50;
   $vararg_ptr14 = (($vararg_buffer11) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $51;
   (_snprintf($filename,4096,2504,$vararg_buffer11)|0);
  }
  $52 = HEAP32[1096>>2]|0;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = HEAP32[_stderr>>2]|0;
   $55 = $p;
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $filename;
   $vararg_ptr18 = (($vararg_buffer15) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $57;
   (_fprintf(($54|0),(1104|0),($vararg_buffer15|0))|0);
  }
  $58 = HEAP32[504>>2]|0;
  switch ($58|0) {
  case 0:  {
   $59 = $p;
   $60 = HEAP32[$59>>2]|0;
   (_writePNG($60,$filename)|0);
   break;
  }
  case 1:  {
   $61 = $p;
   $62 = HEAP32[$61>>2]|0;
   (_writeEPS($62,$filename)|0);
   break;
  }
  case 2:  {
   $63 = $p;
   $64 = HEAP32[$63>>2]|0;
   (_writeSVG($64,$filename)|0);
   break;
  }
  case 4: case 3:  {
   $65 = $p;
   $66 = HEAP32[$65>>2]|0;
   (_writeANSI($66,$filename)|0);
   break;
  }
  case 6:  {
   $67 = $p;
   $68 = HEAP32[$67>>2]|0;
   (_writeASCII($68,$filename,1)|0);
   break;
  }
  case 5:  {
   $69 = $p;
   $70 = HEAP32[$69>>2]|0;
   (_writeASCII($70,$filename,0)|0);
   break;
  }
  case 7:  {
   $71 = $p;
   $72 = HEAP32[$71>>2]|0;
   (_writeUTF8($72,$filename,0)|0);
   break;
  }
  case 8:  {
   $73 = $p;
   $74 = HEAP32[$73>>2]|0;
   (_writeUTF8($74,$filename,0)|0);
   break;
  }
  default: {
   label = 35;
   break L23;
  }
  }
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
  $78 = $p;
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $p = $80;
 }
 if ((label|0) == 20) {
  $44 = HEAP32[_stderr>>2]|0;
  (_fprintf(($44|0),(2448|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 35) {
  $75 = HEAP32[_stderr>>2]|0;
  (_fprintf(($75|0),(1144|0),($vararg_buffer19|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 38) {
  $81 = $base;
  _free($81);
  $82 = $suffix;
  $83 = ($82|0)!=(0|0);
  if (!($83)) {
   $85 = $qrlist;
   _QRcode_List_free($85);
   STACKTOP = sp;return;
  }
  $84 = $suffix;
  _free($84);
  $85 = $qrlist;
  _QRcode_List_free($85);
  STACKTOP = sp;return;
 }
}
function _qrencode($intext,$length,$outfile) {
 $intext = $intext|0;
 $length = $length|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $qrcode = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $intext;
 $1 = $length;
 $2 = $outfile;
 $3 = $0;
 $4 = $1;
 $5 = (_encode($3,$4)|0);
 $qrcode = $5;
 $6 = $qrcode;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _perror((1064|0));
  _exit(1);
  // unreachable;
 }
 $8 = HEAP32[1096>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[_stderr>>2]|0;
  $11 = $2;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $2;
   $16 = $13;
  } else {
   $16 = 1128;
  }
  $14 = $qrcode;
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  (_fprintf(($10|0),(1104|0),($vararg_buffer|0))|0);
 }
 $17 = HEAP32[504>>2]|0;
 switch ($17|0) {
 case 8:  {
  $32 = $qrcode;
  $33 = $2;
  (_writeUTF8($32,$33,1)|0);
  break;
 }
 case 4: case 3:  {
  $24 = $qrcode;
  $25 = $2;
  (_writeANSI($24,$25)|0);
  break;
 }
 case 6:  {
  $26 = $qrcode;
  $27 = $2;
  (_writeASCII($26,$27,1)|0);
  break;
 }
 case 5:  {
  $28 = $qrcode;
  $29 = $2;
  (_writeASCII($28,$29,0)|0);
  break;
 }
 case 7:  {
  $30 = $qrcode;
  $31 = $2;
  (_writeUTF8($30,$31,0)|0);
  break;
 }
 case 2:  {
  $22 = $qrcode;
  $23 = $2;
  (_writeSVG($22,$23)|0);
  break;
 }
 case 0:  {
  $18 = $qrcode;
  $19 = $2;
  (_writePNG($18,$19)|0);
  break;
 }
 case 1:  {
  $20 = $qrcode;
  $21 = $2;
  (_writeEPS($20,$21)|0);
  break;
 }
 default: {
  $34 = HEAP32[_stderr>>2]|0;
  (_fprintf(($34|0),(1144|0),($vararg_buffer2|0))|0);
  _exit(1);
  // unreachable;
 }
 }
 $35 = $qrcode;
 _QRcode_free($35);
 STACKTOP = sp;return;
}
function _encode($intext,$length) {
 $intext = $intext|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $intext;
 $1 = $length;
 $2 = HEAP32[640>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[632>>2]|0;
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = $1;
   $7 = $0;
   $8 = HEAP32[368>>2]|0;
   $9 = HEAP32[400>>2]|0;
   $10 = (_QRcode_encodeDataMQR($6,$7,$8,$9)|0);
   $code = $10;
  } else {
   $11 = $0;
   $12 = HEAP32[368>>2]|0;
   $13 = HEAP32[400>>2]|0;
   $14 = HEAP32[616>>2]|0;
   $15 = HEAP32[624>>2]|0;
   $16 = (_QRcode_encodeStringMQR($11,$12,$13,$14,$15)|0);
   $code = $16;
  }
  $30 = $code;
  STACKTOP = sp;return ($30|0);
 } else {
  $17 = HEAP32[632>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $1;
   $20 = $0;
   $21 = HEAP32[368>>2]|0;
   $22 = HEAP32[400>>2]|0;
   $23 = (_QRcode_encodeData($19,$20,$21,$22)|0);
   $code = $23;
  } else {
   $24 = $0;
   $25 = HEAP32[368>>2]|0;
   $26 = HEAP32[400>>2]|0;
   $27 = HEAP32[616>>2]|0;
   $28 = HEAP32[624>>2]|0;
   $29 = (_QRcode_encodeString($24,$25,$26,$27,$28)|0);
   $code = $29;
  }
  $30 = $code;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _writePNG($qrcode,$outfile) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 var $$reg2mem94$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alpha_values = 0, $bit$0 = 0, $bit$1 = 0, $bit$2 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0;
 var $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond4 = 0, $cond5 = 0;
 var $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $info_ptr = 0, $p$0 = 0, $p$1 = 0, $png_ptr = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, $x$0 = 0, $xx$0 = 0, $y$0 = 0;
 var $y$1 = 0, $y$2 = 0, $yy$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer104 = sp + 40|0;
 $vararg_buffer102 = sp + 32|0;
 $vararg_buffer100 = sp + 24|0;
 $vararg_buffer98 = sp + 16|0;
 $vararg_buffer96 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $png_ptr = sp + 48|0;
 $info_ptr = sp + 44|0;
 $alpha_values = sp + 52|0;
 $0 = (($qrcode) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[432>>2]|0;
 $3 = $2<<1;
 $4 = (($1) + ($3))|0;
 $5 = HEAP32[336>>2]|0;
 $6 = Math_imul($4, $5)|0;
 $7 = (($6) + 7)|0;
 $8 = (($7|0) / 8)&-1;
 __THREW__ = 0;
 $9 = (invoke_ii(17,($8|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
 $12 = tempRet0;
 $cond = ($11|0)==(1);
 L1: do {
  if ($cond) {
   $$reg2mem94$0 = $12;
  } else {
   $13 = ($9|0)==(0|0);
   if ($13) {
    $14 = HEAP32[_stderr>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(18,($14|0),(1256|0),($vararg_buffer|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    if ((($15|0) != 0) & ((threwValue|0) != 0)) { $16 = _testSetjmp(HEAP32[$15>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($16|0) == 0) { _longjmp($15|0, threwValue|0); } tempRet0 = threwValue; } else { $16 = -1; };
    $17 = tempRet0;
    $cond12 = ($16|0)==(1);
    if ($cond12) {
     $$reg2mem94$0 = $17;
     break;
    }
    __THREW__ = 0;
    invoke_vi(19,1);
    $18 = __THREW__; __THREW__ = 0;
    if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = threwValue; } else { $19 = -1; };
    $20 = tempRet0;
    $cond13 = ($19|0)==(1);
    if ($cond13) {
     $$reg2mem94$0 = $20;
     break;
    }
    // unreachable;
   }
   $21 = HEAP8[$outfile>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(45);
   if ($23) {
    $24 = (($outfile) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($26|0)==(0);
    if ($27) {
     $28 = HEAP32[_stdout>>2]|0;
     HEAP32[2224>>2] = $28;
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     $29 = (invoke_iii(20,($outfile|0),(1216|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = threwValue; } else { $31 = -1; };
     $32 = tempRet0;
     $cond1 = ($31|0)==(1);
     if ($cond1) {
      $$reg2mem94$0 = $32;
      break L1;
     }
     HEAP32[2224>>2] = $29;
     $33 = HEAP32[2224>>2]|0;
     $34 = ($33|0)==(0|0);
     if (!($34)) {
      break;
     }
     $35 = HEAP32[_stderr>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer96>>2] = $outfile;
     (invoke_iiii(18,($35|0),(1224|0),($vararg_buffer96|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = threwValue; } else { $37 = -1; };
     $38 = tempRet0;
     $cond9 = ($37|0)==(1);
     if ($cond9) {
      $$reg2mem94$0 = $38;
      break L1;
     }
     __THREW__ = 0;
     invoke_vi(21,(0|0));
     $39 = __THREW__; __THREW__ = 0;
     if ((($39|0) != 0) & ((threwValue|0) != 0)) { $40 = _testSetjmp(HEAP32[$39>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($40|0) == 0) { _longjmp($39|0, threwValue|0); } tempRet0 = threwValue; } else { $40 = -1; };
     $41 = tempRet0;
     $cond10 = ($40|0)==(1);
     if ($cond10) {
      $$reg2mem94$0 = $41;
      break L1;
     }
     __THREW__ = 0;
     invoke_vi(19,1);
     $42 = __THREW__; __THREW__ = 0;
     if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = threwValue; } else { $43 = -1; };
     $44 = tempRet0;
     $cond11 = ($43|0)==(1);
     if ($cond11) {
      $$reg2mem94$0 = $44;
      break L1;
     }
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   $45 = (invoke_iiiii(22,(9192|0),(0|0),(0|0),(0|0))|0);
   $46 = __THREW__; __THREW__ = 0;
   if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } tempRet0 = threwValue; } else { $47 = -1; };
   $48 = tempRet0;
   $cond2 = ($47|0)==(1);
   if ($cond2) {
    $$reg2mem94$0 = $48;
   } else {
    HEAP32[$png_ptr>>2] = $45;
    $49 = HEAP32[$png_ptr>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $51 = HEAP32[_stderr>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(18,($51|0),(2232|0),($vararg_buffer98|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = threwValue; } else { $53 = -1; };
     $54 = tempRet0;
     $cond7 = ($53|0)==(1);
     if ($cond7) {
      $$reg2mem94$0 = $54;
      break;
     }
     __THREW__ = 0;
     invoke_vi(19,1);
     $55 = __THREW__; __THREW__ = 0;
     if ((($55|0) != 0) & ((threwValue|0) != 0)) { $56 = _testSetjmp(HEAP32[$55>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($56|0) == 0) { _longjmp($55|0, threwValue|0); } tempRet0 = threwValue; } else { $56 = -1; };
     $57 = tempRet0;
     $cond8 = ($56|0)==(1);
     if ($cond8) {
      $$reg2mem94$0 = $57;
      break;
     }
     // unreachable;
    }
    $58 = HEAP32[$png_ptr>>2]|0;
    __THREW__ = 0;
    $59 = (invoke_ii(23,($58|0))|0);
    $60 = __THREW__; __THREW__ = 0;
    if ((($60|0) != 0) & ((threwValue|0) != 0)) { $61 = _testSetjmp(HEAP32[$60>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($61|0) == 0) { _longjmp($60|0, threwValue|0); } tempRet0 = threwValue; } else { $61 = -1; };
    $62 = tempRet0;
    $cond3 = ($61|0)==(1);
    if ($cond3) {
     $$reg2mem94$0 = $62;
    } else {
     HEAP32[$info_ptr>>2] = $59;
     $63 = HEAP32[$info_ptr>>2]|0;
     $64 = ($63|0)==(0|0);
     if (!($64)) {
      $72 = HEAP32[$png_ptr>>2]|0;
      _setjmpTable = _saveSetjmp($72,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
      __THREW__ = 0;
      $73 = __THREW__; __THREW__ = 0;
      if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = threwValue; } else { $74 = -1; };
      $75 = tempRet0;
      $cond4 = ($74|0)==(1);
      if ($cond4) {
       $$reg2mem94$0 = $75;
       break;
      }
      $$reg2mem94$0 = 0;
      break;
     }
     $65 = HEAP32[_stderr>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(18,($65|0),(2272|0),($vararg_buffer100|0))|0);
     $66 = __THREW__; __THREW__ = 0;
     if ((($66|0) != 0) & ((threwValue|0) != 0)) { $67 = _testSetjmp(HEAP32[$66>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($67|0) == 0) { _longjmp($66|0, threwValue|0); } tempRet0 = threwValue; } else { $67 = -1; };
     $68 = tempRet0;
     $cond5 = ($67|0)==(1);
     if ($cond5) {
      $$reg2mem94$0 = $68;
     } else {
      __THREW__ = 0;
      invoke_vi(19,1);
      $69 = __THREW__; __THREW__ = 0;
      if ((($69|0) != 0) & ((threwValue|0) != 0)) { $70 = _testSetjmp(HEAP32[$69>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($70|0) == 0) { _longjmp($69|0, threwValue|0); } tempRet0 = threwValue; } else { $70 = -1; };
      $71 = tempRet0;
      $cond6 = ($70|0)==(1);
      if ($cond6) {
       $$reg2mem94$0 = $71;
      } else {
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 L34: while(1) {
  $76 = ($$reg2mem94$0|0)!=(0);
  if ($76) {
   __THREW__ = 0;
   invoke_vii(24,($png_ptr|0),($info_ptr|0));
   $77 = __THREW__; __THREW__ = 0;
   if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = threwValue; } else { $78 = -1; };
   $79 = tempRet0;
   $cond31 = ($78|0)==(1);
   if ($cond31) {
    $$reg2mem94$0 = $79;
    continue;
   }
   $80 = HEAP32[_stderr>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(18,($80|0),(2312|0),($vararg_buffer102|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   if ((($81|0) != 0) & ((threwValue|0) != 0)) { $82 = _testSetjmp(HEAP32[$81>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($82|0) == 0) { _longjmp($81|0, threwValue|0); } tempRet0 = threwValue; } else { $82 = -1; };
   $83 = tempRet0;
   $cond32 = ($82|0)==(1);
   if ($cond32) {
    $$reg2mem94$0 = $83;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(19,1);
   $84 = __THREW__; __THREW__ = 0;
   if ((($84|0) != 0) & ((threwValue|0) != 0)) { $85 = _testSetjmp(HEAP32[$84>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($85|0) == 0) { _longjmp($84|0, threwValue|0); } tempRet0 = threwValue; } else { $85 = -1; };
   $86 = tempRet0;
   $cond33 = ($85|0)==(1);
   if ($cond33) {
    $$reg2mem94$0 = $86;
    continue;
   } else {
    label = 32;
    break;
   }
  }
  __THREW__ = 0;
  $87 = (invoke_ii(17,6)|0);
  $88 = __THREW__; __THREW__ = 0;
  if ((($88|0) != 0) & ((threwValue|0) != 0)) { $89 = _testSetjmp(HEAP32[$88>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($89|0) == 0) { _longjmp($88|0, threwValue|0); } tempRet0 = threwValue; } else { $89 = -1; };
  $90 = tempRet0;
  $cond14 = ($89|0)==(1);
  if ($cond14) {
   $$reg2mem94$0 = $90;
   continue;
  }
  $91 = ($87|0)==(0|0);
  if ($91) {
   $92 = HEAP32[_stderr>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(18,($92|0),(1256|0),($vararg_buffer104|0))|0);
   $93 = __THREW__; __THREW__ = 0;
   if ((($93|0) != 0) & ((threwValue|0) != 0)) { $94 = _testSetjmp(HEAP32[$93>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($94|0) == 0) { _longjmp($93|0, threwValue|0); } tempRet0 = threwValue; } else { $94 = -1; };
   $95 = tempRet0;
   $cond29 = ($94|0)==(1);
   if ($cond29) {
    $$reg2mem94$0 = $95;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(19,1);
   $96 = __THREW__; __THREW__ = 0;
   if ((($96|0) != 0) & ((threwValue|0) != 0)) { $97 = _testSetjmp(HEAP32[$96>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($97|0) == 0) { _longjmp($96|0, threwValue|0); } tempRet0 = threwValue; } else { $97 = -1; };
   $98 = tempRet0;
   $cond30 = ($97|0)==(1);
   if ($cond30) {
    $$reg2mem94$0 = $98;
    continue;
   } else {
    label = 37;
    break;
   }
  }
  $99 = HEAP32[648>>2]|0;
  $100 = $99&255;
  HEAP8[$87>>0] = $100;
  $101 = HEAP32[((648 + 4|0))>>2]|0;
  $102 = $101&255;
  $103 = (($87) + 1|0);
  HEAP8[$103>>0] = $102;
  $104 = HEAP32[((648 + 8|0))>>2]|0;
  $105 = $104&255;
  $106 = (($87) + 2|0);
  HEAP8[$106>>0] = $105;
  $107 = HEAP32[704>>2]|0;
  $108 = $107&255;
  $109 = (($87) + 3|0);
  HEAP8[$109>>0] = $108;
  $110 = HEAP32[((704 + 4|0))>>2]|0;
  $111 = $110&255;
  $112 = (($87) + 3|0);
  $113 = (($112) + 1|0);
  HEAP8[$113>>0] = $111;
  $114 = HEAP32[((704 + 8|0))>>2]|0;
  $115 = $114&255;
  $116 = (($87) + 3|0);
  $117 = (($116) + 2|0);
  HEAP8[$117>>0] = $115;
  $118 = HEAP32[((648 + 12|0))>>2]|0;
  $119 = $118&255;
  HEAP8[$alpha_values>>0] = $119;
  $120 = HEAP32[((704 + 12|0))>>2]|0;
  $121 = $120&255;
  $122 = (($alpha_values) + 1|0);
  HEAP8[$122>>0] = $121;
  $123 = HEAP32[$png_ptr>>2]|0;
  $124 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_viiii(25,($123|0),($124|0),($87|0),2);
  $125 = __THREW__; __THREW__ = 0;
  if ((($125|0) != 0) & ((threwValue|0) != 0)) { $126 = _testSetjmp(HEAP32[$125>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($126|0) == 0) { _longjmp($125|0, threwValue|0); } tempRet0 = threwValue; } else { $126 = -1; };
  $127 = tempRet0;
  $cond15 = ($126|0)==(1);
  if ($cond15) {
   $$reg2mem94$0 = $127;
   continue;
  }
  $128 = HEAP32[$png_ptr>>2]|0;
  $129 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_viiiii(26,($128|0),($129|0),($alpha_values|0),2,(0|0));
  $130 = __THREW__; __THREW__ = 0;
  if ((($130|0) != 0) & ((threwValue|0) != 0)) { $131 = _testSetjmp(HEAP32[$130>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($131|0) == 0) { _longjmp($130|0, threwValue|0); } tempRet0 = threwValue; } else { $131 = -1; };
  $132 = tempRet0;
  $cond16 = ($131|0)==(1);
  if ($cond16) {
   $$reg2mem94$0 = $132;
   continue;
  }
  $133 = HEAP32[$png_ptr>>2]|0;
  $134 = HEAP32[2224>>2]|0;
  __THREW__ = 0;
  invoke_vii(27,($133|0),($134|0));
  $135 = __THREW__; __THREW__ = 0;
  if ((($135|0) != 0) & ((threwValue|0) != 0)) { $136 = _testSetjmp(HEAP32[$135>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($136|0) == 0) { _longjmp($135|0, threwValue|0); } tempRet0 = threwValue; } else { $136 = -1; };
  $137 = tempRet0;
  $cond17 = ($136|0)==(1);
  if ($cond17) {
   $$reg2mem94$0 = $137;
   continue;
  }
  $138 = HEAP32[$png_ptr>>2]|0;
  $139 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_viiiiiiiii(28,($138|0),($139|0),($6|0),($6|0),1,3,0,0,0);
  $140 = __THREW__; __THREW__ = 0;
  if ((($140|0) != 0) & ((threwValue|0) != 0)) { $141 = _testSetjmp(HEAP32[$140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($141|0) == 0) { _longjmp($140|0, threwValue|0); } tempRet0 = threwValue; } else { $141 = -1; };
  $142 = tempRet0;
  $cond18 = ($141|0)==(1);
  if ($cond18) {
   $$reg2mem94$0 = $142;
   continue;
  }
  $143 = HEAP32[$png_ptr>>2]|0;
  $144 = HEAP32[$info_ptr>>2]|0;
  $145 = HEAP32[464>>2]|0;
  $146 = (+($145|0));
  $147 = $146 * 39.370078740157481;
  $148 = (~~(($147))>>>0);
  $149 = HEAP32[464>>2]|0;
  $150 = (+($149|0));
  $151 = $150 * 39.370078740157481;
  $152 = (~~(($151))>>>0);
  __THREW__ = 0;
  invoke_viiiii(29,($143|0),($144|0),($148|0),($152|0),1);
  $153 = __THREW__; __THREW__ = 0;
  if ((($153|0) != 0) & ((threwValue|0) != 0)) { $154 = _testSetjmp(HEAP32[$153>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($154|0) == 0) { _longjmp($153|0, threwValue|0); } tempRet0 = threwValue; } else { $154 = -1; };
  $155 = tempRet0;
  $cond19 = ($154|0)==(1);
  if ($cond19) {
   $$reg2mem94$0 = $155;
   continue;
  }
  $156 = HEAP32[$png_ptr>>2]|0;
  $157 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_vii(30,($156|0),($157|0));
  $158 = __THREW__; __THREW__ = 0;
  if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = threwValue; } else { $159 = -1; };
  $160 = tempRet0;
  $cond20 = ($159|0)==(1);
  if ($cond20) {
   $$reg2mem94$0 = $160;
   continue;
  }
  $161 = (($6) + 7)|0;
  $162 = (($161|0) / 8)&-1;
  _memset(($9|0),-1,($162|0))|0;
  $y$0 = 0;
  while(1) {
   $163 = HEAP32[432>>2]|0;
   $164 = HEAP32[336>>2]|0;
   $165 = Math_imul($163, $164)|0;
   $166 = ($y$0|0)<($165|0);
   if (!($166)) {
    break;
   }
   $167 = HEAP32[$png_ptr>>2]|0;
   __THREW__ = 0;
   invoke_vii(31,($167|0),($9|0));
   $168 = __THREW__; __THREW__ = 0;
   if ((($168|0) != 0) & ((threwValue|0) != 0)) { $169 = _testSetjmp(HEAP32[$168>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($169|0) == 0) { _longjmp($168|0, threwValue|0); } tempRet0 = threwValue; } else { $169 = -1; };
   $170 = tempRet0;
   $cond28 = ($169|0)==(1);
   if ($cond28) {
    $$reg2mem94$0 = $170;
    continue L34;
   }
   $171 = (($y$0) + 1)|0;
   $y$0 = $171;
  }
  $172 = (($qrcode) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $p$0 = $173;$y$1 = 0;
  while(1) {
   $174 = (($qrcode) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($y$1|0)<($175|0);
   if (!($176)) {
    break;
   }
   $177 = (($6) + 7)|0;
   $178 = (($177|0) / 8)&-1;
   _memset(($9|0),-1,($178|0))|0;
   $179 = HEAP32[432>>2]|0;
   $180 = HEAP32[336>>2]|0;
   $181 = Math_imul($179, $180)|0;
   $182 = (($181|0) / 8)&-1;
   $183 = (($9) + ($182)|0);
   $184 = HEAP32[432>>2]|0;
   $185 = HEAP32[336>>2]|0;
   $186 = Math_imul($184, $185)|0;
   $187 = (($186|0) % 8)&-1;
   $188 = (7 - ($187))|0;
   $bit$0 = $188;$p$1 = $p$0;$q$0 = $183;$x$0 = 0;
   while(1) {
    $189 = (($qrcode) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($x$0|0)<($190|0);
    if (!($191)) {
     break;
    }
    $bit$1 = $bit$0;$q$1 = $q$0;$xx$0 = 0;
    while(1) {
     $192 = HEAP32[336>>2]|0;
     $193 = ($xx$0|0)<($192|0);
     if (!($193)) {
      break;
     }
     $194 = HEAP8[$p$1>>0]|0;
     $195 = $194&255;
     $196 = $195 & 1;
     $197 = $196 << $bit$1;
     $198 = HEAP8[$q$1>>0]|0;
     $199 = $198&255;
     $200 = $199 ^ $197;
     $201 = $200&255;
     HEAP8[$q$1>>0] = $201;
     $202 = (($bit$1) + -1)|0;
     $203 = ($202|0)<(0);
     if ($203) {
      $204 = (($q$1) + 1|0);
      $bit$2 = 7;$q$2 = $204;
     } else {
      $bit$2 = $202;$q$2 = $q$1;
     }
     $205 = (($xx$0) + 1)|0;
     $bit$1 = $bit$2;$q$1 = $q$2;$xx$0 = $205;
    }
    $206 = (($p$1) + 1|0);
    $207 = (($x$0) + 1)|0;
    $bit$0 = $bit$1;$p$1 = $206;$q$0 = $q$1;$x$0 = $207;
   }
   $yy$0 = 0;
   while(1) {
    $208 = HEAP32[336>>2]|0;
    $209 = ($yy$0|0)<($208|0);
    if (!($209)) {
     break;
    }
    $210 = HEAP32[$png_ptr>>2]|0;
    __THREW__ = 0;
    invoke_vii(31,($210|0),($9|0));
    $211 = __THREW__; __THREW__ = 0;
    if ((($211|0) != 0) & ((threwValue|0) != 0)) { $212 = _testSetjmp(HEAP32[$211>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($212|0) == 0) { _longjmp($211|0, threwValue|0); } tempRet0 = threwValue; } else { $212 = -1; };
    $213 = tempRet0;
    $cond27 = ($212|0)==(1);
    if ($cond27) {
     $$reg2mem94$0 = $213;
     continue L34;
    }
    $214 = (($yy$0) + 1)|0;
    $yy$0 = $214;
   }
   $215 = (($y$1) + 1)|0;
   $p$0 = $p$1;$y$1 = $215;
  }
  $216 = (($6) + 7)|0;
  $217 = (($216|0) / 8)&-1;
  _memset(($9|0),-1,($217|0))|0;
  $y$2 = 0;
  while(1) {
   $218 = HEAP32[432>>2]|0;
   $219 = HEAP32[336>>2]|0;
   $220 = Math_imul($218, $219)|0;
   $221 = ($y$2|0)<($220|0);
   if (!($221)) {
    break;
   }
   $222 = HEAP32[$png_ptr>>2]|0;
   __THREW__ = 0;
   invoke_vii(31,($222|0),($9|0));
   $223 = __THREW__; __THREW__ = 0;
   if ((($223|0) != 0) & ((threwValue|0) != 0)) { $224 = _testSetjmp(HEAP32[$223>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($224|0) == 0) { _longjmp($223|0, threwValue|0); } tempRet0 = threwValue; } else { $224 = -1; };
   $225 = tempRet0;
   $cond26 = ($224|0)==(1);
   if ($cond26) {
    $$reg2mem94$0 = $225;
    continue L34;
   }
   $226 = (($y$2) + 1)|0;
   $y$2 = $226;
  }
  $227 = HEAP32[$png_ptr>>2]|0;
  $228 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_vii(32,($227|0),($228|0));
  $229 = __THREW__; __THREW__ = 0;
  if ((($229|0) != 0) & ((threwValue|0) != 0)) { $230 = _testSetjmp(HEAP32[$229>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($230|0) == 0) { _longjmp($229|0, threwValue|0); } tempRet0 = threwValue; } else { $230 = -1; };
  $231 = tempRet0;
  $cond21 = ($230|0)==(1);
  if ($cond21) {
   $$reg2mem94$0 = $231;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(24,($png_ptr|0),($info_ptr|0));
  $232 = __THREW__; __THREW__ = 0;
  if ((($232|0) != 0) & ((threwValue|0) != 0)) { $233 = _testSetjmp(HEAP32[$232>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($233|0) == 0) { _longjmp($232|0, threwValue|0); } tempRet0 = threwValue; } else { $233 = -1; };
  $234 = tempRet0;
  $cond22 = ($233|0)==(1);
  if ($cond22) {
   $$reg2mem94$0 = $234;
   continue;
  }
  $235 = HEAP32[2224>>2]|0;
  __THREW__ = 0;
  (invoke_ii(33,($235|0))|0);
  $236 = __THREW__; __THREW__ = 0;
  if ((($236|0) != 0) & ((threwValue|0) != 0)) { $237 = _testSetjmp(HEAP32[$236>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($237|0) == 0) { _longjmp($236|0, threwValue|0); } tempRet0 = threwValue; } else { $237 = -1; };
  $238 = tempRet0;
  $cond23 = ($237|0)==(1);
  if ($cond23) {
   $$reg2mem94$0 = $238;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(34,($9|0));
  $239 = __THREW__; __THREW__ = 0;
  if ((($239|0) != 0) & ((threwValue|0) != 0)) { $240 = _testSetjmp(HEAP32[$239>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($240|0) == 0) { _longjmp($239|0, threwValue|0); } tempRet0 = threwValue; } else { $240 = -1; };
  $241 = tempRet0;
  $cond24 = ($240|0)==(1);
  if ($cond24) {
   $$reg2mem94$0 = $241;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(34,($87|0));
  $242 = __THREW__; __THREW__ = 0;
  if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
  $244 = tempRet0;
  $cond25 = ($243|0)==(1);
  if ($cond25) {
   $$reg2mem94$0 = $244;
  } else {
   label = 78;
   break;
  }
 }
 if ((label|0) == 32) {
  // unreachable;
 }
 else if ((label|0) == 37) {
  // unreachable;
 }
 else if ((label|0) == 78) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _writeEPS($qrcode,$outfile) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $p = 0, $realwidth = 0, $row = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $x = 0, $y = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $qrcode;
 $1 = $outfile;
 $2 = $1;
 $3 = (_openFile($2)|0);
 $fp = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[432>>2]|0;
 $8 = $7<<1;
 $9 = (($6) + ($8))|0;
 $10 = HEAP32[336>>2]|0;
 $11 = Math_imul($9, $10)|0;
 $realwidth = $11;
 $12 = $fp;
 $13 = $realwidth;
 $14 = $realwidth;
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 (_fprintf(($12|0),(2024|0),($vararg_buffer|0))|0);
 $15 = $fp;
 $16 = HEAP32[336>>2]|0;
 $17 = HEAP32[336>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $16;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $17;
 (_fprintf(($15|0),(2112|0),($vararg_buffer2|0))|0);
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $p = $20;
 $y = 0;
 while(1) {
  $21 = $y;
  $22 = $0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $p;
  $27 = $y;
  $28 = $0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = Math_imul($27, $30)|0;
  $32 = (($26) + ($31)|0);
  $row = $32;
  $33 = HEAP32[432>>2]|0;
  $34 = $0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33) + ($36))|0;
  $38 = $y;
  $39 = (($37) - ($38))|0;
  $40 = (($39) - 1)|0;
  $yy = $40;
  $x = 0;
  while(1) {
   $41 = $x;
   $42 = $0;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = $row;
   $47 = $x;
   $48 = (($46) + ($47)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $50 & 1;
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $fp;
    $54 = HEAP32[432>>2]|0;
    $55 = $x;
    $56 = (($54) + ($55))|0;
    $57 = $yy;
    HEAP32[$vararg_buffer6>>2] = $56;
    $vararg_ptr9 = (($vararg_buffer6) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $57;
    (_fprintf(($53|0),(2192|0),($vararg_buffer6|0))|0);
   }
   $58 = $x;
   $59 = (($58) + 1)|0;
   $x = $59;
  }
  $60 = $y;
  $61 = (($60) + 1)|0;
  $y = $61;
 }
 $62 = $fp;
 (_fprintf(($62|0),(2208|0),($vararg_buffer10|0))|0);
 $63 = $fp;
 (_fclose(($63|0))|0);
 STACKTOP = sp;return 0;
}
function _writeSVG($qrcode,$outfile) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0;
 var $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bg = 0, $bg_opacity = 0.0, $fg = 0, $fg_opacity = 0.0, $fp = 0, $p = 0, $pen = 0, $realwidth = 0;
 var $row = 0, $scale = 0.0, $symwidth = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer17 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $x = 0, $x0 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $fg = sp + 163|0;
 $bg = sp + 156|0;
 $0 = $qrcode;
 $1 = $outfile;
 $2 = $1;
 $3 = (_openFile($2)|0);
 $fp = $3;
 $4 = HEAP32[464>>2]|0;
 $5 = (+($4|0));
 $6 = $5 * 39.370078740157481;
 $7 = $6 / 100.0;
 $8 = $7;
 $scale = $8;
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[432>>2]|0;
 $13 = $12<<1;
 $14 = (($11) + ($13))|0;
 $symwidth = $14;
 $15 = $symwidth;
 $16 = HEAP32[336>>2]|0;
 $17 = Math_imul($15, $16)|0;
 $realwidth = $17;
 $18 = HEAP32[648>>2]|0;
 $19 = HEAP32[((648 + 4|0))>>2]|0;
 $20 = HEAP32[((648 + 8|0))>>2]|0;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $19;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $20;
 (_snprintf($fg,7,1352,$vararg_buffer)|0);
 $21 = HEAP32[704>>2]|0;
 $22 = HEAP32[((704 + 4|0))>>2]|0;
 $23 = HEAP32[((704 + 8|0))>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $21;
 $vararg_ptr6 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $22;
 $vararg_ptr7 = (($vararg_buffer3) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $23;
 (_snprintf($bg,7,1352,$vararg_buffer3)|0);
 $24 = HEAP32[((648 + 12|0))>>2]|0;
 $25 = (+($24>>>0));
 $26 = $25 / 255.0;
 $fg_opacity = $26;
 $27 = HEAP32[((704 + 12|0))>>2]|0;
 $28 = (+($27>>>0));
 $29 = $28 / 255.0;
 $bg_opacity = $29;
 $30 = $fp;
 (_fputs((1368|0),($30|0))|0);
 $31 = $fp;
 $32 = (_QRcode_APIVersionString()|0);
 HEAP32[$vararg_buffer8>>2] = $32;
 (_fprintf(($31|0),(1432|0),($vararg_buffer8|0))|0);
 $33 = $fp;
 $34 = $realwidth;
 $35 = (+($34|0));
 $36 = $scale;
 $37 = $35 / $36;
 $38 = $37;
 $39 = $realwidth;
 $40 = (+($39|0));
 $41 = $scale;
 $42 = $40 / $41;
 $43 = $42;
 $44 = $symwidth;
 $45 = $symwidth;
 HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_buffer11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer11+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr14 = (($vararg_buffer11) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$43;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr15 = (($vararg_buffer11) + 16|0);
 HEAP32[$vararg_ptr15>>2] = $44;
 $vararg_ptr16 = (($vararg_buffer11) + 20|0);
 HEAP32[$vararg_ptr16>>2] = $45;
 (_fprintf(($33|0),(1520|0),($vararg_buffer11|0))|0);
 $46 = $fp;
 (_fputs((1656|0),($46|0))|0);
 $47 = HEAP32[((704 + 12|0))>>2]|0;
 $48 = ($47|0)!=(255);
 if ($48) {
  $49 = $fp;
  $50 = $symwidth;
  $51 = $symwidth;
  $52 = $bg_opacity;
  $53 = $52;
  HEAP32[$vararg_buffer17>>2] = $50;
  $vararg_ptr20 = (($vararg_buffer17) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $51;
  $vararg_ptr21 = (($vararg_buffer17) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $bg;
  $vararg_ptr22 = (($vararg_buffer17) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$53;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($49|0),(1680|0),($vararg_buffer17|0))|0);
 } else {
  $54 = $fp;
  $55 = $symwidth;
  $56 = $symwidth;
  HEAP32[$vararg_buffer23>>2] = $55;
  $vararg_ptr26 = (($vararg_buffer23) + 4|0);
  HEAP32[$vararg_ptr26>>2] = $56;
  $vararg_ptr27 = (($vararg_buffer23) + 8|0);
  HEAP32[$vararg_ptr27>>2] = $bg;
  (_fprintf(($54|0),(1760|0),($vararg_buffer23|0))|0);
 }
 $57 = $fp;
 (_fputs((1824|0),($57|0))|0);
 $58 = $0;
 $59 = (($58) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $p = $60;
 $y = 0;
 while(1) {
  $61 = $y;
  $62 = $0;
  $63 = (($62) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = $p;
  $67 = $y;
  $68 = $0;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = Math_imul($67, $70)|0;
  $72 = (($66) + ($71)|0);
  $row = $72;
  $73 = HEAP32[1848>>2]|0;
  $74 = ($73|0)!=(0);
  if ($74) {
   $pen = 0;
   $x0 = 0;
   $x = 0;
   while(1) {
    $97 = $x;
    $98 = $0;
    $99 = (($98) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($97|0)<($100|0);
    if (!($101)) {
     break;
    }
    $102 = $pen;
    $103 = ($102|0)!=(0);
    if ($103) {
     $111 = $row;
     $112 = $x;
     $113 = (($111) + ($112)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 & 1;
     $117 = ($116|0)!=(0);
     if (!($117)) {
      $118 = $fp;
      $119 = $x0;
      $120 = HEAP32[432>>2]|0;
      $121 = (($119) + ($120))|0;
      $122 = $y;
      $123 = HEAP32[432>>2]|0;
      $124 = (($122) + ($123))|0;
      $125 = $x;
      $126 = $x0;
      $127 = (($125) - ($126))|0;
      $128 = $fg_opacity;
      _writeSVG_writeRect($118,$121,$124,$127,$fg,$128);
      $pen = 0;
     }
    } else {
     $104 = $row;
     $105 = $x;
     $106 = (($104) + ($105)|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $108 & 1;
     $pen = $109;
     $110 = $x;
     $x0 = $110;
    }
    $129 = $x;
    $130 = (($129) + 1)|0;
    $x = $130;
   }
   $131 = $pen;
   $132 = ($131|0)!=(0);
   if ($132) {
    $133 = $fp;
    $134 = $x0;
    $135 = HEAP32[432>>2]|0;
    $136 = (($134) + ($135))|0;
    $137 = $y;
    $138 = HEAP32[432>>2]|0;
    $139 = (($137) + ($138))|0;
    $140 = $0;
    $141 = (($140) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $x0;
    $144 = (($142) - ($143))|0;
    $145 = $fg_opacity;
    _writeSVG_writeRect($133,$136,$139,$144,$fg,$145);
   }
  } else {
   $x = 0;
   while(1) {
    $75 = $x;
    $76 = $0;
    $77 = (($76) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $row;
    $81 = $x;
    $82 = (($80) + ($81)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 & 1;
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $fp;
     $88 = HEAP32[432>>2]|0;
     $89 = $x;
     $90 = (($88) + ($89))|0;
     $91 = HEAP32[432>>2]|0;
     $92 = $y;
     $93 = (($91) + ($92))|0;
     $94 = $fg_opacity;
     _writeSVG_writeRect($87,$90,$93,1,$fg,$94);
    }
    $95 = $x;
    $96 = (($95) + 1)|0;
    $x = $96;
   }
  }
  $146 = $y;
  $147 = (($146) + 1)|0;
  $y = $147;
 }
 $148 = $fp;
 (_fputs((1856|0),($148|0))|0);
 $149 = $fp;
 (_fputs((1864|0),($149|0))|0);
 $150 = $fp;
 (_fputs((1872|0),($150|0))|0);
 $151 = $fp;
 (_fclose(($151|0))|0);
 STACKTOP = sp;return 0;
}
function _writeANSI($qrcode,$outfile) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $black = 0, $black_s = 0, $buffer = 0, $buffer_s = 0, $fp = 0, $last = 0, $p = 0, $realwidth = 0, $row = 0, $vararg_buffer = 0, $white = 0, $white_s = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qrcode;
 $1 = $outfile;
 $2 = HEAP32[504>>2]|0;
 $3 = ($2|0)==(4);
 if ($3) {
  $white = 1288;
  $white_s = 11;
  $black = 1304;
  $black_s = 10;
 } else {
  $white = 1320;
  $white_s = 5;
  $black = 1328;
  $black_s = 5;
 }
 HEAP32[336>>2] = 1;
 $4 = $1;
 $5 = (_openFile($4)|0);
 $fp = $5;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[432>>2]|0;
 $10 = $9<<1;
 $11 = (($8) + ($10))|0;
 $12 = HEAP32[336>>2]|0;
 $13 = Math_imul($11, $12)|0;
 $realwidth = $13;
 $14 = $realwidth;
 $15 = $white_s;
 $16 = Math_imul($14, $15)|0;
 $17 = $16<<1;
 $buffer_s = $17;
 $18 = $buffer_s;
 $19 = (_malloc($18)|0);
 $buffer = $19;
 $20 = $buffer;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP32[_stderr>>2]|0;
  (_fprintf(($22|0),(1256|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $23 = $fp;
 $24 = $realwidth;
 $25 = $buffer;
 $26 = $buffer_s;
 $27 = $white;
 $28 = $white_s;
 _writeANSI_margin($23,$24,$25,$26,$27,$28);
 $29 = $0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $p = $31;
 $y = 0;
 while(1) {
  $32 = $y;
  $33 = $0;
  $34 = (($33) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $p;
  $38 = $y;
  $39 = $0;
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = Math_imul($38, $41)|0;
  $43 = (($37) + ($42)|0);
  $row = $43;
  $44 = $buffer;
  $45 = $buffer_s;
  _memset(($44|0),0,($45|0))|0;
  $46 = $buffer;
  $47 = $white;
  $48 = $white_s;
  (_strncpy(($46|0),($47|0),($48|0))|0);
  $x = 0;
  while(1) {
   $49 = $x;
   $50 = HEAP32[432>>2]|0;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $buffer;
   (_strncat($52,1336,2)|0);
   $53 = $x;
   $54 = (($53) + 1)|0;
   $x = $54;
  }
  $last = 0;
  $x = 0;
  while(1) {
   $55 = $x;
   $56 = $0;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $row;
   $61 = $x;
   $62 = (($60) + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $64 & 1;
   $66 = ($65|0)!=(0);
   if ($66) {
    $67 = $last;
    $68 = ($67|0)!=(1);
    if ($68) {
     $69 = $buffer;
     $70 = $black;
     $71 = $black_s;
     (_strncat($69,$70,$71)|0);
     $last = 1;
    }
   } else {
    $72 = $last;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = $buffer;
     $75 = $white;
     $76 = $white_s;
     (_strncat($74,$75,$76)|0);
     $last = 0;
    }
   }
   $77 = $buffer;
   (_strncat($77,1336,2)|0);
   $78 = $x;
   $79 = (($78) + 1)|0;
   $x = $79;
  }
  $80 = $last;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $buffer;
   $83 = $white;
   $84 = $white_s;
   (_strncat($82,$83,$84)|0);
  }
  $x = 0;
  while(1) {
   $85 = $x;
   $86 = HEAP32[432>>2]|0;
   $87 = ($85|0)<($86|0);
   if (!($87)) {
    break;
   }
   $88 = $buffer;
   (_strncat($88,1336,2)|0);
   $89 = $x;
   $90 = (($89) + 1)|0;
   $x = $90;
  }
  $91 = $buffer;
  (_strncat($91,1344,5)|0);
  $92 = $buffer;
  $93 = $fp;
  (_fputs(($92|0),($93|0))|0);
  $94 = $y;
  $95 = (($94) + 1)|0;
  $y = $95;
 }
 $96 = $fp;
 $97 = $realwidth;
 $98 = $buffer;
 $99 = $buffer_s;
 $100 = $white;
 $101 = $white_s;
 _writeANSI_margin($96,$97,$98,$99,$100,$101);
 $102 = $fp;
 (_fclose(($102|0))|0);
 $103 = $buffer;
 _free($103);
 STACKTOP = sp;return 0;
}
function _writeASCII($qrcode,$outfile,$invert) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 $invert = $invert|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $black = 0, $buffer = 0, $buffer_s = 0, $fp = 0, $p = 0, $realwidth = 0, $row = 0, $vararg_buffer = 0, $white = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $qrcode;
 $1 = $outfile;
 $2 = $invert;
 $black = 35;
 $white = 32;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $black = 32;
  $white = 35;
 }
 HEAP32[336>>2] = 1;
 $5 = $1;
 $6 = (_openFile($5)|0);
 $fp = $6;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[432>>2]|0;
 $11 = $10<<1;
 $12 = (($9) + ($11))|0;
 $13 = $12<<1;
 $realwidth = $13;
 $14 = $realwidth;
 $15 = (($14) + 2)|0;
 $buffer_s = $15;
 $16 = $buffer_s;
 $17 = (_malloc($16)|0);
 $buffer = $17;
 $18 = $buffer;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[_stderr>>2]|0;
  (_fprintf(($20|0),(1256|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $21 = $fp;
 $22 = $realwidth;
 $23 = $buffer;
 $24 = $buffer_s;
 $25 = $2;
 _writeASCII_margin($21,$22,$23,$24,$25);
 $y = 0;
 while(1) {
  $26 = $y;
  $27 = $0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $y;
  $35 = $0;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($34, $37)|0;
  $39 = (($33) + ($38)|0);
  $row = $39;
  $40 = $buffer;
  $p = $40;
  $41 = $p;
  $42 = $white;
  $43 = $42 << 24 >> 24;
  $44 = $43&255;
  $45 = HEAP32[432>>2]|0;
  $46 = $45<<1;
  _memset(($41|0),($44|0),($46|0))|0;
  $47 = HEAP32[432>>2]|0;
  $48 = $47<<1;
  $49 = $p;
  $50 = (($49) + ($48)|0);
  $p = $50;
  $x = 0;
  while(1) {
   $51 = $x;
   $52 = $0;
   $53 = (($52) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($51|0)<($54|0);
   if (!($55)) {
    break;
   }
   $56 = $x;
   $57 = $row;
   $58 = (($57) + ($56)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = $60 & 1;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $black;
    $64 = $p;
    $65 = (($64) + 1|0);
    $p = $65;
    HEAP8[$64>>0] = $63;
    $66 = $black;
    $67 = $p;
    $68 = (($67) + 1|0);
    $p = $68;
    HEAP8[$67>>0] = $66;
   } else {
    $69 = $white;
    $70 = $p;
    $71 = (($70) + 1|0);
    $p = $71;
    HEAP8[$70>>0] = $69;
    $72 = $white;
    $73 = $p;
    $74 = (($73) + 1|0);
    $p = $74;
    HEAP8[$73>>0] = $72;
   }
   $75 = $x;
   $76 = (($75) + 1)|0;
   $x = $76;
  }
  $77 = $p;
  $78 = $white;
  $79 = $78 << 24 >> 24;
  $80 = $79&255;
  $81 = HEAP32[432>>2]|0;
  $82 = $81<<1;
  _memset(($77|0),($80|0),($82|0))|0;
  $83 = HEAP32[432>>2]|0;
  $84 = $83<<1;
  $85 = $p;
  $86 = (($85) + ($84)|0);
  $p = $86;
  $87 = $p;
  $88 = (($87) + 1|0);
  $p = $88;
  HEAP8[$87>>0] = 10;
  $89 = $p;
  $90 = (($89) + 1|0);
  $p = $90;
  HEAP8[$89>>0] = 0;
  $91 = $buffer;
  $92 = $fp;
  (_fputs(($91|0),($92|0))|0);
  $93 = $y;
  $94 = (($93) + 1)|0;
  $y = $94;
 }
 $95 = $fp;
 $96 = $realwidth;
 $97 = $buffer;
 $98 = $buffer_s;
 $99 = $2;
 _writeASCII_margin($95,$96,$97,$98,$99);
 $100 = $fp;
 (_fclose(($100|0))|0);
 $101 = $buffer;
 _free($101);
 STACKTOP = sp;return 0;
}
function _writeUTF8($qrcode,$outfile,$use_ansi) {
 $qrcode = $qrcode|0;
 $outfile = $outfile|0;
 $use_ansi = $use_ansi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fp = 0, $realwidth = 0, $reset = 0, $row1 = 0, $row2 = 0, $white = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $qrcode;
 $1 = $outfile;
 $2 = $use_ansi;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $white = 1168;
  $reset = 1184;
 } else {
  $white = 27488;
  $reset = 27488;
 }
 $5 = $1;
 $6 = (_openFile($5)|0);
 $fp = $6;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[432>>2]|0;
 $11 = $10<<1;
 $12 = (($9) + ($11))|0;
 $realwidth = $12;
 $13 = $fp;
 $14 = $realwidth;
 $15 = $white;
 $16 = $reset;
 $17 = $2;
 _writeUTF8_margin($13,$14,$15,$16,$17);
 $y = 0;
 while(1) {
  $18 = $y;
  $19 = $0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $y;
  $27 = $0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = Math_imul($26, $29)|0;
  $31 = (($25) + ($30)|0);
  $row1 = $31;
  $32 = $row1;
  $33 = $0;
  $34 = (($33) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($32) + ($35)|0);
  $row2 = $36;
  $37 = $white;
  $38 = $fp;
  (_fputs(($37|0),($38|0))|0);
  $x = 0;
  while(1) {
   $39 = $x;
   $40 = HEAP32[432>>2]|0;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $fp;
   (_fputs((1192|0),($42|0))|0);
   $43 = $x;
   $44 = (($43) + 1)|0;
   $x = $44;
  }
  $x = 0;
  while(1) {
   $45 = $x;
   $46 = $0;
   $47 = (($46) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $x;
   $51 = $row1;
   $52 = (($51) + ($50)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 & 1;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = $y;
    $58 = $0;
    $59 = (($58) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) - 1)|0;
    $62 = ($57|0)<($61|0);
    if ($62) {
     $63 = $x;
     $64 = $row2;
     $65 = (($64) + ($63)|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = $67 & 1;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = $fp;
      (_fputc(32,($70|0))|0);
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    if ((label|0) == 16) {
     label = 0;
     $71 = $fp;
     (_fputs((1200|0),($71|0))|0);
    }
   } else {
    $72 = $y;
    $73 = $0;
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) - 1)|0;
    $77 = ($72|0)<($76|0);
    if ($77) {
     $78 = $x;
     $79 = $row2;
     $80 = (($79) + ($78)|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = $82 & 1;
     $84 = ($83|0)!=(0);
     if ($84) {
      $85 = $fp;
      (_fputs((1208|0),($85|0))|0);
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
    if ((label|0) == 21) {
     label = 0;
     $86 = $fp;
     (_fputs((1192|0),($86|0))|0);
    }
   }
   $87 = $x;
   $88 = (($87) + 1)|0;
   $x = $88;
  }
  $x = 0;
  while(1) {
   $89 = $x;
   $90 = HEAP32[432>>2]|0;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = $fp;
   (_fputs((1192|0),($92|0))|0);
   $93 = $x;
   $94 = (($93) + 1)|0;
   $x = $94;
  }
  $95 = $reset;
  $96 = $fp;
  (_fputs(($95|0),($96|0))|0);
  $97 = $fp;
  (_fputc(10,($97|0))|0);
  $98 = $y;
  $99 = (($98) + 2)|0;
  $y = $99;
 }
 $100 = $fp;
 $101 = $realwidth;
 $102 = $white;
 $103 = $reset;
 $104 = $2;
 _writeUTF8_margin($100,$101,$102,$103,$104);
 $105 = $fp;
 (_fclose(($105|0))|0);
 STACKTOP = sp;return 0;
}
function _openFile($outfile) {
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $outfile;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = $0;
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = ($5|0)==(45);
   if ($6) {
    $7 = $0;
    $8 = (($7) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
   }
   $13 = $0;
   $14 = (_fopen(($13|0),(1216|0))|0);
   $fp = $14;
   $15 = $fp;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $17 = HEAP32[_stderr>>2]|0;
    $18 = $0;
    HEAP32[$vararg_buffer>>2] = $18;
    (_fprintf(($17|0),(1224|0),($vararg_buffer|0))|0);
    _perror((0|0));
    _exit(1);
    // unreachable;
   }
   $19 = $fp;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $12 = HEAP32[_stdout>>2]|0;
 $fp = $12;
 $19 = $fp;
 STACKTOP = sp;return ($19|0);
}
function _writeUTF8_margin($fp,$realwidth,$white,$reset,$use_ansi) {
 $fp = $fp|0;
 $realwidth = $realwidth|0;
 $white = $white|0;
 $reset = $reset|0;
 $use_ansi = $use_ansi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fp;
 $1 = $realwidth;
 $2 = $white;
 $3 = $reset;
 $4 = $use_ansi;
 $y = 0;
 while(1) {
  $5 = $y;
  $6 = HEAP32[432>>2]|0;
  $7 = (($6|0) / 2)&-1;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $0;
  (_fputs(($9|0),($10|0))|0);
  $x = 0;
  while(1) {
   $11 = $x;
   $12 = $1;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $0;
   (_fputs((1192|0),($14|0))|0);
   $15 = $x;
   $16 = (($15) + 1)|0;
   $x = $16;
  }
  $17 = $3;
  $18 = $0;
  (_fputs(($17|0),($18|0))|0);
  $19 = $0;
  (_fputc(10,($19|0))|0);
  $20 = $y;
  $21 = (($20) + 1)|0;
  $y = $21;
 }
 STACKTOP = sp;return;
}
function _writeASCII_margin($fp,$realwidth,$buffer,$buffer_s,$invert) {
 $fp = $fp|0;
 $realwidth = $realwidth|0;
 $buffer = $buffer|0;
 $buffer_s = $buffer_s|0;
 $invert = $invert|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fp;
 $1 = $realwidth;
 $2 = $buffer;
 $3 = $buffer_s;
 $4 = $invert;
 $5 = HEAP32[432>>2]|0;
 $h = $5;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0);
 $9 = $8 ? 35 : 32;
 $10 = $9&255;
 $11 = $1;
 _memset(($6|0),($10|0),($11|0))|0;
 $12 = $1;
 $13 = $2;
 $14 = (($13) + ($12)|0);
 HEAP8[$14>>0] = 10;
 $15 = $1;
 $16 = (($15) + 1)|0;
 $17 = $2;
 $18 = (($17) + ($16)|0);
 HEAP8[$18>>0] = 0;
 $y = 0;
 while(1) {
  $19 = $y;
  $20 = $h;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = $0;
  (_fputs(($22|0),($23|0))|0);
  $24 = $y;
  $25 = (($24) + 1)|0;
  $y = $25;
 }
 STACKTOP = sp;return;
}
function _writeANSI_margin($fp,$realwidth,$buffer,$buffer_s,$white,$white_s) {
 $fp = $fp|0;
 $realwidth = $realwidth|0;
 $buffer = $buffer|0;
 $buffer_s = $buffer_s|0;
 $white = $white|0;
 $white_s = $white_s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fp;
 $1 = $realwidth;
 $2 = $buffer;
 $3 = $buffer_s;
 $4 = $white;
 $5 = $white_s;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 (_strncpy(($6|0),($7|0),($8|0))|0);
 $9 = $2;
 $10 = $5;
 $11 = (($9) + ($10)|0);
 $12 = $1;
 $13 = $12<<1;
 _memset(($11|0),32,($13|0))|0;
 $14 = $2;
 $15 = $5;
 $16 = (($14) + ($15)|0);
 $17 = $1;
 $18 = $17<<1;
 $19 = (($16) + ($18)|0);
 (_strcpy(($19|0),(1344|0))|0);
 $y = 0;
 while(1) {
  $20 = $y;
  $21 = HEAP32[432>>2]|0;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $2;
  $24 = $0;
  (_fputs(($23|0),($24|0))|0);
  $25 = $y;
  $26 = (($25) + 1)|0;
  $y = $26;
 }
 STACKTOP = sp;return;
}
function _writeSVG_writeRect($fp,$x,$y,$width,$col,$opacity) {
 $fp = $fp|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $col = $col|0;
 $opacity = +$opacity;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $fp;
 $1 = $x;
 $2 = $y;
 $3 = $width;
 $4 = $col;
 $5 = $opacity;
 $6 = HEAP32[((648 + 12|0))>>2]|0;
 $7 = ($6|0)!=(255);
 if ($7) {
  $8 = $0;
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = $13;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $11;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $12;
  $vararg_ptr4 = (($vararg_buffer) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($8|0),(1880|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 } else {
  $15 = $0;
  $16 = $1;
  $17 = $2;
  $18 = $3;
  $19 = $4;
  HEAP32[$vararg_buffer5>>2] = $16;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $17;
  $vararg_ptr9 = (($vararg_buffer5) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $18;
  $vararg_ptr10 = (($vararg_buffer5) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $19;
  (_fprintf(($15|0),(1960|0),($vararg_buffer5|0))|0);
  STACKTOP = sp;return;
 }
}
function _encodeStructured($intext,$length) {
 $intext = $intext|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $intext;
 $1 = $length;
 $2 = HEAP32[632>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = $0;
  $6 = HEAP32[368>>2]|0;
  $7 = HEAP32[400>>2]|0;
  $8 = (_QRcode_encodeDataStructured($4,$5,$6,$7)|0);
  $list = $8;
  $15 = $list;
  STACKTOP = sp;return ($15|0);
 } else {
  $9 = $0;
  $10 = HEAP32[368>>2]|0;
  $11 = HEAP32[400>>2]|0;
  $12 = HEAP32[616>>2]|0;
  $13 = HEAP32[624>>2]|0;
  $14 = (_QRcode_encodeStringStructured($9,$10,$11,$12,$13)|0);
  $list = $14;
  $15 = $list;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _png_zalloc($png_ptr,$items,$size) {
 $png_ptr = $png_ptr|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num_bytes = 0, $p = 0, $ptr = 0, $save_flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $items;
 $3 = $size;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $1;
 $p = $6;
 $7 = $p;
 $8 = (($7) + 200|0);
 $9 = HEAP32[$8>>2]|0;
 $save_flags = $9;
 $10 = $2;
 $11 = $3;
 $12 = (4294967295 / ($11>>>0))&-1;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = $p;
  _png_warning($14,7976);
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $15 = $2;
  $16 = $3;
  $17 = Math_imul($15, $16)|0;
  $num_bytes = $17;
  $18 = $p;
  $19 = (($18) + 200|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 | 1048576;
  HEAP32[$19>>2] = $21;
  $22 = $1;
  $23 = $num_bytes;
  $24 = (_png_malloc($22,$23)|0);
  $ptr = $24;
  $25 = $save_flags;
  $26 = $p;
  $27 = (($26) + 200|0);
  HEAP32[$27>>2] = $25;
  $28 = $ptr;
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _png_zfree($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = $1;
 _png_free($2,$3);
 STACKTOP = sp;return;
}
function _png_reset_crc($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = (_crc32(0,0,0)|0);
 $2 = $0;
 $3 = (($2) + 364|0);
 HEAP32[$3>>2] = $1;
 STACKTOP = sp;return;
}
function _png_calculate_crc($png_ptr,$ptr,$length) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $need_crc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $length;
 $need_crc = 1;
 $3 = $0;
 $4 = (($3) + 376|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 32;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 200|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 768;
  $13 = ($12|0)==(768);
  if ($13) {
   $need_crc = 0;
  }
 } else {
  $14 = $0;
  $15 = (($14) + 200|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 2048;
  $18 = ($17|0)!=(0);
  if ($18) {
   $need_crc = 0;
  }
 }
 $19 = $need_crc;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $0;
 $22 = (($21) + 364|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = $2;
 $26 = (_crc32($23,$24,$25)|0);
 $27 = $0;
 $28 = (($27) + 364|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _png_create_info_struct($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info_ptr = sp;
 $1 = $png_ptr;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $4 = $1;
 $5 = (($4) + 676|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 672|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_png_create_struct_2(2,$6,$9)|0);
 HEAP32[$info_ptr>>2] = $10;
 $11 = HEAP32[$info_ptr>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  _png_info_init_3($info_ptr,288);
 }
 $13 = HEAP32[$info_ptr>>2]|0;
 $0 = $13;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _png_info_init_3($ptr_ptr,$png_info_struct_size) {
 $ptr_ptr = $ptr_ptr|0;
 $png_info_struct_size = $png_info_struct_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr_ptr;
 $1 = $png_info_struct_size;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $info_ptr = $3;
 $4 = $info_ptr;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (288)>($6>>>0);
 if ($7) {
  $8 = $info_ptr;
  _png_destroy_struct($8);
  $9 = (_png_create_struct(2)|0);
  $info_ptr = $9;
  $10 = $info_ptr;
  $11 = $0;
  HEAP32[$11>>2] = $10;
 }
 $12 = $info_ptr;
 _memset(($12|0),0,288)|0;
 STACKTOP = sp;return;
}
function _png_free_data($png_ptr,$info_ptr,$mask,$num) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $mask = $mask|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $mask;
 $3 = $num;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $2;
   $9 = $8 & 16384;
   $10 = $1;
   $11 = (($10) + 184|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & $12;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $3;
    $16 = ($15|0)!=(-1);
    if ($16) {
     $17 = $1;
     $18 = (($17) + 56|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)!=(0|0);
     if ($20) {
      $21 = $3;
      $22 = $1;
      $23 = (($22) + 56|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($24) + ($21<<4)|0);
      $26 = (($25) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)!=(0|0);
      if ($28) {
       $29 = $0;
       $30 = $3;
       $31 = $1;
       $32 = (($31) + 56|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($33) + ($30<<4)|0);
       $35 = (($34) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       _png_free($29,$36);
       $37 = $3;
       $38 = $1;
       $39 = (($38) + 56|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + ($37<<4)|0);
       $42 = (($41) + 4|0);
       HEAP32[$42>>2] = 0;
      }
     }
    } else {
     $i = 0;
     while(1) {
      $43 = $i;
      $44 = $1;
      $45 = (($44) + 48|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($43|0)<($46|0);
      if (!($47)) {
       break;
      }
      $48 = $0;
      $49 = $1;
      $50 = $i;
      _png_free_data($48,$49,16384,$50);
      $51 = $i;
      $52 = (($51) + 1)|0;
      $i = $52;
     }
     $53 = $0;
     $54 = $1;
     $55 = (($54) + 56|0);
     $56 = HEAP32[$55>>2]|0;
     _png_free($53,$56);
     $57 = $1;
     $58 = (($57) + 56|0);
     HEAP32[$58>>2] = 0;
     $59 = $1;
     $60 = (($59) + 48|0);
     HEAP32[$60>>2] = 0;
    }
   }
   $61 = $2;
   $62 = $61 & 8192;
   $63 = $1;
   $64 = (($63) + 184|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $62 & $65;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $0;
    $69 = $1;
    $70 = (($69) + 76|0);
    $71 = HEAP32[$70>>2]|0;
    _png_free($68,$71);
    $72 = $1;
    $73 = (($72) + 76|0);
    HEAP32[$73>>2] = 0;
    $74 = $1;
    $75 = (($74) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & -17;
    HEAP32[$75>>2] = $77;
   }
   $78 = $2;
   $79 = $78 & 256;
   $80 = $1;
   $81 = (($80) + 184|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $79 & $82;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $1;
    $86 = (($85) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $87 & -16385;
    HEAP32[$86>>2] = $88;
   }
   $89 = $2;
   $90 = $89 & 128;
   $91 = $1;
   $92 = (($91) + 184|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $90 & $93;
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $0;
    $97 = $1;
    $98 = (($97) + 160|0);
    $99 = HEAP32[$98>>2]|0;
    _png_free($96,$99);
    $100 = $0;
    $101 = $1;
    $102 = (($101) + 172|0);
    $103 = HEAP32[$102>>2]|0;
    _png_free($100,$103);
    $104 = $1;
    $105 = (($104) + 160|0);
    HEAP32[$105>>2] = 0;
    $106 = $1;
    $107 = (($106) + 172|0);
    HEAP32[$107>>2] = 0;
    $108 = $1;
    $109 = (($108) + 176|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0|0);
    if ($111) {
     $i1 = 0;
     while(1) {
      $112 = $i1;
      $113 = $1;
      $114 = (($113) + 181|0);
      $115 = HEAP8[$114>>0]|0;
      $116 = $115&255;
      $117 = ($112|0)<($116|0);
      if (!($117)) {
       break;
      }
      $118 = $0;
      $119 = $i1;
      $120 = $1;
      $121 = (($120) + 176|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + ($119<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      _png_free($118,$124);
      $125 = $i1;
      $126 = $1;
      $127 = (($126) + 176|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + ($125<<2)|0);
      HEAP32[$129>>2] = 0;
      $130 = $i1;
      $131 = (($130) + 1)|0;
      $i1 = $131;
     }
     $132 = $0;
     $133 = $1;
     $134 = (($133) + 176|0);
     $135 = HEAP32[$134>>2]|0;
     _png_free($132,$135);
     $136 = $1;
     $137 = (($136) + 176|0);
     HEAP32[$137>>2] = 0;
    }
    $138 = $1;
    $139 = (($138) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $140 & -1025;
    HEAP32[$139>>2] = $141;
   }
   $142 = $2;
   $143 = $142 & 16;
   $144 = $1;
   $145 = (($144) + 184|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $143 & $146;
   $148 = ($147|0)!=(0);
   if ($148) {
    $149 = $0;
    $150 = $1;
    $151 = (($150) + 196|0);
    $152 = HEAP32[$151>>2]|0;
    _png_free($149,$152);
    $153 = $0;
    $154 = $1;
    $155 = (($154) + 200|0);
    $156 = HEAP32[$155>>2]|0;
    _png_free($153,$156);
    $157 = $1;
    $158 = (($157) + 196|0);
    HEAP32[$158>>2] = 0;
    $159 = $1;
    $160 = (($159) + 200|0);
    HEAP32[$160>>2] = 0;
    $161 = $1;
    $162 = (($161) + 8|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $163 & -4097;
    HEAP32[$162>>2] = $164;
   }
   $165 = $2;
   $166 = $165 & 32;
   $167 = $1;
   $168 = (($167) + 184|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $166 & $169;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $3;
    $173 = ($172|0)!=(-1);
    if ($173) {
     $174 = $1;
     $175 = (($174) + 212|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)!=(0|0);
     if ($177) {
      $178 = $0;
      $179 = $3;
      $180 = $1;
      $181 = (($180) + 212|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($182) + ($179<<4)|0);
      $184 = HEAP32[$183>>2]|0;
      _png_free($178,$184);
      $185 = $0;
      $186 = $3;
      $187 = $1;
      $188 = (($187) + 212|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = (($189) + ($186<<4)|0);
      $191 = (($190) + 8|0);
      $192 = HEAP32[$191>>2]|0;
      _png_free($185,$192);
      $193 = $3;
      $194 = $1;
      $195 = (($194) + 212|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = (($196) + ($193<<4)|0);
      HEAP32[$197>>2] = 0;
      $198 = $3;
      $199 = $1;
      $200 = (($199) + 212|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (($201) + ($198<<4)|0);
      $203 = (($202) + 8|0);
      HEAP32[$203>>2] = 0;
     }
    } else {
     $204 = $1;
     $205 = (($204) + 216|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = ($206|0)!=(0);
     if ($207) {
      $i2 = 0;
      while(1) {
       $208 = $i2;
       $209 = $1;
       $210 = (($209) + 216|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($208|0)<($211|0);
       if (!($212)) {
        break;
       }
       $213 = $0;
       $214 = $1;
       $215 = $i2;
       _png_free_data($213,$214,32,$215);
       $216 = $i2;
       $217 = (($216) + 1)|0;
       $i2 = $217;
      }
      $218 = $0;
      $219 = $1;
      $220 = (($219) + 212|0);
      $221 = HEAP32[$220>>2]|0;
      _png_free($218,$221);
      $222 = $1;
      $223 = (($222) + 212|0);
      HEAP32[$223>>2] = 0;
      $224 = $1;
      $225 = (($224) + 216|0);
      HEAP32[$225>>2] = 0;
     }
     $226 = $1;
     $227 = (($226) + 8|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = $228 & -8193;
     HEAP32[$227>>2] = $229;
    }
   }
   $230 = $0;
   $231 = (($230) + 712|0);
   $232 = (($231) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)!=(0|0);
   if ($234) {
    $235 = $0;
    $236 = $0;
    $237 = (($236) + 712|0);
    $238 = (($237) + 8|0);
    $239 = HEAP32[$238>>2]|0;
    _png_free($235,$239);
    $240 = $0;
    $241 = (($240) + 712|0);
    $242 = (($241) + 8|0);
    HEAP32[$242>>2] = 0;
   }
   $243 = $2;
   $244 = $243 & 512;
   $245 = $1;
   $246 = (($245) + 184|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $244 & $247;
   $249 = ($248|0)!=(0);
   if ($249) {
    $250 = $3;
    $251 = ($250|0)!=(-1);
    if ($251) {
     $252 = $1;
     $253 = (($252) + 188|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = ($254|0)!=(0|0);
     if ($255) {
      $256 = $0;
      $257 = $3;
      $258 = $1;
      $259 = (($258) + 188|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = (($260) + (($257*20)|0)|0);
      $262 = (($261) + 8|0);
      $263 = HEAP32[$262>>2]|0;
      _png_free($256,$263);
      $264 = $3;
      $265 = $1;
      $266 = (($265) + 188|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (($267) + (($264*20)|0)|0);
      $269 = (($268) + 8|0);
      HEAP32[$269>>2] = 0;
     }
    } else {
     $270 = $1;
     $271 = (($270) + 192|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ($272|0)!=(0);
     if ($273) {
      $i3 = 0;
      while(1) {
       $274 = $i3;
       $275 = $1;
       $276 = (($275) + 192|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ($274|0)<($277|0);
       if (!($278)) {
        break;
       }
       $279 = $0;
       $280 = $1;
       $281 = $i3;
       _png_free_data($279,$280,512,$281);
       $282 = $i3;
       $283 = (($282) + 1)|0;
       $i3 = $283;
      }
      $284 = $0;
      $285 = $1;
      $286 = (($285) + 188|0);
      $287 = HEAP32[$286>>2]|0;
      _png_free($284,$287);
      $288 = $1;
      $289 = (($288) + 188|0);
      HEAP32[$289>>2] = 0;
      $290 = $1;
      $291 = (($290) + 192|0);
      HEAP32[$291>>2] = 0;
     }
    }
   }
   $292 = $2;
   $293 = $292 & 8;
   $294 = $1;
   $295 = (($294) + 184|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $293 & $296;
   $298 = ($297|0)!=(0);
   if ($298) {
    $299 = $0;
    $300 = $1;
    $301 = (($300) + 124|0);
    $302 = HEAP32[$301>>2]|0;
    _png_free($299,$302);
    $303 = $1;
    $304 = (($303) + 124|0);
    HEAP32[$304>>2] = 0;
    $305 = $1;
    $306 = (($305) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $307 & -65;
    HEAP32[$306>>2] = $308;
   }
   $309 = $2;
   $310 = $309 & 4096;
   $311 = $1;
   $312 = (($311) + 184|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $310 & $313;
   $315 = ($314|0)!=(0);
   if ($315) {
    $316 = $0;
    $317 = $1;
    $318 = (($317) + 16|0);
    $319 = HEAP32[$318>>2]|0;
    _png_zfree($316,$319);
    $320 = $1;
    $321 = (($320) + 16|0);
    HEAP32[$321>>2] = 0;
    $322 = $1;
    $323 = (($322) + 8|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $324 & -9;
    HEAP32[$323>>2] = $325;
    $326 = $1;
    $327 = (($326) + 20|0);
    HEAP16[$327>>1] = 0;
   }
   $328 = $2;
   $329 = $328 & 64;
   $330 = $1;
   $331 = (($330) + 184|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $329 & $332;
   $334 = ($333|0)!=(0);
   if ($334) {
    $335 = $1;
    $336 = (($335) + 248|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337|0)!=(0|0);
    if ($338) {
     $row = 0;
     while(1) {
      $339 = $row;
      $340 = $1;
      $341 = (($340) + 4|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ($339|0)<($342|0);
      if (!($343)) {
       break;
      }
      $344 = $0;
      $345 = $row;
      $346 = $1;
      $347 = (($346) + 248|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = (($348) + ($345<<2)|0);
      $350 = HEAP32[$349>>2]|0;
      _png_free($344,$350);
      $351 = $row;
      $352 = $1;
      $353 = (($352) + 248|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = (($354) + ($351<<2)|0);
      HEAP32[$355>>2] = 0;
      $356 = $row;
      $357 = (($356) + 1)|0;
      $row = $357;
     }
     $358 = $0;
     $359 = $1;
     $360 = (($359) + 248|0);
     $361 = HEAP32[$360>>2]|0;
     _png_free($358,$361);
     $362 = $1;
     $363 = (($362) + 248|0);
     HEAP32[$363>>2] = 0;
    }
    $364 = $1;
    $365 = (($364) + 8|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = $366 & -32769;
    HEAP32[$365>>2] = $367;
   }
   $368 = $3;
   $369 = ($368|0)==(-1);
   if ($369) {
    $370 = $2;
    $371 = $370 ^ -1;
    $372 = $1;
    $373 = (($372) + 184|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = $374 & $371;
    HEAP32[$373>>2] = $375;
    STACKTOP = sp;return;
   } else {
    $376 = $2;
    $377 = $376 & -16929;
    $378 = $377 ^ -1;
    $379 = $1;
    $380 = (($379) + 184|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = $381 & $378;
    HEAP32[$380>>2] = $382;
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_init_io($png_ptr,$fp) {
 $png_ptr = $png_ptr|0;
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $fp;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $4 = $1;
  $5 = $0;
  $6 = (($5) + 176|0);
  HEAP32[$6>>2] = $4;
  STACKTOP = sp;return;
 }
}
function _png_handle_as_unknown($png_ptr,$chunk_name) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $chunk_name;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = $1;
   $8 = (($7) + 636|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    $12 = (($11) + 640|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = (($14) + 636|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16*5)|0;
    $18 = (($13) + ($17)|0);
    $19 = (($18) + -5|0);
    $p = $19;
    $20 = $1;
    $21 = (($20) + 636|0);
    $22 = HEAP32[$21>>2]|0;
    $i = $22;
    while(1) {
     $23 = $i;
     $24 = ($23|0)!=(0);
     if (!($24)) {
      label = 11;
      break;
     }
     $25 = $2;
     $26 = $p;
     $27 = (_memcmp($25,$26,4)|0);
     $28 = ($27|0)!=(0);
     if (!($28)) {
      label = 8;
      break;
     }
     $33 = $i;
     $34 = (($33) + -1)|0;
     $i = $34;
     $35 = $p;
     $36 = (($35) + -5|0);
     $p = $36;
    }
    if ((label|0) == 8) {
     $29 = $p;
     $30 = (($29) + 4|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $0 = $32;
     $37 = $0;
     STACKTOP = sp;return ($37|0);
    }
    else if ((label|0) == 11) {
     $0 = 0;
     $37 = $0;
     STACKTOP = sp;return ($37|0);
    }
   }
  }
 }
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _png_64bit_product($v1,$v2,$hi_product,$lo_product) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 $hi_product = $hi_product|0;
 $lo_product = $lo_product|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $hi = 0, $lo = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $hi_product;
 $3 = $lo_product;
 $4 = $0;
 $5 = $4 >> 16;
 $6 = $5 & 65535;
 $a = $6;
 $7 = $0;
 $8 = $7 & 65535;
 $b = $8;
 $9 = $1;
 $10 = $9 >> 16;
 $11 = $10 & 65535;
 $c = $11;
 $12 = $1;
 $13 = $12 & 65535;
 $d = $13;
 $14 = $b;
 $15 = $d;
 $16 = Math_imul($14, $15)|0;
 $lo = $16;
 $17 = $a;
 $18 = $d;
 $19 = Math_imul($17, $18)|0;
 $20 = $c;
 $21 = $b;
 $22 = Math_imul($20, $21)|0;
 $23 = (($19) + ($22))|0;
 $x = $23;
 $24 = $lo;
 $25 = $24 >> 16;
 $26 = $25 & 65535;
 $27 = $x;
 $28 = (($26) + ($27))|0;
 $y = $28;
 $29 = $lo;
 $30 = $29 & 65535;
 $31 = $y;
 $32 = $31 & 65535;
 $33 = $32 << 16;
 $34 = $30 | $33;
 $lo = $34;
 $35 = $y;
 $36 = $35 >> 16;
 $37 = $36 & 65535;
 $hi = $37;
 $38 = $a;
 $39 = $c;
 $40 = Math_imul($38, $39)|0;
 $41 = $hi;
 $42 = (($41) + ($40))|0;
 $hi = $42;
 $43 = $hi;
 $44 = $2;
 HEAP32[$44>>2] = $43;
 $45 = $lo;
 $46 = $3;
 HEAP32[$46>>2] = $45;
 STACKTOP = sp;return;
}
function _png_check_cHRM_fixed($png_ptr,$white_x,$white_y,$red_x,$red_y,$green_x,$green_y,$blue_x,$blue_y) {
 $png_ptr = $png_ptr|0;
 $white_x = $white_x|0;
 $white_y = $white_y|0;
 $red_x = $red_x|0;
 $red_y = $red_y|0;
 $green_x = $green_x|0;
 $green_y = $green_y|0;
 $blue_x = $blue_x|0;
 $blue_y = $blue_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $ret = 0, $xy_hi = 0, $xy_lo = 0, $yx_hi = 0, $yx_lo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xy_hi = sp + 12|0;
 $xy_lo = sp + 8|0;
 $yx_hi = sp + 4|0;
 $yx_lo = sp;
 $1 = $png_ptr;
 $2 = $white_x;
 $3 = $white_y;
 $4 = $red_x;
 $5 = $red_y;
 $6 = $green_x;
 $7 = $green_y;
 $8 = $blue_x;
 $9 = $blue_y;
 $ret = 1;
 $10 = $1;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $12 = $2;
 $13 = ($12|0)<(0);
 if ($13) {
  label = 11;
 } else {
  $14 = $3;
  $15 = ($14|0)<=(0);
  if ($15) {
   label = 11;
  } else {
   $16 = $4;
   $17 = ($16|0)<(0);
   if ($17) {
    label = 11;
   } else {
    $18 = $5;
    $19 = ($18|0)<(0);
    if ($19) {
     label = 11;
    } else {
     $20 = $6;
     $21 = ($20|0)<(0);
     if ($21) {
      label = 11;
     } else {
      $22 = $7;
      $23 = ($22|0)<(0);
      if ($23) {
       label = 11;
      } else {
       $24 = $8;
       $25 = ($24|0)<(0);
       if ($25) {
        label = 11;
       } else {
        $26 = $9;
        $27 = ($26|0)<(0);
        if ($27) {
         label = 11;
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 11) {
  $28 = $1;
  _png_warning($28,8016);
  $ret = 0;
 }
 $29 = $2;
 $30 = ($29|0)>(2147483647);
 if ($30) {
  label = 20;
 } else {
  $31 = $3;
  $32 = ($31|0)>(2147483647);
  if ($32) {
   label = 20;
  } else {
   $33 = $4;
   $34 = ($33|0)>(2147483647);
   if ($34) {
    label = 20;
   } else {
    $35 = $5;
    $36 = ($35|0)>(2147483647);
    if ($36) {
     label = 20;
    } else {
     $37 = $6;
     $38 = ($37|0)>(2147483647);
     if ($38) {
      label = 20;
     } else {
      $39 = $7;
      $40 = ($39|0)>(2147483647);
      if ($40) {
       label = 20;
      } else {
       $41 = $8;
       $42 = ($41|0)>(2147483647);
       if ($42) {
        label = 20;
       } else {
        $43 = $9;
        $44 = ($43|0)>(2147483647);
        if ($44) {
         label = 20;
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 20) {
  $45 = $1;
  _png_warning($45,8072);
  $ret = 0;
 }
 $46 = $2;
 $47 = $3;
 $48 = (100000 - ($47))|0;
 $49 = ($46|0)>($48|0);
 if ($49) {
  $50 = $1;
  _png_warning($50,8136);
  $ret = 0;
 }
 $51 = $4;
 $52 = $5;
 $53 = (100000 - ($52))|0;
 $54 = ($51|0)>($53|0);
 if ($54) {
  $55 = $1;
  _png_warning($55,8168);
  $ret = 0;
 }
 $56 = $6;
 $57 = $7;
 $58 = (100000 - ($57))|0;
 $59 = ($56|0)>($58|0);
 if ($59) {
  $60 = $1;
  _png_warning($60,8192);
  $ret = 0;
 }
 $61 = $8;
 $62 = $9;
 $63 = (100000 - ($62))|0;
 $64 = ($61|0)>($63|0);
 if ($64) {
  $65 = $1;
  _png_warning($65,8224);
  $ret = 0;
 }
 $66 = $6;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $69 = $9;
 $70 = $5;
 $71 = (($69) - ($70))|0;
 _png_64bit_product($68,$71,$xy_hi,$xy_lo);
 $72 = $7;
 $73 = $5;
 $74 = (($72) - ($73))|0;
 $75 = $8;
 $76 = $4;
 $77 = (($75) - ($76))|0;
 _png_64bit_product($74,$77,$yx_hi,$yx_lo);
 $78 = HEAP32[$xy_hi>>2]|0;
 $79 = HEAP32[$yx_hi>>2]|0;
 $80 = ($78|0)==($79|0);
 if ($80) {
  $81 = HEAP32[$xy_lo>>2]|0;
  $82 = HEAP32[$yx_lo>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = $1;
   _png_warning($84,8248);
   $ret = 0;
  }
 }
 $85 = $ret;
 $0 = $85;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _png_check_IHDR($png_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $width;
 $2 = $height;
 $3 = $bit_depth;
 $4 = $color_type;
 $5 = $interlace_type;
 $6 = $compression_type;
 $7 = $filter_type;
 $error = 0;
 $8 = $1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $0;
  _png_warning($10,8312);
  $error = 1;
 }
 $11 = $2;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $0;
  _png_warning($13,8344);
  $error = 1;
 }
 $14 = $1;
 $15 = $0;
 $16 = (($15) + 704|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 if ($18) {
  label = 7;
 } else {
  $19 = $1;
  $20 = ($19>>>0)>(1000000);
  if ($20) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = $0;
  _png_warning($21,8376);
  $error = 1;
 }
 $22 = $2;
 $23 = $0;
 $24 = (($23) + 708|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>($25>>>0);
 if ($26) {
  label = 10;
 } else {
  $27 = $2;
  $28 = ($27>>>0)>(1000000);
  if ($28) {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $29 = $0;
  _png_warning($29,8416);
  $error = 1;
 }
 $30 = $1;
 $31 = ($30>>>0)>(2147483647);
 if ($31) {
  $32 = $0;
  _png_warning($32,8456);
  $error = 1;
 }
 $33 = $2;
 $34 = ($33>>>0)>(2147483647);
 if ($34) {
  $35 = $0;
  _png_warning($35,8488);
  $error = 1;
 }
 $36 = $3;
 $37 = ($36|0)!=(1);
 if ($37) {
  $38 = $3;
  $39 = ($38|0)!=(2);
  if ($39) {
   $40 = $3;
   $41 = ($40|0)!=(4);
   if ($41) {
    $42 = $3;
    $43 = ($42|0)!=(8);
    if ($43) {
     $44 = $3;
     $45 = ($44|0)!=(16);
     if ($45) {
      $46 = $0;
      _png_warning($46,8520);
      $error = 1;
     }
    }
   }
  }
 }
 $47 = $4;
 $48 = ($47|0)<(0);
 if ($48) {
  label = 25;
 } else {
  $49 = $4;
  $50 = ($49|0)==(1);
  if ($50) {
   label = 25;
  } else {
   $51 = $4;
   $52 = ($51|0)==(5);
   if ($52) {
    label = 25;
   } else {
    $53 = $4;
    $54 = ($53|0)>(6);
    if ($54) {
     label = 25;
    }
   }
  }
 }
 if ((label|0) == 25) {
  $55 = $0;
  _png_warning($55,8552);
  $error = 1;
 }
 $56 = $4;
 $57 = ($56|0)==(3);
 if ($57) {
  $58 = $3;
  $59 = ($58|0)>(8);
  if ($59) {
   label = 32;
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 do {
  if ((label|0) == 28) {
   $60 = $4;
   $61 = ($60|0)==(2);
   if (!($61)) {
    $62 = $4;
    $63 = ($62|0)==(4);
    if (!($63)) {
     $64 = $4;
     $65 = ($64|0)==(6);
     if (!($65)) {
      break;
     }
    }
   }
   $66 = $3;
   $67 = ($66|0)<(8);
   if ($67) {
    label = 32;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $68 = $0;
  _png_warning($68,8584);
  $error = 1;
 }
 $69 = $5;
 $70 = ($69|0)>=(2);
 if ($70) {
  $71 = $0;
  _png_warning($71,8640);
  $error = 1;
 }
 $72 = $6;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $0;
  _png_warning($74,8680);
  $error = 1;
 }
 $75 = $0;
 $76 = (($75) + 196|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 & 4096;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $0;
  $81 = (($80) + 652|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0);
  if ($83) {
   $84 = $0;
   _png_warning($84,8976);
  }
 }
 $85 = $7;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $0;
  $88 = (($87) + 652|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 & 4;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $7;
   $93 = ($92|0)==(64);
   if ($93) {
    $94 = $0;
    $95 = (($94) + 196|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 & 4096;
    $98 = ($97|0)==(0);
    if ($98) {
     $99 = $4;
     $100 = ($99|0)==(2);
     if (!($100)) {
      $101 = $4;
      $102 = ($101|0)==(6);
      if (!($102)) {
       label = 46;
      }
     }
    } else {
     label = 46;
    }
   } else {
    label = 46;
   }
  } else {
   label = 46;
  }
  if ((label|0) == 46) {
   $103 = $0;
   _png_warning($103,8720);
   $error = 1;
  }
  $104 = $0;
  $105 = (($104) + 196|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & 4096;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $0;
   _png_warning($109,8752);
   $error = 1;
  }
 }
 $110 = $error;
 $111 = ($110|0)==(1);
 if (!($111)) {
  STACKTOP = sp;return;
 }
 $112 = $0;
 _png_error($112,8784);
 STACKTOP = sp;return;
}
function _png_set_IHDR($png_ptr,$info_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $width;
 $3 = $height;
 $4 = $bit_depth;
 $5 = $color_type;
 $6 = $interlace_type;
 $7 = $compression_type;
 $8 = $filter_type;
 $9 = $0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $1;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = $2;
   $14 = $1;
   HEAP32[$14>>2] = $13;
   $15 = $3;
   $16 = $1;
   $17 = (($16) + 4|0);
   HEAP32[$17>>2] = $15;
   $18 = $4;
   $19 = $18&255;
   $20 = $1;
   $21 = (($20) + 24|0);
   HEAP8[$21>>0] = $19;
   $22 = $5;
   $23 = $22&255;
   $24 = $1;
   $25 = (($24) + 25|0);
   HEAP8[$25>>0] = $23;
   $26 = $7;
   $27 = $26&255;
   $28 = $1;
   $29 = (($28) + 26|0);
   HEAP8[$29>>0] = $27;
   $30 = $8;
   $31 = $30&255;
   $32 = $1;
   $33 = (($32) + 27|0);
   HEAP8[$33>>0] = $31;
   $34 = $6;
   $35 = $34&255;
   $36 = $1;
   $37 = (($36) + 28|0);
   HEAP8[$37>>0] = $35;
   $38 = $0;
   $39 = $1;
   $40 = HEAP32[$39>>2]|0;
   $41 = $1;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = (($44) + 24|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $1;
   $49 = (($48) + 25|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $1;
   $53 = (($52) + 28|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $1;
   $57 = (($56) + 26|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $1;
   $61 = (($60) + 27|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   _png_check_IHDR($38,$40,$43,$47,$51,$55,$59,$63);
   $64 = $1;
   $65 = (($64) + 25|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = ($67|0)==(3);
   if ($68) {
    $69 = $1;
    $70 = (($69) + 29|0);
    HEAP8[$70>>0] = 1;
   } else {
    $71 = $1;
    $72 = (($71) + 25|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = $74 & 2;
    $76 = ($75|0)!=(0);
    if ($76) {
     $77 = $1;
     $78 = (($77) + 29|0);
     HEAP8[$78>>0] = 3;
    } else {
     $79 = $1;
     $80 = (($79) + 29|0);
     HEAP8[$80>>0] = 1;
    }
   }
   $81 = $1;
   $82 = (($81) + 25|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = $84 & 4;
   $86 = ($85|0)!=(0);
   if ($86) {
    $87 = $1;
    $88 = (($87) + 29|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = (($89) + 1)<<24>>24;
    HEAP8[$88>>0] = $90;
   }
   $91 = $1;
   $92 = (($91) + 29|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $1;
   $96 = (($95) + 24|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = Math_imul($94, $98)|0;
   $100 = $99&255;
   $101 = $1;
   $102 = (($101) + 30|0);
   HEAP8[$102>>0] = $100;
   $103 = $2;
   $104 = ($103>>>0)>(536870782);
   if ($104) {
    $105 = $1;
    $106 = (($105) + 12|0);
    HEAP32[$106>>2] = 0;
    $107 = $0;
    _png_error($107,8808);
    STACKTOP = sp;return;
   }
   $108 = $1;
   $109 = (($108) + 30|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = ($111|0)>=(8);
   if ($112) {
    $113 = $2;
    $114 = $1;
    $115 = (($114) + 30|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = $117 >>> 3;
    $119 = Math_imul($113, $118)|0;
    $130 = $119;
   } else {
    $120 = $2;
    $121 = $1;
    $122 = (($121) + 30|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = Math_imul($120, $124)|0;
    $126 = (($125) + 7)|0;
    $127 = $126 >>> 3;
    $130 = $127;
   }
   $128 = $1;
   $129 = (($128) + 12|0);
   HEAP32[$129>>2] = $130;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_set_pHYs($png_ptr,$info_ptr,$res_x,$res_y,$unit_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $res_x = $res_x|0;
 $res_y = $res_y|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $res_x;
 $3 = $res_y;
 $4 = $unit_type;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $1;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $2;
   $10 = $1;
   $11 = (($10) + 112|0);
   HEAP32[$11>>2] = $9;
   $12 = $3;
   $13 = $1;
   $14 = (($13) + 116|0);
   HEAP32[$14>>2] = $12;
   $15 = $4;
   $16 = $15&255;
   $17 = $1;
   $18 = (($17) + 120|0);
   HEAP8[$18>>0] = $16;
   $19 = $1;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 | 128;
   HEAP32[$20>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_set_PLTE($png_ptr,$info_ptr,$palette,$num_palette) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $palette = $palette|0;
 $num_palette = $num_palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $palette;
 $3 = $num_palette;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $3;
   $9 = ($8|0)<(0);
   if ($9) {
    label = 6;
   } else {
    $10 = $3;
    $11 = ($10|0)>(256);
    if ($11) {
     label = 6;
    }
   }
   do {
    if ((label|0) == 6) {
     $12 = $1;
     $13 = (($12) + 25|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = ($15|0)==(3);
     if ($16) {
      $17 = $0;
      _png_error($17,8856);
      break;
     } else {
      $18 = $0;
      _png_warning($18,8856);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $19 = $0;
   $20 = $1;
   _png_free_data($19,$20,4096,0);
   $21 = $0;
   $22 = (_png_calloc($21,768)|0);
   $23 = $0;
   $24 = (($23) + 368|0);
   HEAP32[$24>>2] = $22;
   $25 = $0;
   $26 = (($25) + 368|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = $3;
   $30 = ($29*3)|0;
   _memcpy(($27|0),($28|0),($30|0))|0;
   $31 = $0;
   $32 = (($31) + 368|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = (($34) + 16|0);
   HEAP32[$35>>2] = $33;
   $36 = $3;
   $37 = $36&65535;
   $38 = $0;
   $39 = (($38) + 372|0);
   HEAP16[$39>>1] = $37;
   $40 = $1;
   $41 = (($40) + 20|0);
   HEAP16[$41>>1] = $37;
   $42 = $1;
   $43 = (($42) + 184|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 4096;
   HEAP32[$43>>2] = $45;
   $46 = $1;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 | 8;
   HEAP32[$47>>2] = $49;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_set_tRNS($png_ptr,$info_ptr,$trans,$num_trans,$trans_values) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $trans = $trans|0;
 $num_trans = $num_trans|0;
 $trans_values = $trans_values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $sample_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $trans;
 $3 = $num_trans;
 $4 = $trans_values;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $1;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $3;
   $10 = ($9|0)<(0);
   if (!($10)) {
    $11 = $3;
    $12 = ($11|0)>(256);
    if (!($12)) {
     $14 = $2;
     $15 = ($14|0)!=(0|0);
     if ($15) {
      $16 = $0;
      $17 = $1;
      _png_free_data($16,$17,8192,0);
      $18 = $0;
      $19 = (_png_malloc($18,256)|0);
      $20 = $1;
      $21 = (($20) + 76|0);
      HEAP32[$21>>2] = $19;
      $22 = $0;
      $23 = (($22) + 484|0);
      HEAP32[$23>>2] = $19;
      $24 = $3;
      $25 = ($24|0)>(0);
      if ($25) {
       $26 = $3;
       $27 = ($26|0)<=(256);
       if ($27) {
        $28 = $1;
        $29 = (($28) + 76|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = $2;
        $32 = $3;
        _memcpy(($30|0),($31|0),($32|0))|0;
       }
      }
     }
     $33 = $4;
     $34 = ($33|0)!=(0|0);
     if ($34) {
      $35 = $1;
      $36 = (($35) + 24|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = 1 << $38;
      $sample_max = $39;
      $40 = $1;
      $41 = (($40) + 25|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = ($43|0)==(0);
      if ($44) {
       $45 = $4;
       $46 = (($45) + 8|0);
       $47 = HEAP16[$46>>1]|0;
       $48 = $47&65535;
       $49 = $sample_max;
       $50 = ($48|0)>($49|0);
       if ($50) {
        label = 19;
       } else {
        label = 15;
       }
      } else {
       label = 15;
      }
      if ((label|0) == 15) {
       $51 = $1;
       $52 = (($51) + 25|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53&255;
       $55 = ($54|0)==(2);
       if ($55) {
        $56 = $4;
        $57 = (($56) + 2|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58&65535;
        $60 = $sample_max;
        $61 = ($59|0)>($60|0);
        if ($61) {
         label = 19;
        } else {
         $62 = $4;
         $63 = (($62) + 4|0);
         $64 = HEAP16[$63>>1]|0;
         $65 = $64&65535;
         $66 = $sample_max;
         $67 = ($65|0)>($66|0);
         if ($67) {
          label = 19;
         } else {
          $68 = $4;
          $69 = (($68) + 6|0);
          $70 = HEAP16[$69>>1]|0;
          $71 = $70&65535;
          $72 = $sample_max;
          $73 = ($71|0)>($72|0);
          if ($73) {
           label = 19;
          }
         }
        }
       }
      }
      if ((label|0) == 19) {
       $74 = $0;
       _png_warning($74,8920);
      }
      $75 = $1;
      $76 = (($75) + 80|0);
      $77 = $4;
      ;HEAP16[$76+0>>1]=HEAP16[$77+0>>1]|0;HEAP16[$76+2>>1]=HEAP16[$77+2>>1]|0;HEAP16[$76+4>>1]=HEAP16[$77+4>>1]|0;HEAP16[$76+6>>1]=HEAP16[$77+6>>1]|0;HEAP16[$76+8>>1]=HEAP16[$77+8>>1]|0;
      $78 = $3;
      $79 = ($78|0)==(0);
      if ($79) {
       $3 = 1;
      }
     }
     $80 = $3;
     $81 = $80&65535;
     $82 = $1;
     $83 = (($82) + 22|0);
     HEAP16[$83>>1] = $81;
     $84 = $3;
     $85 = ($84|0)!=(0);
     if (!($85)) {
      STACKTOP = sp;return;
     }
     $86 = $1;
     $87 = (($86) + 8|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $88 | 16;
     HEAP32[$87>>2] = $89;
     $90 = $1;
     $91 = (($90) + 184|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92 | 8192;
     HEAP32[$91>>2] = $93;
     STACKTOP = sp;return;
    }
   }
   $13 = $0;
   _png_warning($13,8880);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_write_info_before_PLTE($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $keep = 0, $up = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = $0;
   $7 = (($6) + 196|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 1024;
   $10 = ($9|0)!=(0);
   if ($10) {
    STACKTOP = sp;return;
   }
   $11 = $0;
   _png_write_sig($11);
   $12 = $0;
   $13 = (($12) + 196|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $0;
    $18 = (($17) + 652|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0);
    if ($20) {
     $21 = $0;
     _png_warning($21,8976);
     $22 = $0;
     $23 = (($22) + 652|0);
     HEAP32[$23>>2] = 0;
    }
   }
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (($27) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 24|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $1;
   $35 = (($34) + 25|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $1;
   $39 = (($38) + 26|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $1;
   $43 = (($42) + 27|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $1;
   $47 = (($46) + 28|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   _png_write_IHDR($24,$26,$29,$33,$37,$41,$45,$49);
   $50 = $1;
   $51 = (($50) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & 1;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $0;
    $56 = $1;
    $57 = (($56) + 40|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $58;
    _png_write_gAMA($55,$59);
   }
   $60 = $1;
   $61 = (($60) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 & 2048;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = $0;
    $66 = $1;
    $67 = (($66) + 44|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    _png_write_sRGB($65,$69);
   }
   $70 = $1;
   $71 = (($70) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 & 4096;
   $74 = ($73|0)!=(0);
   if ($74) {
    $75 = $0;
    $76 = $1;
    $77 = (($76) + 196|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $1;
    $80 = (($79) + 200|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $1;
    $83 = (($82) + 204|0);
    $84 = HEAP32[$83>>2]|0;
    _png_write_iCCP($75,$78,0,$81,$84);
   }
   $85 = $1;
   $86 = (($85) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 & 2;
   $89 = ($88|0)!=(0);
   if ($89) {
    $90 = $0;
    $91 = $1;
    $92 = (($91) + 68|0);
    $93 = $1;
    $94 = (($93) + 25|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    _png_write_sBIT($90,$92,$96);
   }
   $97 = $1;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 & 4;
   $101 = ($100|0)!=(0);
   if ($101) {
    $102 = $0;
    $103 = $1;
    $104 = (($103) + 128|0);
    $105 = +HEAPF32[$104>>2];
    $106 = $105;
    $107 = $1;
    $108 = (($107) + 132|0);
    $109 = +HEAPF32[$108>>2];
    $110 = $109;
    $111 = $1;
    $112 = (($111) + 136|0);
    $113 = +HEAPF32[$112>>2];
    $114 = $113;
    $115 = $1;
    $116 = (($115) + 140|0);
    $117 = +HEAPF32[$116>>2];
    $118 = $117;
    $119 = $1;
    $120 = (($119) + 144|0);
    $121 = +HEAPF32[$120>>2];
    $122 = $121;
    $123 = $1;
    $124 = (($123) + 148|0);
    $125 = +HEAPF32[$124>>2];
    $126 = $125;
    $127 = $1;
    $128 = (($127) + 152|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $129;
    $131 = $1;
    $132 = (($131) + 156|0);
    $133 = +HEAPF32[$132>>2];
    $134 = $133;
    _png_write_cHRM($102,$106,$110,$114,$118,$122,$126,$130,$134);
   }
   $135 = $1;
   $136 = (($135) + 192|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $1;
    $140 = (($139) + 188|0);
    $141 = HEAP32[$140>>2]|0;
    $up = $141;
    while(1) {
     $142 = $up;
     $143 = $1;
     $144 = (($143) + 188|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $1;
     $147 = (($146) + 192|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($145) + (($148*20)|0)|0);
     $150 = ($142>>>0)<($149>>>0);
     if (!($150)) {
      break;
     }
     $151 = $0;
     $152 = $up;
     $153 = (_png_handle_as_unknown($151,$152)|0);
     $keep = $153;
     $154 = $keep;
     $155 = ($154|0)!=(1);
     L31: do {
      if ($155) {
       $156 = $up;
       $157 = (($156) + 16|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = ($159|0)!=(0);
       if ($160) {
        $161 = $up;
        $162 = (($161) + 16|0);
        $163 = HEAP8[$162>>0]|0;
        $164 = $163&255;
        $165 = $164 & 2;
        $166 = ($165|0)!=(0);
        if (!($166)) {
         $167 = $up;
         $168 = (($167) + 16|0);
         $169 = HEAP8[$168>>0]|0;
         $170 = $169&255;
         $171 = $170 & 4;
         $172 = ($171|0)!=(0);
         if (!($172)) {
          $173 = $up;
          $174 = (($173) + 3|0);
          $175 = HEAP8[$174>>0]|0;
          $176 = $175&255;
          $177 = $176 & 32;
          $178 = ($177|0)!=(0);
          do {
           if (!($178)) {
            $179 = $keep;
            $180 = ($179|0)==(3);
            if ($180) {
             break;
            }
            $181 = $0;
            $182 = (($181) + 200|0);
            $183 = HEAP32[$182>>2]|0;
            $184 = $183 & 65536;
            $185 = ($184|0)!=(0);
            if (!($185)) {
             break L31;
            }
           }
          } while(0);
          $186 = $up;
          $187 = (($186) + 12|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = ($188|0)==(0);
          if ($189) {
           $190 = $0;
           _png_warning($190,9032);
          }
          $191 = $0;
          $192 = $up;
          $193 = $up;
          $194 = (($193) + 8|0);
          $195 = HEAP32[$194>>2]|0;
          $196 = $up;
          $197 = (($196) + 12|0);
          $198 = HEAP32[$197>>2]|0;
          _png_write_chunk($191,$192,$195,$198);
         }
        }
       }
      }
     } while(0);
     $199 = $up;
     $200 = (($199) + 20|0);
     $up = $200;
    }
   }
   $201 = $0;
   $202 = (($201) + 196|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $203 | 1024;
   HEAP32[$202>>2] = $204;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_write_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $keep = 0;
 var $up = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = $0;
   $7 = $1;
   _png_write_info_before_PLTE($6,$7);
   $8 = $1;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 8;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = $0;
    $14 = $1;
    $15 = (($14) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $1;
    $18 = (($17) + 20|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19&65535;
    _png_write_PLTE($13,$16,$20);
   } else {
    $21 = $1;
    $22 = (($21) + 25|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($24|0)==(3);
    if ($25) {
     $26 = $0;
     _png_error($26,9072);
    }
   }
   $27 = $1;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 16;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $0;
    $33 = (($32) + 204|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 & 524288;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $1;
     $38 = (($37) + 25|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)==(3);
     if ($41) {
      $j = 0;
      while(1) {
       $42 = $j;
       $43 = $1;
       $44 = (($43) + 22|0);
       $45 = HEAP16[$44>>1]|0;
       $46 = $45&65535;
       $47 = ($42|0)<($46|0);
       if (!($47)) {
        break;
       }
       $48 = $j;
       $49 = $1;
       $50 = (($49) + 76|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($51) + ($48)|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53&255;
       $55 = (255 - ($54))|0;
       $56 = $55&255;
       $57 = $j;
       $58 = $1;
       $59 = (($58) + 76|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (($60) + ($57)|0);
       HEAP8[$61>>0] = $56;
       $62 = $j;
       $63 = (($62) + 1)|0;
       $j = $63;
      }
     }
    }
    $64 = $0;
    $65 = $1;
    $66 = (($65) + 76|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $1;
    $69 = (($68) + 80|0);
    $70 = $1;
    $71 = (($70) + 22|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = $1;
    $75 = (($74) + 25|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    _png_write_tRNS($64,$67,$69,$73,$77);
   }
   $78 = $1;
   $79 = (($78) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 & 32;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $0;
    $84 = $1;
    $85 = (($84) + 90|0);
    $86 = $1;
    $87 = (($86) + 25|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    _png_write_bKGD($83,$85,$89);
   }
   $90 = $1;
   $91 = (($90) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 & 64;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $0;
    $96 = $1;
    $97 = (($96) + 124|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $1;
    $100 = (($99) + 20|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&65535;
    _png_write_hIST($95,$98,$102);
   }
   $103 = $1;
   $104 = (($103) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 256;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $0;
    $109 = $1;
    $110 = (($109) + 100|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $1;
    $113 = (($112) + 104|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $1;
    $116 = (($115) + 108|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    _png_write_oFFs($108,$111,$114,$118);
   }
   $119 = $1;
   $120 = (($119) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 & 1024;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $0;
    $125 = $1;
    $126 = (($125) + 160|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $1;
    $129 = (($128) + 164|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $1;
    $132 = (($131) + 168|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $1;
    $135 = (($134) + 180|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = $1;
    $139 = (($138) + 181|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = $1;
    $143 = (($142) + 172|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $1;
    $146 = (($145) + 176|0);
    $147 = HEAP32[$146>>2]|0;
    _png_write_pCAL($124,$127,$130,$133,$137,$141,$144,$147);
   }
   $148 = $1;
   $149 = (($148) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 & 16384;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $0;
    $154 = $1;
    $155 = (($154) + 220|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = $1;
    $159 = (($158) + 224|0);
    $160 = +HEAPF64[$159>>3];
    $161 = $1;
    $162 = (($161) + 232|0);
    $163 = +HEAPF64[$162>>3];
    _png_write_sCAL($153,$157,$160,$163);
   }
   $164 = $1;
   $165 = (($164) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $166 & 128;
   $168 = ($167|0)!=(0);
   if ($168) {
    $169 = $0;
    $170 = $1;
    $171 = (($170) + 112|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $1;
    $174 = (($173) + 116|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $1;
    $177 = (($176) + 120|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    _png_write_pHYs($169,$172,$175,$179);
   }
   $180 = $1;
   $181 = (($180) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182 & 512;
   $184 = ($183|0)!=(0);
   if ($184) {
    $185 = $0;
    $186 = $1;
    $187 = (($186) + 60|0);
    _png_write_tIME($185,$187);
    $188 = $0;
    $189 = (($188) + 196|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $190 | 512;
    HEAP32[$189>>2] = $191;
   }
   $192 = $1;
   $193 = (($192) + 8|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194 & 8192;
   $196 = ($195|0)!=(0);
   if ($196) {
    $i = 0;
    while(1) {
     $197 = $i;
     $198 = $1;
     $199 = (($198) + 216|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($197|0)<($200|0);
     if (!($201)) {
      break;
     }
     $202 = $0;
     $203 = $1;
     $204 = (($203) + 212|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $i;
     $207 = (($205) + ($206<<4)|0);
     _png_write_sPLT($202,$207);
     $208 = $i;
     $209 = (($208) + 1)|0;
     $i = $209;
    }
   }
   $i = 0;
   while(1) {
    $210 = $i;
    $211 = $1;
    $212 = (($211) + 48|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($210|0)<($213|0);
    if (!($214)) {
     break;
    }
    $215 = $i;
    $216 = $1;
    $217 = (($216) + 56|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = (($218) + ($215<<4)|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($220|0)>(0);
    if ($221) {
     $222 = $0;
     _png_warning($222,9120);
     $223 = $i;
     $224 = $1;
     $225 = (($224) + 56|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (($226) + ($223<<4)|0);
     HEAP32[$227>>2] = -3;
    } else {
     $228 = $i;
     $229 = $1;
     $230 = (($229) + 56|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (($231) + ($228<<4)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(0);
     if ($234) {
      $235 = $0;
      $236 = $i;
      $237 = $1;
      $238 = (($237) + 56|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = (($239) + ($236<<4)|0);
      $241 = (($240) + 4|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = $i;
      $244 = $1;
      $245 = (($244) + 56|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (($246) + ($243<<4)|0);
      $248 = (($247) + 8|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = $i;
      $251 = $1;
      $252 = (($251) + 56|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = (($253) + ($250<<4)|0);
      $255 = HEAP32[$254>>2]|0;
      _png_write_zTXt($235,$242,$249,0,$255);
      $256 = $i;
      $257 = $1;
      $258 = (($257) + 56|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = (($259) + ($256<<4)|0);
      HEAP32[$260>>2] = -2;
     } else {
      $261 = $i;
      $262 = $1;
      $263 = (($262) + 56|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = (($264) + ($261<<4)|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ($266|0)==(-1);
      if ($267) {
       $268 = $0;
       $269 = $i;
       $270 = $1;
       $271 = (($270) + 56|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + ($269<<4)|0);
       $274 = (($273) + 4|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = $i;
       $277 = $1;
       $278 = (($277) + 56|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($279) + ($276<<4)|0);
       $281 = (($280) + 8|0);
       $282 = HEAP32[$281>>2]|0;
       _png_write_tEXt($268,$275,$282,0);
       $283 = $i;
       $284 = $1;
       $285 = (($284) + 56|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = (($286) + ($283<<4)|0);
       HEAP32[$287>>2] = -3;
      }
     }
    }
    $288 = $i;
    $289 = (($288) + 1)|0;
    $i = $289;
   }
   $290 = $1;
   $291 = (($290) + 192|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = ($292|0)!=(0);
   if (!($293)) {
    STACKTOP = sp;return;
   }
   $294 = $1;
   $295 = (($294) + 188|0);
   $296 = HEAP32[$295>>2]|0;
   $up = $296;
   while(1) {
    $297 = $up;
    $298 = $1;
    $299 = (($298) + 188|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $1;
    $302 = (($301) + 192|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = (($300) + (($303*20)|0)|0);
    $305 = ($297>>>0)<($304>>>0);
    if (!($305)) {
     break;
    }
    $306 = $0;
    $307 = $up;
    $308 = (_png_handle_as_unknown($306,$307)|0);
    $keep = $308;
    $309 = $keep;
    $310 = ($309|0)!=(1);
    L74: do {
     if ($310) {
      $311 = $up;
      $312 = (($311) + 16|0);
      $313 = HEAP8[$312>>0]|0;
      $314 = $313&255;
      $315 = ($314|0)!=(0);
      if ($315) {
       $316 = $up;
       $317 = (($316) + 16|0);
       $318 = HEAP8[$317>>0]|0;
       $319 = $318&255;
       $320 = $319 & 2;
       $321 = ($320|0)!=(0);
       if ($321) {
        $322 = $up;
        $323 = (($322) + 16|0);
        $324 = HEAP8[$323>>0]|0;
        $325 = $324&255;
        $326 = $325 & 4;
        $327 = ($326|0)!=(0);
        if ($327) {
         break;
        }
        $328 = $up;
        $329 = (($328) + 16|0);
        $330 = HEAP8[$329>>0]|0;
        $331 = $330&255;
        $332 = $331 & 8;
        $333 = ($332|0)!=(0);
        if ($333) {
         break;
        }
        $334 = $up;
        $335 = (($334) + 3|0);
        $336 = HEAP8[$335>>0]|0;
        $337 = $336&255;
        $338 = $337 & 32;
        $339 = ($338|0)!=(0);
        do {
         if (!($339)) {
          $340 = $keep;
          $341 = ($340|0)==(3);
          if ($341) {
           break;
          }
          $342 = $0;
          $343 = (($342) + 200|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = $344 & 65536;
          $346 = ($345|0)!=(0);
          if (!($346)) {
           break L74;
          }
         }
        } while(0);
        $347 = $0;
        $348 = $up;
        $349 = $up;
        $350 = (($349) + 8|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $up;
        $353 = (($352) + 12|0);
        $354 = HEAP32[$353>>2]|0;
        _png_write_chunk($347,$348,$351,$354);
       }
      }
     }
    } while(0);
    $355 = $up;
    $356 = (($355) + 20|0);
    $up = $356;
   }
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_write_end($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $keep = 0, $up = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 196|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $0;
  _png_error($9,9160);
 }
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 512;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $0;
   $18 = (($17) + 196|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 512;
   $21 = ($20|0)!=(0);
   if (!($21)) {
    $22 = $0;
    $23 = $1;
    $24 = (($23) + 60|0);
    _png_write_tIME($22,$24);
   }
  }
  $i = 0;
  while(1) {
   $25 = $i;
   $26 = $1;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($25|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = $1;
   $32 = (($31) + 56|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<4)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $0;
    _png_warning($37,9120);
    $38 = $i;
    $39 = $1;
    $40 = (($39) + 56|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($38<<4)|0);
    HEAP32[$42>>2] = -3;
   } else {
    $43 = $i;
    $44 = $1;
    $45 = (($44) + 56|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($43<<4)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)>=(0);
    if ($49) {
     $50 = $0;
     $51 = $i;
     $52 = $1;
     $53 = (($52) + 56|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($51<<4)|0);
     $56 = (($55) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $i;
     $59 = $1;
     $60 = (($59) + 56|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + ($58<<4)|0);
     $63 = (($62) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $i;
     $66 = $1;
     $67 = (($66) + 56|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + ($65<<4)|0);
     $70 = HEAP32[$69>>2]|0;
     _png_write_zTXt($50,$57,$64,0,$70);
     $71 = $i;
     $72 = $1;
     $73 = (($72) + 56|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($71<<4)|0);
     HEAP32[$75>>2] = -2;
    } else {
     $76 = $i;
     $77 = $1;
     $78 = (($77) + 56|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<4)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(-1);
     if ($82) {
      $83 = $0;
      $84 = $i;
      $85 = $1;
      $86 = (($85) + 56|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (($87) + ($84<<4)|0);
      $89 = (($88) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = $i;
      $92 = $1;
      $93 = (($92) + 56|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + ($91<<4)|0);
      $96 = (($95) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      _png_write_tEXt($83,$90,$97,0);
      $98 = $i;
      $99 = $1;
      $100 = (($99) + 56|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($101) + ($98<<4)|0);
      HEAP32[$102>>2] = -3;
     }
    }
   }
   $103 = $i;
   $104 = (($103) + 1)|0;
   $i = $104;
  }
  $105 = $1;
  $106 = (($105) + 192|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $1;
   $110 = (($109) + 188|0);
   $111 = HEAP32[$110>>2]|0;
   $up = $111;
   while(1) {
    $112 = $up;
    $113 = $1;
    $114 = (($113) + 188|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $1;
    $117 = (($116) + 192|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($115) + (($118*20)|0)|0);
    $120 = ($112>>>0)<($119>>>0);
    if (!($120)) {
     break;
    }
    $121 = $0;
    $122 = $up;
    $123 = (_png_handle_as_unknown($121,$122)|0);
    $keep = $123;
    $124 = $keep;
    $125 = ($124|0)!=(1);
    do {
     if ($125) {
      $126 = $up;
      $127 = (($126) + 16|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = ($129|0)!=(0);
      if ($130) {
       $131 = $up;
       $132 = (($131) + 16|0);
       $133 = HEAP8[$132>>0]|0;
       $134 = $133&255;
       $135 = $134 & 8;
       $136 = ($135|0)!=(0);
       if ($136) {
        $137 = $up;
        $138 = (($137) + 3|0);
        $139 = HEAP8[$138>>0]|0;
        $140 = $139&255;
        $141 = $140 & 32;
        $142 = ($141|0)!=(0);
        if (!($142)) {
         $143 = $keep;
         $144 = ($143|0)==(3);
         if (!($144)) {
          $145 = $0;
          $146 = (($145) + 200|0);
          $147 = HEAP32[$146>>2]|0;
          $148 = $147 & 65536;
          $149 = ($148|0)!=(0);
          if (!($149)) {
           break;
          }
         }
        }
        $150 = $0;
        $151 = $up;
        $152 = $up;
        $153 = (($152) + 8|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = $up;
        $156 = (($155) + 12|0);
        $157 = HEAP32[$156>>2]|0;
        _png_write_chunk($150,$151,$154,$157);
       }
      }
     }
    } while(0);
    $158 = $up;
    $159 = (($158) + 20|0);
    $up = $159;
   }
  }
 }
 $160 = $0;
 $161 = (($160) + 196|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $162 | 8;
 HEAP32[$161>>2] = $163;
 $164 = $0;
 _png_write_IEND($164);
 STACKTOP = sp;return;
}
function _png_create_write_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_png_ver;
 $1 = $error_ptr;
 $2 = $error_fn;
 $3 = $warn_fn;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_png_create_write_struct_2($4,$5,$6,$7,0,0,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _png_create_write_struct_2($user_png_ver,$error_ptr,$error_fn,$warn_fn,$mem_ptr,$malloc_fn,$free_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $$0 = 0, $$reg2mem62$0 = 0, $$reg2mem64$0 = 0, $$reg2mem66$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found_dots$0 = 0, $found_dots$1 = 0, $i$0 = 0, $msg = 0, $png_ptr = 0, $vararg_buffer = 0, $vararg_buffer68 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer68 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $msg = sp + 16|0;
 __THREW__ = 0;
 $0 = (invoke_iiii(35,1,($malloc_fn|0),($mem_ptr|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
 $3 = tempRet0;
 do {
  if ((($2|0) == 2)) {
   $$reg2mem66$0 = $3;
  } else if ((($2|0) == 1)) {
   $$reg2mem62$0 = $3;
   label = 46;
  } else {
   $png_ptr = $0;
   $4 = $png_ptr;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 0;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = $png_ptr;
    $7 = (($6) + 704|0);
    HEAP32[$7>>2] = 1000000;
    $8 = $png_ptr;
    $9 = (($8) + 708|0);
    HEAP32[$9>>2] = 1000000;
    $10 = $png_ptr;
    _setjmpTable = _saveSetjmp($10,2,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
    __THREW__ = 0;
    $11 = __THREW__; __THREW__ = 0;
    if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
    $13 = tempRet0;
    if ((($12|0) == 2)) {
     $$reg2mem66$0 = $13;
     break;
    } else if ((($12|0) == 1)) {
     $$reg2mem62$0 = $13;
     label = 46;
     break;
    }
    $$reg2mem66$0 = 0;
    break;
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 46) {
   label = 0;
   $139 = ($$reg2mem62$0|0)!=(0);
   if (!($139)) {
    label = 49;
    break;
   }
   __THREW__ = 0;
   invoke_v(46);
   $140 = __THREW__; __THREW__ = 0;
   if ((($140|0) != 0) & ((threwValue|0) != 0)) { $141 = _testSetjmp(HEAP32[$140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($141|0) == 0) { _longjmp($140|0, threwValue|0); } tempRet0 = threwValue; } else { $141 = -1; };
   $142 = tempRet0;
   if ((($141|0) == 2)) {
    $$reg2mem66$0 = $142;
   } else if ((($141|0) == 1)) {
    $$reg2mem62$0 = $142;
    label = 46;
    continue;
   } else {
    label = 48;
    break;
   }
  }
  $14 = ($$reg2mem66$0|0)!=(0);
  if ($14) {
   $15 = $png_ptr;
   $16 = $png_ptr;
   $17 = (($16) + 264|0);
   $18 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   invoke_vii(36,($15|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = threwValue; } else { $20 = -1; };
   $21 = tempRet0;
   if ((($20|0) == 2)) {
    $$reg2mem66$0 = $21;
    continue;
   } else if ((($20|0) == 1)) {
    $$reg2mem62$0 = $21;
    label = 46;
    continue;
   }
   $22 = $png_ptr;
   $23 = (($22) + 264|0);
   HEAP32[$23>>2] = 0;
   $24 = $png_ptr;
   __THREW__ = 0;
   invoke_viii(37,($24|0),($free_fn|0),($mem_ptr|0));
   $25 = __THREW__; __THREW__ = 0;
   if ((($25|0) != 0) & ((threwValue|0) != 0)) { $26 = _testSetjmp(HEAP32[$25>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($26|0) == 0) { _longjmp($25|0, threwValue|0); } tempRet0 = threwValue; } else { $26 = -1; };
   $27 = tempRet0;
   if ((($26|0) == 2)) {
    $$reg2mem66$0 = $27;
    continue;
   } else if ((($26|0) == 1)) {
    $$reg2mem62$0 = $27;
    label = 46;
    continue;
   } else {
    label = 9;
    break;
   }
  }
  $28 = $png_ptr;
  __THREW__ = 0;
  invoke_viiii(38,($28|0),($mem_ptr|0),($malloc_fn|0),($free_fn|0));
  $29 = __THREW__; __THREW__ = 0;
  if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
  $31 = tempRet0;
  if ((($30|0) == 2)) {
   $$reg2mem66$0 = $31;
   continue;
  } else if ((($30|0) == 1)) {
   $$reg2mem62$0 = $31;
   label = 46;
   continue;
  }
  $32 = $png_ptr;
  __THREW__ = 0;
  invoke_viiii(39,($32|0),($error_ptr|0),($error_fn|0),($warn_fn|0));
  $33 = __THREW__; __THREW__ = 0;
  if ((($33|0) != 0) & ((threwValue|0) != 0)) { $34 = _testSetjmp(HEAP32[$33>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($34|0) == 0) { _longjmp($33|0, threwValue|0); } tempRet0 = threwValue; } else { $34 = -1; };
  $35 = tempRet0;
  if ((($34|0) == 2)) {
   $$reg2mem66$0 = $35;
   continue;
  } else if ((($34|0) == 1)) {
   $$reg2mem62$0 = $35;
   label = 46;
   continue;
  }
  $36 = ($user_png_ver|0)!=(0|0);
  if ($36) {
   $found_dots$0 = 0;$i$0 = -1;
   while(1) {
    $37 = (($i$0) + 1)|0;
    $38 = (($user_png_ver) + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = (9192 + ($37)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = ($40|0)!=($43|0);
    if ($44) {
     $45 = $png_ptr;
     $46 = (($45) + 200|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 | 131072;
     HEAP32[$46>>2] = $48;
    }
    $49 = (($user_png_ver) + ($37)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = ($51|0)==(46);
    if ($52) {
     $53 = (($found_dots$0) + 1)|0;
     $found_dots$1 = $53;
    } else {
     $found_dots$1 = $found_dots$0;
    }
    $54 = ($found_dots$1|0)<(2);
    if ($54) {
     $55 = (($user_png_ver) + ($37)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = ($57|0)!=(0);
     if ($58) {
      $59 = (9192 + ($37)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = $60 << 24 >> 24;
      $62 = ($61|0)!=(0);
      $$reg2mem64$0 = $62;
     } else {
      $$reg2mem64$0 = 0;
     }
    } else {
     $$reg2mem64$0 = 0;
    }
    if ($$reg2mem64$0) {
     $found_dots$0 = $found_dots$1;$i$0 = $37;
    } else {
     break;
    }
   }
  } else {
   $63 = $png_ptr;
   $64 = (($63) + 200|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 131072;
   HEAP32[$64>>2] = $66;
  }
  $67 = $png_ptr;
  $68 = (($67) + 200|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 & 131072;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = ($user_png_ver|0)==(0|0);
   do {
    if ($72) {
     label = 32;
    } else {
     $73 = HEAP8[$user_png_ver>>0]|0;
     $74 = $73 << 24 >> 24;
     $75 = HEAP8[7664>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = ($74|0)!=($76|0);
     if ($77) {
      label = 32;
     } else {
      $78 = HEAP8[$user_png_ver>>0]|0;
      $79 = $78 << 24 >> 24;
      $80 = ($79|0)==(49);
      if ($80) {
       $81 = (($user_png_ver) + 2|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = $82 << 24 >> 24;
       $84 = HEAP8[((7664 + 2|0))>>0]|0;
       $85 = $84 << 24 >> 24;
       $86 = ($83|0)!=($85|0);
       if ($86) {
        label = 32;
        break;
       }
      }
      $87 = HEAP8[$user_png_ver>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = ($88|0)==(48);
      if ($89) {
       $90 = (($user_png_ver) + 2|0);
       $91 = HEAP8[$90>>0]|0;
       $92 = $91 << 24 >> 24;
       $93 = ($92|0)<(57);
       if ($93) {
        label = 32;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 32) {
    label = 0;
    $94 = ($user_png_ver|0)!=(0|0);
    if ($94) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $user_png_ver;
     (invoke_iiiii(40,($msg|0),80,(9200|0),($vararg_buffer|0))|0);
     $95 = __THREW__; __THREW__ = 0;
     if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = threwValue; } else { $96 = -1; };
     $97 = tempRet0;
     if ((($96|0) == 2)) {
      $$reg2mem66$0 = $97;
      continue;
     } else if ((($96|0) == 1)) {
      $$reg2mem62$0 = $97;
      label = 46;
      continue;
     }
     $98 = $png_ptr;
     __THREW__ = 0;
     invoke_vii(41,($98|0),($msg|0));
     $99 = __THREW__; __THREW__ = 0;
     if ((($99|0) != 0) & ((threwValue|0) != 0)) { $100 = _testSetjmp(HEAP32[$99>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($100|0) == 0) { _longjmp($99|0, threwValue|0); } tempRet0 = threwValue; } else { $100 = -1; };
     $101 = tempRet0;
     if ((($100|0) == 2)) {
      $$reg2mem66$0 = $101;
      continue;
     } else if ((($100|0) == 1)) {
      $$reg2mem62$0 = $101;
      label = 46;
      continue;
     }
    }
    __THREW__ = 0;
    HEAP32[$vararg_buffer68>>2] = 7664;
    (invoke_iiiii(40,($msg|0),80,(9256|0),($vararg_buffer68|0))|0);
    $102 = __THREW__; __THREW__ = 0;
    if ((($102|0) != 0) & ((threwValue|0) != 0)) { $103 = _testSetjmp(HEAP32[$102>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($103|0) == 0) { _longjmp($102|0, threwValue|0); } tempRet0 = threwValue; } else { $103 = -1; };
    $104 = tempRet0;
    if ((($103|0) == 2)) {
     $$reg2mem66$0 = $104;
     continue;
    } else if ((($103|0) == 1)) {
     $$reg2mem62$0 = $104;
     label = 46;
     continue;
    }
    $105 = $png_ptr;
    __THREW__ = 0;
    invoke_vii(41,($105|0),($msg|0));
    $106 = __THREW__; __THREW__ = 0;
    if ((($106|0) != 0) & ((threwValue|0) != 0)) { $107 = _testSetjmp(HEAP32[$106>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($107|0) == 0) { _longjmp($106|0, threwValue|0); } tempRet0 = threwValue; } else { $107 = -1; };
    $108 = tempRet0;
    if ((($107|0) == 2)) {
     $$reg2mem66$0 = $108;
     continue;
    } else if ((($107|0) == 1)) {
     $$reg2mem62$0 = $108;
     label = 46;
     continue;
    }
    $109 = $png_ptr;
    $110 = (($109) + 200|0);
    HEAP32[$110>>2] = 0;
    $111 = $png_ptr;
    __THREW__ = 0;
    invoke_vii(42,($111|0),(9312|0));
    $112 = __THREW__; __THREW__ = 0;
    if ((($112|0) != 0) & ((threwValue|0) != 0)) { $113 = _testSetjmp(HEAP32[$112>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($113|0) == 0) { _longjmp($112|0, threwValue|0); } tempRet0 = threwValue; } else { $113 = -1; };
    $114 = tempRet0;
    if ((($113|0) == 2)) {
     $$reg2mem66$0 = $114;
     continue;
    } else if ((($113|0) == 1)) {
     $$reg2mem62$0 = $114;
     label = 46;
     continue;
    }
   }
  }
  $115 = $png_ptr;
  $116 = (($115) + 268|0);
  HEAP32[$116>>2] = 8192;
  $117 = $png_ptr;
  $118 = $png_ptr;
  $119 = (($118) + 268|0);
  $120 = HEAP32[$119>>2]|0;
  __THREW__ = 0;
  $121 = (invoke_iii(43,($117|0),($120|0))|0);
  $122 = __THREW__; __THREW__ = 0;
  if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = threwValue; } else { $123 = -1; };
  $124 = tempRet0;
  if ((($123|0) == 2)) {
   $$reg2mem66$0 = $124;
   continue;
  } else if ((($123|0) == 1)) {
   $$reg2mem62$0 = $124;
   label = 46;
   continue;
  }
  $125 = $png_ptr;
  $126 = (($125) + 264|0);
  HEAP32[$126>>2] = $121;
  $127 = $png_ptr;
  __THREW__ = 0;
  invoke_viiii(44,($127|0),(0|0),(0|0),(0|0));
  $128 = __THREW__; __THREW__ = 0;
  if ((($128|0) != 0) & ((threwValue|0) != 0)) { $129 = _testSetjmp(HEAP32[$128>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($129|0) == 0) { _longjmp($128|0, threwValue|0); } tempRet0 = threwValue; } else { $129 = -1; };
  $130 = tempRet0;
  if ((($129|0) == 2)) {
   $$reg2mem66$0 = $130;
   continue;
  } else if ((($129|0) == 1)) {
   $$reg2mem62$0 = $130;
   label = 46;
   continue;
  }
  $131 = $png_ptr;
  __THREW__ = 0;
  invoke_viiiii(45,($131|0),0,1,(0|0),(0|0));
  $132 = __THREW__; __THREW__ = 0;
  if ((($132|0) != 0) & ((threwValue|0) != 0)) { $133 = _testSetjmp(HEAP32[$132>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($133|0) == 0) { _longjmp($132|0, threwValue|0); } tempRet0 = threwValue; } else { $133 = -1; };
  $134 = tempRet0;
  if ((($133|0) == 2)) {
   $$reg2mem66$0 = $134;
   continue;
  } else if ((($133|0) == 1)) {
   $$reg2mem62$0 = $134;
   label = 46;
   continue;
  }
  $135 = $png_ptr;
  _setjmpTable = _saveSetjmp($135,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $136 = __THREW__; __THREW__ = 0;
  if ((($136|0) != 0) & ((threwValue|0) != 0)) { $137 = _testSetjmp(HEAP32[$136>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($137|0) == 0) { _longjmp($136|0, threwValue|0); } tempRet0 = threwValue; } else { $137 = -1; };
  $138 = tempRet0;
  if ((($137|0) == 2)) {
   $$reg2mem66$0 = $138;
   continue;
  } else if ((($137|0) == 1)) {
   $$reg2mem62$0 = $138;
   label = 46;
   continue;
  }
  $$reg2mem62$0 = 0;
  label = 46;
 }
 if ((label|0) == 9) {
  $$0 = 0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 48) {
  // unreachable;
 }
 else if ((label|0) == 49) {
  $143 = $png_ptr;
  $$0 = $143;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _png_set_filter_heuristics($png_ptr,$heuristic_method,$num_weights,$filter_weights,$filter_costs) {
 $png_ptr = $png_ptr|0;
 $heuristic_method = $heuristic_method|0;
 $num_weights = $num_weights|0;
 $filter_weights = $filter_weights|0;
 $filter_costs = $filter_costs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $heuristic_method;
 $2 = $num_weights;
 $3 = $filter_weights;
 $4 = $filter_costs;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ($7|0)>=(3);
 if ($8) {
  $9 = $0;
  _png_warning($9,9424);
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ($10|0)==(0);
 if ($11) {
  $1 = 1;
 }
 $12 = $2;
 $13 = ($12|0)<(0);
 if ($13) {
  label = 10;
 } else {
  $14 = $3;
  $15 = ($14|0)==(0|0);
  if ($15) {
   label = 10;
  } else {
   $16 = $1;
   $17 = ($16|0)==(1);
   if ($17) {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $2 = 0;
 }
 $18 = $2;
 $19 = $18&255;
 $20 = $0;
 $21 = (($20) + 597|0);
 HEAP8[$21>>0] = $19;
 $22 = $1;
 $23 = $22&255;
 $24 = $0;
 $25 = (($24) + 596|0);
 HEAP8[$25>>0] = $23;
 $26 = $2;
 $27 = ($26|0)>(0);
 if ($27) {
  $28 = $0;
  $29 = (($28) + 600|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   $32 = $0;
   $33 = $2;
   $34 = $33;
   $35 = (_png_malloc($32,$34)|0);
   $36 = $0;
   $37 = (($36) + 600|0);
   HEAP32[$37>>2] = $35;
   $i = 0;
   while(1) {
    $38 = $i;
    $39 = $2;
    $40 = ($38|0)<($39|0);
    if (!($40)) {
     break;
    }
    $41 = $i;
    $42 = $0;
    $43 = (($42) + 600|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($41)|0);
    HEAP8[$45>>0] = -1;
    $46 = $i;
    $47 = (($46) + 1)|0;
    $i = $47;
   }
  }
  $48 = $0;
  $49 = (($48) + 604|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = $0;
   $53 = $2;
   $54 = $53<<1;
   $55 = (_png_malloc($52,$54)|0);
   $56 = $0;
   $57 = (($56) + 604|0);
   HEAP32[$57>>2] = $55;
   $58 = $0;
   $59 = $2;
   $60 = $59<<1;
   $61 = (_png_malloc($58,$60)|0);
   $62 = $0;
   $63 = (($62) + 608|0);
   HEAP32[$63>>2] = $61;
   $i = 0;
   while(1) {
    $64 = $i;
    $65 = $2;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     break;
    }
    $67 = $i;
    $68 = $0;
    $69 = (($68) + 604|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<1)|0);
    HEAP16[$71>>1] = 256;
    $72 = $i;
    $73 = $0;
    $74 = (($73) + 608|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($72<<1)|0);
    HEAP16[$76>>1] = 256;
    $77 = $i;
    $78 = (($77) + 1)|0;
    $i = $78;
   }
  }
  $i = 0;
  while(1) {
   $79 = $i;
   $80 = $2;
   $81 = ($79|0)<($80|0);
   if (!($81)) {
    break;
   }
   $82 = $i;
   $83 = $3;
   $84 = (($83) + ($82<<3)|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 < 0.0;
   if ($86) {
    $87 = $i;
    $88 = $0;
    $89 = (($88) + 604|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($87<<1)|0);
    HEAP16[$91>>1] = 256;
    $92 = $i;
    $93 = $0;
    $94 = (($93) + 608|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + ($92<<1)|0);
    HEAP16[$96>>1] = 256;
   } else {
    $97 = $i;
    $98 = $3;
    $99 = (($98) + ($97<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = 256.0 * $100;
    $102 = $101 + 0.5;
    $103 = (~~(($102))&65535);
    $104 = $i;
    $105 = $0;
    $106 = (($105) + 608|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<1)|0);
    HEAP16[$108>>1] = $103;
    $109 = $i;
    $110 = $3;
    $111 = (($110) + ($109<<3)|0);
    $112 = +HEAPF64[$111>>3];
    $113 = 256.0 / $112;
    $114 = $113 + 0.5;
    $115 = (~~(($114))&65535);
    $116 = $i;
    $117 = $0;
    $118 = (($117) + 604|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116<<1)|0);
    HEAP16[$120>>1] = $115;
   }
   $121 = $i;
   $122 = (($121) + 1)|0;
   $i = $122;
  }
 }
 $123 = $0;
 $124 = (($123) + 612|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)==(0|0);
 if ($126) {
  $127 = $0;
  $128 = (_png_malloc($127,10)|0);
  $129 = $0;
  $130 = (($129) + 612|0);
  HEAP32[$130>>2] = $128;
  $131 = $0;
  $132 = (_png_malloc($131,10)|0);
  $133 = $0;
  $134 = (($133) + 616|0);
  HEAP32[$134>>2] = $132;
  $i = 0;
  while(1) {
   $135 = $i;
   $136 = ($135|0)<(5);
   if (!($136)) {
    break;
   }
   $137 = $i;
   $138 = $0;
   $139 = (($138) + 612|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + ($137<<1)|0);
   HEAP16[$141>>1] = 8;
   $142 = $i;
   $143 = $0;
   $144 = (($143) + 616|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (($145) + ($142<<1)|0);
   HEAP16[$146>>1] = 8;
   $147 = $i;
   $148 = (($147) + 1)|0;
   $i = $148;
  }
 }
 $i = 0;
 while(1) {
  $149 = $i;
  $150 = ($149|0)<(5);
  if (!($150)) {
   break;
  }
  $151 = $4;
  $152 = ($151|0)==(0|0);
  if ($152) {
   label = 42;
  } else {
   $153 = $i;
   $154 = $4;
   $155 = (($154) + ($153<<3)|0);
   $156 = +HEAPF64[$155>>3];
   $157 = $156 < 0.0;
   if ($157) {
    label = 42;
   } else {
    $168 = $i;
    $169 = $4;
    $170 = (($169) + ($168<<3)|0);
    $171 = +HEAPF64[$170>>3];
    $172 = $171 >= 1.0;
    if ($172) {
     $173 = $i;
     $174 = $4;
     $175 = (($174) + ($173<<3)|0);
     $176 = +HEAPF64[$175>>3];
     $177 = 8.0 / $176;
     $178 = $177 + 0.5;
     $179 = (~~(($178))&65535);
     $180 = $i;
     $181 = $0;
     $182 = (($181) + 616|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + ($180<<1)|0);
     HEAP16[$184>>1] = $179;
     $185 = $i;
     $186 = $4;
     $187 = (($186) + ($185<<3)|0);
     $188 = +HEAPF64[$187>>3];
     $189 = 8.0 * $188;
     $190 = $189 + 0.5;
     $191 = (~~(($190))&65535);
     $192 = $i;
     $193 = $0;
     $194 = (($193) + 612|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + ($192<<1)|0);
     HEAP16[$196>>1] = $191;
    }
   }
  }
  if ((label|0) == 42) {
   label = 0;
   $158 = $i;
   $159 = $0;
   $160 = (($159) + 612|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + ($158<<1)|0);
   HEAP16[$162>>1] = 8;
   $163 = $i;
   $164 = $0;
   $165 = (($164) + 616|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + ($163<<1)|0);
   HEAP16[$167>>1] = 8;
  }
  $197 = $i;
  $198 = (($197) + 1)|0;
  $i = $198;
 }
 STACKTOP = sp;return;
}
function _png_write_row($png_ptr,$row) {
 $png_ptr = $png_ptr|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $row;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 320|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 384|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = (($13) + 196|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 1024;
   $17 = ($16|0)!=(0);
   if (!($17)) {
    $18 = $0;
    _png_error($18,9368);
   }
   $19 = $0;
   _png_write_start_row($19);
  }
 }
 $20 = $0;
 $21 = (($20) + 383|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $0;
  $26 = (($25) + 204|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 2;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $0;
   $31 = (($30) + 384|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   L15: do {
    switch ($33|0) {
    case 6:  {
     $82 = $0;
     $83 = (($82) + 320|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $84 & 1;
     $86 = ($85|0)!=(0);
     if ($86) {
      break L15;
     }
     $87 = $0;
     _png_write_finish_row($87);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $66 = $0;
     $67 = (($66) + 320|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68 & 3;
     $70 = ($69|0)!=(2);
     if (!($70)) {
      break L15;
     }
     $71 = $0;
     _png_write_finish_row($71);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $40 = $0;
     $41 = (($40) + 320|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $42 & 7;
     $44 = ($43|0)!=(0);
     if (!($44)) {
      $45 = $0;
      $46 = (($45) + 292|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47>>>0)<(5);
      if (!($48)) {
       break L15;
      }
     }
     $49 = $0;
     _png_write_finish_row($49);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $56 = $0;
     $57 = (($56) + 320|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $58 & 3;
     $60 = ($59|0)!=(0);
     if (!($60)) {
      $61 = $0;
      $62 = (($61) + 292|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63>>>0)<(3);
      if (!($64)) {
       break L15;
      }
     }
     $65 = $0;
     _png_write_finish_row($65);
     STACKTOP = sp;return;
     break;
    }
    case 0:  {
     $34 = $0;
     $35 = (($34) + 320|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 7;
     $38 = ($37|0)!=(0);
     if (!($38)) {
      break L15;
     }
     $39 = $0;
     _png_write_finish_row($39);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $72 = $0;
     $73 = (($72) + 320|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 & 1;
     $76 = ($75|0)!=(0);
     if (!($76)) {
      $77 = $0;
      $78 = (($77) + 292|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79>>>0)<(2);
      if (!($80)) {
       break L15;
      }
     }
     $81 = $0;
     _png_write_finish_row($81);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $50 = $0;
     $51 = (($50) + 320|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 7;
     $54 = ($53|0)!=(4);
     if (!($54)) {
      break L15;
     }
     $55 = $0;
     _png_write_finish_row($55);
     STACKTOP = sp;return;
     break;
    }
    default: {
    }
    }
   } while(0);
  }
 }
 $88 = $0;
 $89 = (($88) + 386|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $0;
 $92 = (($91) + 348|0);
 $93 = (($92) + 8|0);
 HEAP8[$93>>0] = $90;
 $94 = $0;
 $95 = (($94) + 304|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $0;
 $98 = (($97) + 348|0);
 HEAP32[$98>>2] = $96;
 $99 = $0;
 $100 = (($99) + 391|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $0;
 $103 = (($102) + 348|0);
 $104 = (($103) + 10|0);
 HEAP8[$104>>0] = $101;
 $105 = $0;
 $106 = (($105) + 388|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $0;
 $109 = (($108) + 348|0);
 $110 = (($109) + 9|0);
 HEAP8[$110>>0] = $107;
 $111 = $0;
 $112 = (($111) + 348|0);
 $113 = (($112) + 9|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $0;
 $117 = (($116) + 348|0);
 $118 = (($117) + 10|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = Math_imul($115, $120)|0;
 $122 = $121&255;
 $123 = $0;
 $124 = (($123) + 348|0);
 $125 = (($124) + 11|0);
 HEAP8[$125>>0] = $122;
 $126 = $0;
 $127 = (($126) + 348|0);
 $128 = (($127) + 11|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129&255;
 $131 = ($130|0)>=(8);
 if ($131) {
  $132 = $0;
  $133 = (($132) + 348|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $0;
  $136 = (($135) + 348|0);
  $137 = (($136) + 11|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 >>> 3;
  $141 = Math_imul($134, $140)|0;
  $156 = $141;
 } else {
  $142 = $0;
  $143 = (($142) + 348|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $0;
  $146 = (($145) + 348|0);
  $147 = (($146) + 11|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = Math_imul($144, $149)|0;
  $151 = (($150) + 7)|0;
  $152 = $151 >>> 3;
  $156 = $152;
 }
 $153 = $0;
 $154 = (($153) + 348|0);
 $155 = (($154) + 4|0);
 HEAP32[$155>>2] = $156;
 $157 = $0;
 $158 = $0;
 $159 = (($158) + 328|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + 1|0);
 $162 = $1;
 $163 = $0;
 $164 = (($163) + 348|0);
 $165 = (($164) + 4|0);
 $166 = HEAP32[$165>>2]|0;
 (_png_memcpy_check($157,$161,$162,$166)|0);
 $167 = $0;
 $168 = (($167) + 383|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = $169&255;
 $171 = ($170|0)!=(0);
 do {
  if ($171) {
   $172 = $0;
   $173 = (($172) + 384|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = ($175|0)<(6);
   if ($176) {
    $177 = $0;
    $178 = (($177) + 204|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = $179 & 2;
    $181 = ($180|0)!=(0);
    if ($181) {
     $182 = $0;
     $183 = (($182) + 348|0);
     $184 = $0;
     $185 = (($184) + 328|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + 1|0);
     $188 = $0;
     $189 = (($188) + 384|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     _png_do_write_interlace($183,$187,$191);
     $192 = $0;
     $193 = (($192) + 348|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ($194|0)!=(0);
     if ($195) {
      break;
     }
     $196 = $0;
     _png_write_finish_row($196);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $197 = $0;
 $198 = (($197) + 204|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)!=(0);
 if ($200) {
  $201 = $0;
  _png_do_write_transformations($201);
 }
 $202 = $0;
 $203 = (($202) + 652|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $204 & 4;
 $206 = ($205|0)!=(0);
 if ($206) {
  $207 = $0;
  $208 = (($207) + 660|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&255;
  $211 = ($210|0)==(64);
  if ($211) {
   $212 = $0;
   $213 = (($212) + 348|0);
   $214 = $0;
   $215 = (($214) + 328|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + 1|0);
   _png_do_write_intrapixel($213,$217);
  }
 }
 $218 = $0;
 $219 = $0;
 $220 = (($219) + 348|0);
 _png_write_find_filter($218,$220);
 $221 = $0;
 $222 = (($221) + 504|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0|0);
 if (!($224)) {
  STACKTOP = sp;return;
 }
 $225 = $0;
 $226 = (($225) + 504|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = $0;
 $229 = $0;
 $230 = (($229) + 320|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = $0;
 $233 = (($232) + 384|0);
 $234 = HEAP8[$233>>0]|0;
 $235 = $234&255;
 FUNCTION_TABLE_viii[$227 & 63]($228,$231,$235);
 STACKTOP = sp;return;
}
function _png_write_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $ret = 0, $wrote_IDAT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 320|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (($6) + 300|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>=($8>>>0);
 if ($9) {
  STACKTOP = sp;return;
 }
 while(1) {
  $10 = $0;
  $11 = (($10) + 208|0);
  $12 = (_deflate($11,2)|0);
  $ret = $12;
  $wrote_IDAT = 0;
  $13 = $ret;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $0;
   $16 = (($15) + 208|0);
   $17 = (($16) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $20 = $0;
    $21 = $0;
    $22 = (($21) + 208|0);
    $23 = (($22) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    _png_error($20,$24);
   } else {
    $25 = $0;
    _png_error($25,12320);
   }
  }
  $26 = $0;
  $27 = (($26) + 208|0);
  $28 = (($27) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   $31 = $0;
   $32 = $0;
   $33 = (($32) + 264|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $0;
   $36 = (($35) + 268|0);
   $37 = HEAP32[$36>>2]|0;
   _png_write_IDAT($31,$34,$37);
   $38 = $0;
   $39 = (($38) + 264|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $0;
   $42 = (($41) + 208|0);
   $43 = (($42) + 12|0);
   HEAP32[$43>>2] = $40;
   $44 = $0;
   $45 = (($44) + 268|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $0;
   $48 = (($47) + 208|0);
   $49 = (($48) + 16|0);
   HEAP32[$49>>2] = $46;
   $wrote_IDAT = 1;
  }
  $50 = $wrote_IDAT;
  $51 = ($50|0)==(1);
  if (!($51)) {
   break;
  }
 }
 $52 = $0;
 $53 = (($52) + 268|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $0;
 $56 = (($55) + 208|0);
 $57 = (($56) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($54|0)!=($58|0);
 if ($59) {
  $60 = $0;
  $61 = $0;
  $62 = (($61) + 264|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = (($64) + 268|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $0;
  $68 = (($67) + 208|0);
  $69 = (($68) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($66) - ($70))|0;
  _png_write_IDAT($60,$63,$71);
  $72 = $0;
  $73 = (($72) + 264|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $0;
  $76 = (($75) + 208|0);
  $77 = (($76) + 12|0);
  HEAP32[$77>>2] = $74;
  $78 = $0;
  $79 = (($78) + 268|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $0;
  $82 = (($81) + 208|0);
  $83 = (($82) + 16|0);
  HEAP32[$83>>2] = $80;
 }
 $84 = $0;
 $85 = (($84) + 432|0);
 HEAP32[$85>>2] = 0;
 $86 = $0;
 _png_flush($86);
 STACKTOP = sp;return;
}
function _png_destroy_write_struct($png_ptr_ptr,$info_ptr_ptr) {
 $png_ptr_ptr = $png_ptr_ptr|0;
 $info_ptr_ptr = $info_ptr_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $free_fn = 0, $info_ptr = 0, $mem_ptr = 0, $png_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr_ptr;
 $1 = $info_ptr_ptr;
 $png_ptr = 0;
 $info_ptr = 0;
 $free_fn = 0;
 $mem_ptr = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $png_ptr = $5;
  $6 = $png_ptr;
  $7 = (($6) + 680|0);
  $8 = HEAP32[$7>>2]|0;
  $free_fn = $8;
  $9 = $png_ptr;
  $10 = (($9) + 672|0);
  $11 = HEAP32[$10>>2]|0;
  $mem_ptr = $11;
 }
 $12 = $png_ptr;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $png_ptr;
  $15 = (($14) + 680|0);
  $16 = HEAP32[$15>>2]|0;
  $free_fn = $16;
  $17 = $png_ptr;
  $18 = (($17) + 672|0);
  $19 = HEAP32[$18>>2]|0;
  $mem_ptr = $19;
 }
 $20 = $1;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $info_ptr = $23;
 }
 $24 = $info_ptr;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $png_ptr;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $png_ptr;
   $29 = $info_ptr;
   _png_free_data($28,$29,32767,-1);
   $30 = $png_ptr;
   $31 = (($30) + 636|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $png_ptr;
    $35 = $png_ptr;
    $36 = (($35) + 640|0);
    $37 = HEAP32[$36>>2]|0;
    _png_free($34,$37);
    $38 = $png_ptr;
    $39 = (($38) + 640|0);
    HEAP32[$39>>2] = 0;
    $40 = $png_ptr;
    $41 = (($40) + 636|0);
    HEAP32[$41>>2] = 0;
   }
  }
  $42 = $info_ptr;
  $43 = $free_fn;
  $44 = $mem_ptr;
  _png_destroy_struct_2($42,$43,$44);
  $45 = $1;
  HEAP32[$45>>2] = 0;
 }
 $46 = $png_ptr;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = $png_ptr;
 _png_write_destroy($48);
 $49 = $png_ptr;
 $50 = $free_fn;
 $51 = $mem_ptr;
 _png_destroy_struct_2($49,$50,$51);
 $52 = $0;
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function _png_write_destroy($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $error_fn = 0, $error_ptr = 0, $free_fn = 0, $tmp_jmp = 0, $warning_fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp_jmp = sp + 16|0;
 $0 = $png_ptr;
 $1 = $0;
 $2 = (($1) + 208|0);
 (_deflateEnd($2)|0);
 $3 = $0;
 $4 = $0;
 $5 = (($4) + 264|0);
 $6 = HEAP32[$5>>2]|0;
 _png_free($3,$6);
 $7 = $0;
 $8 = $0;
 $9 = (($8) + 328|0);
 $10 = HEAP32[$9>>2]|0;
 _png_free($7,$10);
 $11 = $0;
 $12 = $0;
 $13 = (($12) + 324|0);
 $14 = HEAP32[$13>>2]|0;
 _png_free($11,$14);
 $15 = $0;
 $16 = $0;
 $17 = (($16) + 332|0);
 $18 = HEAP32[$17>>2]|0;
 _png_free($15,$18);
 $19 = $0;
 $20 = $0;
 $21 = (($20) + 336|0);
 $22 = HEAP32[$21>>2]|0;
 _png_free($19,$22);
 $23 = $0;
 $24 = $0;
 $25 = (($24) + 340|0);
 $26 = HEAP32[$25>>2]|0;
 _png_free($23,$26);
 $27 = $0;
 $28 = $0;
 $29 = (($28) + 344|0);
 $30 = HEAP32[$29>>2]|0;
 _png_free($27,$30);
 $31 = $0;
 $32 = $0;
 $33 = (($32) + 620|0);
 $34 = HEAP32[$33>>2]|0;
 _png_free($31,$34);
 $35 = $0;
 $36 = $0;
 $37 = (($36) + 600|0);
 $38 = HEAP32[$37>>2]|0;
 _png_free($35,$38);
 $39 = $0;
 $40 = $0;
 $41 = (($40) + 604|0);
 $42 = HEAP32[$41>>2]|0;
 _png_free($39,$42);
 $43 = $0;
 $44 = $0;
 $45 = (($44) + 608|0);
 $46 = HEAP32[$45>>2]|0;
 _png_free($43,$46);
 $47 = $0;
 $48 = $0;
 $49 = (($48) + 612|0);
 $50 = HEAP32[$49>>2]|0;
 _png_free($47,$50);
 $51 = $0;
 $52 = $0;
 $53 = (($52) + 616|0);
 $54 = HEAP32[$53>>2]|0;
 _png_free($51,$54);
 $55 = $0;
 _memcpy(($tmp_jmp|0),($55|0),156)|0;
 $56 = $0;
 $57 = (($56) + 156|0);
 $58 = HEAP32[$57>>2]|0;
 $error_fn = $58;
 $59 = $0;
 $60 = (($59) + 160|0);
 $61 = HEAP32[$60>>2]|0;
 $warning_fn = $61;
 $62 = $0;
 $63 = (($62) + 164|0);
 $64 = HEAP32[$63>>2]|0;
 $error_ptr = $64;
 $65 = $0;
 $66 = (($65) + 680|0);
 $67 = HEAP32[$66>>2]|0;
 $free_fn = $67;
 $68 = $0;
 _memset(($68|0),0,744)|0;
 $69 = $error_fn;
 $70 = $0;
 $71 = (($70) + 156|0);
 HEAP32[$71>>2] = $69;
 $72 = $warning_fn;
 $73 = $0;
 $74 = (($73) + 160|0);
 HEAP32[$74>>2] = $72;
 $75 = $error_ptr;
 $76 = $0;
 $77 = (($76) + 164|0);
 HEAP32[$77>>2] = $75;
 $78 = $free_fn;
 $79 = $0;
 $80 = (($79) + 680|0);
 HEAP32[$80>>2] = $78;
 $81 = $0;
 _memcpy(($81|0),($tmp_jmp|0),156)|0;
 STACKTOP = sp;return;
}
function _png_do_write_transformations($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 204|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1048576;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 184|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 184|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $0;
   $17 = (($16) + 348|0);
   $18 = $0;
   $19 = (($18) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 1|0);
   FUNCTION_TABLE_viii[$14 & 63]($15,$17,$21);
  }
 }
 $22 = $0;
 $23 = (($22) + 204|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 32768;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $0;
  $28 = (($27) + 348|0);
  $29 = $0;
  $30 = (($29) + 328|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1|0);
  $33 = $0;
  $34 = (($33) + 200|0);
  $35 = HEAP32[$34>>2]|0;
  _png_do_strip_filler($28,$32,$35);
 }
 $36 = $0;
 $37 = (($36) + 204|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 65536;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $0;
  $42 = (($41) + 348|0);
  $43 = $0;
  $44 = (($43) + 328|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1|0);
  _png_do_packswap($42,$46);
 }
 $47 = $0;
 $48 = (($47) + 204|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 & 4;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $0;
  $53 = (($52) + 348|0);
  $54 = $0;
  $55 = (($54) + 328|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1|0);
  $58 = $0;
  $59 = (($58) + 387|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  _png_do_pack($53,$57,$61);
 }
 $62 = $0;
 $63 = (($62) + 204|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 16;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $0;
  $68 = (($67) + 348|0);
  $69 = $0;
  $70 = (($69) + 328|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1|0);
  _png_do_swap($68,$72);
 }
 $73 = $0;
 $74 = (($73) + 204|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 & 8;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $0;
  $79 = (($78) + 348|0);
  $80 = $0;
  $81 = (($80) + 328|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + 1|0);
  $84 = $0;
  $85 = (($84) + 477|0);
  _png_do_shift($79,$83,$85);
 }
 $86 = $0;
 $87 = (($86) + 204|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & 131072;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $0;
  $92 = (($91) + 348|0);
  $93 = $0;
  $94 = (($93) + 328|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 1|0);
  _png_do_write_swap_alpha($92,$96);
 }
 $97 = $0;
 $98 = (($97) + 204|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 524288;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $0;
  $103 = (($102) + 348|0);
  $104 = $0;
  $105 = (($104) + 328|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + 1|0);
  _png_do_write_invert_alpha($103,$107);
 }
 $108 = $0;
 $109 = (($108) + 204|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 1;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $0;
  $114 = (($113) + 348|0);
  $115 = $0;
  $116 = (($115) + 328|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + 1|0);
  _png_do_bgr($114,$118);
 }
 $119 = $0;
 $120 = (($119) + 204|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 & 32;
 $123 = ($122|0)!=(0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = $0;
 $125 = (($124) + 348|0);
 $126 = $0;
 $127 = (($126) + 328|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + 1|0);
 _png_do_invert($125,$129);
 STACKTOP = sp;return;
}
function _png_do_pack($row_info,$row,$bit_depth) {
 $row_info = $row_info|0;
 $row = $row|0;
 $bit_depth = $bit_depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp2 = 0, $dp7 = 0, $i = 0;
 var $i10 = 0, $i4 = 0, $mask = 0, $row_width = 0, $row_width11 = 0, $row_width5 = 0, $shift = 0, $shift8 = 0, $sp = 0, $sp1 = 0, $sp6 = 0, $v = 0, $v3 = 0, $v9 = 0, $value = 0, $value12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $bit_depth;
 $3 = $0;
 $4 = (($3) + 9|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(8);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = (($8) + 10|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(1);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 if ((($13|0) == 4)) {
  $82 = $0;
  $83 = HEAP32[$82>>2]|0;
  $row_width11 = $83;
  $84 = $1;
  $sp6 = $84;
  $85 = $1;
  $dp7 = $85;
  $shift8 = 4;
  $v9 = 0;
  $i10 = 0;
  while(1) {
   $86 = $i10;
   $87 = $row_width11;
   $88 = ($86>>>0)<($87>>>0);
   if (!($88)) {
    break;
   }
   $89 = $sp6;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 & 15;
   $93 = $92&255;
   $value12 = $93;
   $94 = $value12;
   $95 = $94&255;
   $96 = $shift8;
   $97 = $95 << $96;
   $98 = $v9;
   $99 = $98 | $97;
   $v9 = $99;
   $100 = $shift8;
   $101 = ($100|0)==(0);
   if ($101) {
    $shift8 = 4;
    $102 = $v9;
    $103 = $102&255;
    $104 = $dp7;
    HEAP8[$104>>0] = $103;
    $105 = $dp7;
    $106 = (($105) + 1|0);
    $dp7 = $106;
    $v9 = 0;
   } else {
    $107 = $shift8;
    $108 = (($107) - 4)|0;
    $shift8 = $108;
   }
   $109 = $sp6;
   $110 = (($109) + 1|0);
   $sp6 = $110;
   $111 = $i10;
   $112 = (($111) + 1)|0;
   $i10 = $112;
  }
  $113 = $shift8;
  $114 = ($113|0)!=(4);
  if ($114) {
   $115 = $v9;
   $116 = $115&255;
   $117 = $dp7;
   HEAP8[$117>>0] = $116;
  }
 } else if ((($13|0) == 1)) {
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $row_width = $15;
  $16 = $1;
  $sp = $16;
  $17 = $1;
  $dp = $17;
  $mask = 128;
  $v = 0;
  $i = 0;
  while(1) {
   $18 = $i;
   $19 = $row_width;
   $20 = ($18>>>0)<($19>>>0);
   if (!($20)) {
    break;
   }
   $21 = $sp;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $mask;
    $26 = $v;
    $27 = $26 | $25;
    $v = $27;
   }
   $28 = $sp;
   $29 = (($28) + 1|0);
   $sp = $29;
   $30 = $mask;
   $31 = ($30|0)>(1);
   if ($31) {
    $32 = $mask;
    $33 = $32 >> 1;
    $mask = $33;
   } else {
    $mask = 128;
    $34 = $v;
    $35 = $34&255;
    $36 = $dp;
    HEAP8[$36>>0] = $35;
    $37 = $dp;
    $38 = (($37) + 1|0);
    $dp = $38;
    $v = 0;
   }
   $39 = $i;
   $40 = (($39) + 1)|0;
   $i = $40;
  }
  $41 = $mask;
  $42 = ($41|0)!=(128);
  if ($42) {
   $43 = $v;
   $44 = $43&255;
   $45 = $dp;
   HEAP8[$45>>0] = $44;
  }
 } else if ((($13|0) == 2)) {
  $46 = $0;
  $47 = HEAP32[$46>>2]|0;
  $row_width5 = $47;
  $48 = $1;
  $sp1 = $48;
  $49 = $1;
  $dp2 = $49;
  $shift = 6;
  $v3 = 0;
  $i4 = 0;
  while(1) {
   $50 = $i4;
   $51 = $row_width5;
   $52 = ($50>>>0)<($51>>>0);
   if (!($52)) {
    break;
   }
   $53 = $sp1;
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 3;
   $57 = $56&255;
   $value = $57;
   $58 = $value;
   $59 = $58&255;
   $60 = $shift;
   $61 = $59 << $60;
   $62 = $v3;
   $63 = $62 | $61;
   $v3 = $63;
   $64 = $shift;
   $65 = ($64|0)==(0);
   if ($65) {
    $shift = 6;
    $66 = $v3;
    $67 = $66&255;
    $68 = $dp2;
    HEAP8[$68>>0] = $67;
    $69 = $dp2;
    $70 = (($69) + 1|0);
    $dp2 = $70;
    $v3 = 0;
   } else {
    $71 = $shift;
    $72 = (($71) - 2)|0;
    $shift = $72;
   }
   $73 = $sp1;
   $74 = (($73) + 1|0);
   $sp1 = $74;
   $75 = $i4;
   $76 = (($75) + 1)|0;
   $i4 = $76;
  }
  $77 = $shift;
  $78 = ($77|0)!=(6);
  if ($78) {
   $79 = $v3;
   $80 = $79&255;
   $81 = $dp2;
   HEAP8[$81>>0] = $80;
  }
 }
 $118 = $2;
 $119 = $118&255;
 $120 = $0;
 $121 = (($120) + 9|0);
 HEAP8[$121>>0] = $119;
 $122 = $2;
 $123 = $0;
 $124 = (($123) + 10|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = $125&255;
 $127 = Math_imul($122, $126)|0;
 $128 = $127&255;
 $129 = $0;
 $130 = (($129) + 11|0);
 HEAP8[$130>>0] = $128;
 $131 = $0;
 $132 = (($131) + 11|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $135 = ($134|0)>=(8);
 if ($135) {
  $136 = $0;
  $137 = HEAP32[$136>>2]|0;
  $138 = $0;
  $139 = (($138) + 11|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = $140&255;
  $142 = $141 >>> 3;
  $143 = Math_imul($137, $142)|0;
  $155 = $143;
 } else {
  $144 = $0;
  $145 = HEAP32[$144>>2]|0;
  $146 = $0;
  $147 = (($146) + 11|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = Math_imul($145, $149)|0;
  $151 = (($150) + 7)|0;
  $152 = $151 >>> 3;
  $155 = $152;
 }
 $153 = $0;
 $154 = (($153) + 4|0);
 HEAP32[$154>>2] = $155;
 STACKTOP = sp;return;
}
function _png_do_shift($row_info,$row,$bit_depth) {
 $row_info = $row_info|0;
 $row = $row|0;
 $bit_depth = $bit_depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0, $bp1 = 0, $bp5 = 0, $c = 0, $c8 = 0, $channels = 0, $i = 0, $i2 = 0, $i6 = 0, $istop = 0;
 var $istop7 = 0, $j = 0, $j10 = 0, $j4 = 0, $mask = 0, $row_bytes = 0, $shift_dec = 0, $shift_start = 0, $v = 0, $v3 = 0, $v9 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $shift_start = sp + 80|0;
 $shift_dec = sp + 64|0;
 $0 = $row_info;
 $1 = $row;
 $2 = $bit_depth;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)!=(3);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $channels = 0;
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 2;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 9|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $2;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($17) - ($20))|0;
  $22 = $channels;
  $23 = (($shift_start) + ($22<<2)|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $channels;
  $28 = (($shift_dec) + ($27<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = $channels;
  $30 = (($29) + 1)|0;
  $channels = $30;
  $31 = $0;
  $32 = (($31) + 9|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $2;
  $36 = (($35) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($34) - ($38))|0;
  $40 = $channels;
  $41 = (($shift_start) + ($40<<2)|0);
  HEAP32[$41>>2] = $39;
  $42 = $2;
  $43 = (($42) + 1|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $channels;
  $47 = (($shift_dec) + ($46<<2)|0);
  HEAP32[$47>>2] = $45;
  $48 = $channels;
  $49 = (($48) + 1)|0;
  $channels = $49;
  $50 = $0;
  $51 = (($50) + 9|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $2;
  $55 = (($54) + 2|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($53) - ($57))|0;
  $59 = $channels;
  $60 = (($shift_start) + ($59<<2)|0);
  HEAP32[$60>>2] = $58;
  $61 = $2;
  $62 = (($61) + 2|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $channels;
  $66 = (($shift_dec) + ($65<<2)|0);
  HEAP32[$66>>2] = $64;
  $67 = $channels;
  $68 = (($67) + 1)|0;
  $channels = $68;
 } else {
  $69 = $0;
  $70 = (($69) + 9|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $2;
  $74 = (($73) + 3|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (($72) - ($76))|0;
  $78 = $channels;
  $79 = (($shift_start) + ($78<<2)|0);
  HEAP32[$79>>2] = $77;
  $80 = $2;
  $81 = (($80) + 3|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $channels;
  $85 = (($shift_dec) + ($84<<2)|0);
  HEAP32[$85>>2] = $83;
  $86 = $channels;
  $87 = (($86) + 1)|0;
  $channels = $87;
 }
 $88 = $0;
 $89 = (($88) + 8|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = $91 & 4;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $0;
  $95 = (($94) + 9|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $2;
  $99 = (($98) + 4|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = (($97) - ($101))|0;
  $103 = $channels;
  $104 = (($shift_start) + ($103<<2)|0);
  HEAP32[$104>>2] = $102;
  $105 = $2;
  $106 = (($105) + 4|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $channels;
  $110 = (($shift_dec) + ($109<<2)|0);
  HEAP32[$110>>2] = $108;
  $111 = $channels;
  $112 = (($111) + 1)|0;
  $channels = $112;
 }
 $113 = $0;
 $114 = (($113) + 9|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = ($116|0)<(8);
 if ($117) {
  $118 = $1;
  $bp = $118;
  $119 = $0;
  $120 = (($119) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $row_bytes = $121;
  $122 = $2;
  $123 = (($122) + 3|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = ($125|0)==(1);
  if ($126) {
   $127 = $0;
   $128 = (($127) + 9|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = ($130|0)==(2);
   if ($131) {
    $mask = 85;
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   $132 = $0;
   $133 = (($132) + 9|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = ($135|0)==(4);
   if ($136) {
    $137 = $2;
    $138 = (($137) + 3|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = ($140|0)==(3);
    if ($141) {
     $mask = 17;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    $mask = -1;
   }
  }
  $i = 0;
  while(1) {
   $142 = $i;
   $143 = $row_bytes;
   $144 = ($142>>>0)<($143>>>0);
   if (!($144)) {
    break;
   }
   $145 = $bp;
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $v = $147;
   $148 = $bp;
   HEAP8[$148>>0] = 0;
   $149 = HEAP32[$shift_start>>2]|0;
   $j = $149;
   while(1) {
    $150 = $j;
    $151 = HEAP32[$shift_dec>>2]|0;
    $152 = (0 - ($151))|0;
    $153 = ($150|0)>($152|0);
    if (!($153)) {
     break;
    }
    $154 = $j;
    $155 = ($154|0)>(0);
    if ($155) {
     $156 = $v;
     $157 = $156&65535;
     $158 = $j;
     $159 = $157 << $158;
     $160 = $159 & 255;
     $161 = $160&255;
     $162 = $161&255;
     $163 = $bp;
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $165 | $162;
     $167 = $166&255;
     HEAP8[$163>>0] = $167;
    } else {
     $168 = $v;
     $169 = $168&65535;
     $170 = $j;
     $171 = (0 - ($170))|0;
     $172 = $169 >> $171;
     $173 = $mask;
     $174 = $173&255;
     $175 = $172 & $174;
     $176 = $175&255;
     $177 = $176&255;
     $178 = $bp;
     $179 = HEAP8[$178>>0]|0;
     $180 = $179&255;
     $181 = $180 | $177;
     $182 = $181&255;
     HEAP8[$178>>0] = $182;
    }
    $183 = HEAP32[$shift_dec>>2]|0;
    $184 = $j;
    $185 = (($184) - ($183))|0;
    $j = $185;
   }
   $186 = $i;
   $187 = (($186) + 1)|0;
   $i = $187;
   $188 = $bp;
   $189 = (($188) + 1|0);
   $bp = $189;
  }
 } else {
  $190 = $0;
  $191 = (($190) + 9|0);
  $192 = HEAP8[$191>>0]|0;
  $193 = $192&255;
  $194 = ($193|0)==(8);
  if ($194) {
   $195 = $1;
   $bp1 = $195;
   $196 = $channels;
   $197 = $0;
   $198 = HEAP32[$197>>2]|0;
   $199 = Math_imul($196, $198)|0;
   $istop = $199;
   $i2 = 0;
   while(1) {
    $200 = $i2;
    $201 = $istop;
    $202 = ($200>>>0)<($201>>>0);
    if (!($202)) {
     break;
    }
    $203 = $i2;
    $204 = $channels;
    $205 = (($203>>>0) % ($204>>>0))&-1;
    $c = $205;
    $206 = $bp1;
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $v3 = $208;
    $209 = $bp1;
    HEAP8[$209>>0] = 0;
    $210 = $c;
    $211 = (($shift_start) + ($210<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $j4 = $212;
    while(1) {
     $213 = $j4;
     $214 = $c;
     $215 = (($shift_dec) + ($214<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = (0 - ($216))|0;
     $218 = ($213|0)>($217|0);
     if (!($218)) {
      break;
     }
     $219 = $j4;
     $220 = ($219|0)>(0);
     if ($220) {
      $221 = $v3;
      $222 = $221&65535;
      $223 = $j4;
      $224 = $222 << $223;
      $225 = $224 & 255;
      $226 = $225&255;
      $227 = $226&255;
      $228 = $bp1;
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $231 = $230 | $227;
      $232 = $231&255;
      HEAP8[$228>>0] = $232;
     } else {
      $233 = $v3;
      $234 = $233&65535;
      $235 = $j4;
      $236 = (0 - ($235))|0;
      $237 = $234 >> $236;
      $238 = $237 & 255;
      $239 = $238&255;
      $240 = $239&255;
      $241 = $bp1;
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $244 = $243 | $240;
      $245 = $244&255;
      HEAP8[$241>>0] = $245;
     }
     $246 = $c;
     $247 = (($shift_dec) + ($246<<2)|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = $j4;
     $250 = (($249) - ($248))|0;
     $j4 = $250;
    }
    $251 = $i2;
    $252 = (($251) + 1)|0;
    $i2 = $252;
    $253 = $bp1;
    $254 = (($253) + 1|0);
    $bp1 = $254;
   }
  } else {
   $255 = $channels;
   $256 = $0;
   $257 = HEAP32[$256>>2]|0;
   $258 = Math_imul($255, $257)|0;
   $istop7 = $258;
   $259 = $1;
   $bp5 = $259;
   $i6 = 0;
   while(1) {
    $260 = $i6;
    $261 = $istop7;
    $262 = ($260>>>0)<($261>>>0);
    if (!($262)) {
     break;
    }
    $263 = $i6;
    $264 = $channels;
    $265 = (($263>>>0) % ($264>>>0))&-1;
    $c8 = $265;
    $266 = $bp5;
    $267 = HEAP8[$266>>0]|0;
    $268 = $267&255;
    $269 = $268&65535;
    $270 = $269 << 8;
    $271 = $bp5;
    $272 = (($271) + 1|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = (($270) + ($274))|0;
    $276 = $275&65535;
    $v9 = $276;
    $value = 0;
    $277 = $c8;
    $278 = (($shift_start) + ($277<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $j10 = $279;
    while(1) {
     $280 = $j10;
     $281 = $c8;
     $282 = (($shift_dec) + ($281<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = (0 - ($283))|0;
     $285 = ($280|0)>($284|0);
     if (!($285)) {
      break;
     }
     $286 = $j10;
     $287 = ($286|0)>(0);
     if ($287) {
      $288 = $v9;
      $289 = $288&65535;
      $290 = $j10;
      $291 = $289 << $290;
      $292 = $291 & 65535;
      $293 = $292&65535;
      $294 = $293&65535;
      $295 = $value;
      $296 = $295&65535;
      $297 = $296 | $294;
      $298 = $297&65535;
      $value = $298;
     } else {
      $299 = $v9;
      $300 = $299&65535;
      $301 = $j10;
      $302 = (0 - ($301))|0;
      $303 = $300 >> $302;
      $304 = $303 & 65535;
      $305 = $304&65535;
      $306 = $305&65535;
      $307 = $value;
      $308 = $307&65535;
      $309 = $308 | $306;
      $310 = $309&65535;
      $value = $310;
     }
     $311 = $c8;
     $312 = (($shift_dec) + ($311<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $j10;
     $315 = (($314) - ($313))|0;
     $j10 = $315;
    }
    $316 = $value;
    $317 = $316&65535;
    $318 = $317 >> 8;
    $319 = $318&255;
    $320 = $bp5;
    $321 = (($320) + 1|0);
    $bp5 = $321;
    HEAP8[$320>>0] = $319;
    $322 = $value;
    $323 = $322&65535;
    $324 = $323 & 255;
    $325 = $324&255;
    $326 = $bp5;
    $327 = (($326) + 1|0);
    $bp5 = $327;
    HEAP8[$326>>0] = $325;
    $328 = $i6;
    $329 = (($328) + 1)|0;
    $i6 = $329;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_do_write_swap_alpha($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp12 = 0, $dp2 = 0, $dp7 = 0, $i = 0, $i13 = 0;
 var $i3 = 0, $i8 = 0, $row_width = 0, $row_width14 = 0, $row_width4 = 0, $row_width9 = 0, $save = 0, $save10 = 0, $save15 = 0, $save5 = 0, $sp = 0, $sp1 = 0, $sp11 = 0, $sp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save5 = sp + 76|0;
 $save15 = sp + 72|0;
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(6);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 9|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(8);
  if ($11) {
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $row_width = $13;
   $i = 0;
   $14 = $1;
   $dp = $14;
   $sp = $14;
   while(1) {
    $15 = $i;
    $16 = $row_width;
    $17 = ($15>>>0)<($16>>>0);
    if (!($17)) {
     break;
    }
    $18 = $sp;
    $19 = (($18) + 1|0);
    $sp = $19;
    $20 = HEAP8[$18>>0]|0;
    $save = $20;
    $21 = $sp;
    $22 = (($21) + 1|0);
    $sp = $22;
    $23 = HEAP8[$21>>0]|0;
    $24 = $dp;
    $25 = (($24) + 1|0);
    $dp = $25;
    HEAP8[$24>>0] = $23;
    $26 = $sp;
    $27 = (($26) + 1|0);
    $sp = $27;
    $28 = HEAP8[$26>>0]|0;
    $29 = $dp;
    $30 = (($29) + 1|0);
    $dp = $30;
    HEAP8[$29>>0] = $28;
    $31 = $sp;
    $32 = (($31) + 1|0);
    $sp = $32;
    $33 = HEAP8[$31>>0]|0;
    $34 = $dp;
    $35 = (($34) + 1|0);
    $dp = $35;
    HEAP8[$34>>0] = $33;
    $36 = $save;
    $37 = $dp;
    $38 = (($37) + 1|0);
    $dp = $38;
    HEAP8[$37>>0] = $36;
    $39 = $i;
    $40 = (($39) + 1)|0;
    $i = $40;
   }
  } else {
   $41 = $0;
   $42 = HEAP32[$41>>2]|0;
   $row_width4 = $42;
   $i3 = 0;
   $43 = $1;
   $dp2 = $43;
   $sp1 = $43;
   while(1) {
    $44 = $i3;
    $45 = $row_width4;
    $46 = ($44>>>0)<($45>>>0);
    if (!($46)) {
     break;
    }
    $47 = $sp1;
    $48 = (($47) + 1|0);
    $sp1 = $48;
    $49 = HEAP8[$47>>0]|0;
    HEAP8[$save5>>0] = $49;
    $50 = $sp1;
    $51 = (($50) + 1|0);
    $sp1 = $51;
    $52 = HEAP8[$50>>0]|0;
    $53 = (($save5) + 1|0);
    HEAP8[$53>>0] = $52;
    $54 = $sp1;
    $55 = (($54) + 1|0);
    $sp1 = $55;
    $56 = HEAP8[$54>>0]|0;
    $57 = $dp2;
    $58 = (($57) + 1|0);
    $dp2 = $58;
    HEAP8[$57>>0] = $56;
    $59 = $sp1;
    $60 = (($59) + 1|0);
    $sp1 = $60;
    $61 = HEAP8[$59>>0]|0;
    $62 = $dp2;
    $63 = (($62) + 1|0);
    $dp2 = $63;
    HEAP8[$62>>0] = $61;
    $64 = $sp1;
    $65 = (($64) + 1|0);
    $sp1 = $65;
    $66 = HEAP8[$64>>0]|0;
    $67 = $dp2;
    $68 = (($67) + 1|0);
    $dp2 = $68;
    HEAP8[$67>>0] = $66;
    $69 = $sp1;
    $70 = (($69) + 1|0);
    $sp1 = $70;
    $71 = HEAP8[$69>>0]|0;
    $72 = $dp2;
    $73 = (($72) + 1|0);
    $dp2 = $73;
    HEAP8[$72>>0] = $71;
    $74 = $sp1;
    $75 = (($74) + 1|0);
    $sp1 = $75;
    $76 = HEAP8[$74>>0]|0;
    $77 = $dp2;
    $78 = (($77) + 1|0);
    $dp2 = $78;
    HEAP8[$77>>0] = $76;
    $79 = $sp1;
    $80 = (($79) + 1|0);
    $sp1 = $80;
    $81 = HEAP8[$79>>0]|0;
    $82 = $dp2;
    $83 = (($82) + 1|0);
    $dp2 = $83;
    HEAP8[$82>>0] = $81;
    $84 = HEAP8[$save5>>0]|0;
    $85 = $dp2;
    $86 = (($85) + 1|0);
    $dp2 = $86;
    HEAP8[$85>>0] = $84;
    $87 = (($save5) + 1|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $dp2;
    $90 = (($89) + 1|0);
    $dp2 = $90;
    HEAP8[$89>>0] = $88;
    $91 = $i3;
    $92 = (($91) + 1)|0;
    $i3 = $92;
   }
  }
  STACKTOP = sp;return;
 }
 $93 = $0;
 $94 = (($93) + 8|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = ($96|0)==(4);
 if ($97) {
  $98 = $0;
  $99 = (($98) + 9|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = ($101|0)==(8);
  if ($102) {
   $103 = $0;
   $104 = HEAP32[$103>>2]|0;
   $row_width9 = $104;
   $i8 = 0;
   $105 = $1;
   $dp7 = $105;
   $sp6 = $105;
   while(1) {
    $106 = $i8;
    $107 = $row_width9;
    $108 = ($106>>>0)<($107>>>0);
    if (!($108)) {
     break;
    }
    $109 = $sp6;
    $110 = (($109) + 1|0);
    $sp6 = $110;
    $111 = HEAP8[$109>>0]|0;
    $save10 = $111;
    $112 = $sp6;
    $113 = (($112) + 1|0);
    $sp6 = $113;
    $114 = HEAP8[$112>>0]|0;
    $115 = $dp7;
    $116 = (($115) + 1|0);
    $dp7 = $116;
    HEAP8[$115>>0] = $114;
    $117 = $save10;
    $118 = $dp7;
    $119 = (($118) + 1|0);
    $dp7 = $119;
    HEAP8[$118>>0] = $117;
    $120 = $i8;
    $121 = (($120) + 1)|0;
    $i8 = $121;
   }
  } else {
   $122 = $0;
   $123 = HEAP32[$122>>2]|0;
   $row_width14 = $123;
   $i13 = 0;
   $124 = $1;
   $dp12 = $124;
   $sp11 = $124;
   while(1) {
    $125 = $i13;
    $126 = $row_width14;
    $127 = ($125>>>0)<($126>>>0);
    if (!($127)) {
     break;
    }
    $128 = $sp11;
    $129 = (($128) + 1|0);
    $sp11 = $129;
    $130 = HEAP8[$128>>0]|0;
    HEAP8[$save15>>0] = $130;
    $131 = $sp11;
    $132 = (($131) + 1|0);
    $sp11 = $132;
    $133 = HEAP8[$131>>0]|0;
    $134 = (($save15) + 1|0);
    HEAP8[$134>>0] = $133;
    $135 = $sp11;
    $136 = (($135) + 1|0);
    $sp11 = $136;
    $137 = HEAP8[$135>>0]|0;
    $138 = $dp12;
    $139 = (($138) + 1|0);
    $dp12 = $139;
    HEAP8[$138>>0] = $137;
    $140 = $sp11;
    $141 = (($140) + 1|0);
    $sp11 = $141;
    $142 = HEAP8[$140>>0]|0;
    $143 = $dp12;
    $144 = (($143) + 1|0);
    $dp12 = $144;
    HEAP8[$143>>0] = $142;
    $145 = HEAP8[$save15>>0]|0;
    $146 = $dp12;
    $147 = (($146) + 1|0);
    $dp12 = $147;
    HEAP8[$146>>0] = $145;
    $148 = (($save15) + 1|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $dp12;
    $151 = (($150) + 1|0);
    $dp12 = $151;
    HEAP8[$150>>0] = $149;
    $152 = $i13;
    $153 = (($152) + 1)|0;
    $i13 = $153;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_do_write_invert_alpha($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp10 = 0, $dp2 = 0, $dp6 = 0;
 var $i = 0, $i11 = 0, $i3 = 0, $i7 = 0, $row_width = 0, $row_width12 = 0, $row_width4 = 0, $row_width8 = 0, $sp = 0, $sp1 = 0, $sp5 = 0, $sp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(6);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 9|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(8);
  if ($11) {
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $row_width = $13;
   $i = 0;
   $14 = $1;
   $dp = $14;
   $sp = $14;
   while(1) {
    $15 = $i;
    $16 = $row_width;
    $17 = ($15>>>0)<($16>>>0);
    if (!($17)) {
     break;
    }
    $18 = $sp;
    $19 = (($18) + 3|0);
    $sp = $19;
    $20 = $sp;
    $dp = $20;
    $21 = $sp;
    $22 = (($21) + 1|0);
    $sp = $22;
    $23 = HEAP8[$21>>0]|0;
    $24 = $23&255;
    $25 = (255 - ($24))|0;
    $26 = $25&255;
    $27 = $dp;
    $28 = (($27) + 1|0);
    $dp = $28;
    HEAP8[$27>>0] = $26;
    $29 = $i;
    $30 = (($29) + 1)|0;
    $i = $30;
   }
  } else {
   $31 = $0;
   $32 = HEAP32[$31>>2]|0;
   $row_width4 = $32;
   $i3 = 0;
   $33 = $1;
   $dp2 = $33;
   $sp1 = $33;
   while(1) {
    $34 = $i3;
    $35 = $row_width4;
    $36 = ($34>>>0)<($35>>>0);
    if (!($36)) {
     break;
    }
    $37 = $sp1;
    $38 = (($37) + 6|0);
    $sp1 = $38;
    $39 = $sp1;
    $dp2 = $39;
    $40 = $sp1;
    $41 = (($40) + 1|0);
    $sp1 = $41;
    $42 = HEAP8[$40>>0]|0;
    $43 = $42&255;
    $44 = (255 - ($43))|0;
    $45 = $44&255;
    $46 = $dp2;
    $47 = (($46) + 1|0);
    $dp2 = $47;
    HEAP8[$46>>0] = $45;
    $48 = $sp1;
    $49 = (($48) + 1|0);
    $sp1 = $49;
    $50 = HEAP8[$48>>0]|0;
    $51 = $50&255;
    $52 = (255 - ($51))|0;
    $53 = $52&255;
    $54 = $dp2;
    $55 = (($54) + 1|0);
    $dp2 = $55;
    HEAP8[$54>>0] = $53;
    $56 = $i3;
    $57 = (($56) + 1)|0;
    $i3 = $57;
   }
  }
  STACKTOP = sp;return;
 }
 $58 = $0;
 $59 = (($58) + 8|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ($61|0)==(4);
 if ($62) {
  $63 = $0;
  $64 = (($63) + 9|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($66|0)==(8);
  if ($67) {
   $68 = $0;
   $69 = HEAP32[$68>>2]|0;
   $row_width8 = $69;
   $i7 = 0;
   $70 = $1;
   $dp6 = $70;
   $sp5 = $70;
   while(1) {
    $71 = $i7;
    $72 = $row_width8;
    $73 = ($71>>>0)<($72>>>0);
    if (!($73)) {
     break;
    }
    $74 = $sp5;
    $75 = (($74) + 1|0);
    $sp5 = $75;
    $76 = HEAP8[$74>>0]|0;
    $77 = $dp6;
    $78 = (($77) + 1|0);
    $dp6 = $78;
    HEAP8[$77>>0] = $76;
    $79 = $sp5;
    $80 = (($79) + 1|0);
    $sp5 = $80;
    $81 = HEAP8[$79>>0]|0;
    $82 = $81&255;
    $83 = (255 - ($82))|0;
    $84 = $83&255;
    $85 = $dp6;
    $86 = (($85) + 1|0);
    $dp6 = $86;
    HEAP8[$85>>0] = $84;
    $87 = $i7;
    $88 = (($87) + 1)|0;
    $i7 = $88;
   }
  } else {
   $89 = $0;
   $90 = HEAP32[$89>>2]|0;
   $row_width12 = $90;
   $i11 = 0;
   $91 = $1;
   $dp10 = $91;
   $sp9 = $91;
   while(1) {
    $92 = $i11;
    $93 = $row_width12;
    $94 = ($92>>>0)<($93>>>0);
    if (!($94)) {
     break;
    }
    $95 = $sp9;
    $96 = (($95) + 2|0);
    $sp9 = $96;
    $97 = $sp9;
    $dp10 = $97;
    $98 = $sp9;
    $99 = (($98) + 1|0);
    $sp9 = $99;
    $100 = HEAP8[$98>>0]|0;
    $101 = $100&255;
    $102 = (255 - ($101))|0;
    $103 = $102&255;
    $104 = $dp10;
    $105 = (($104) + 1|0);
    $dp10 = $105;
    HEAP8[$104>>0] = $103;
    $106 = $sp9;
    $107 = (($106) + 1|0);
    $sp9 = $107;
    $108 = HEAP8[$106>>0]|0;
    $109 = $108&255;
    $110 = (255 - ($109))|0;
    $111 = $110&255;
    $112 = $dp10;
    $113 = (($112) + 1|0);
    $dp10 = $113;
    HEAP8[$112>>0] = $111;
    $114 = $i11;
    $115 = (($114) + 1)|0;
    $i11 = $115;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_do_write_intrapixel($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $blue = 0, $bytes_per_pixel = 0, $i = 0, $i2 = 0, $red = 0, $row_width = 0, $rp = 0, $rp1 = 0, $s0 = 0, $s1 = 0, $s2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $row_width = $9;
 $10 = $0;
 $11 = (($10) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(8);
 if ($14) {
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(2);
  do {
   if ($19) {
    $bytes_per_pixel = 3;
   } else {
    $20 = $0;
    $21 = (($20) + 8|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)==(6);
    if ($24) {
     $bytes_per_pixel = 4;
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $i = 0;
  $25 = $1;
  $rp = $25;
  while(1) {
   $26 = $i;
   $27 = $row_width;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $rp;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $rp;
   $33 = (($32) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = (($31) - ($35))|0;
   $37 = $36 & 255;
   $38 = $37&255;
   $39 = $rp;
   HEAP8[$39>>0] = $38;
   $40 = $rp;
   $41 = (($40) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $rp;
   $45 = (($44) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = (($43) - ($47))|0;
   $49 = $48 & 255;
   $50 = $49&255;
   $51 = $rp;
   $52 = (($51) + 2|0);
   HEAP8[$52>>0] = $50;
   $53 = $i;
   $54 = (($53) + 1)|0;
   $i = $54;
   $55 = $bytes_per_pixel;
   $56 = $rp;
   $57 = (($56) + ($55)|0);
   $rp = $57;
  }
 } else {
  $58 = $0;
  $59 = (($58) + 9|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($61|0)==(16);
  if ($62) {
   $63 = $0;
   $64 = (($63) + 8|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = ($66|0)==(2);
   do {
    if ($67) {
     $bytes_per_pixel = 6;
    } else {
     $68 = $0;
     $69 = (($68) + 8|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = ($71|0)==(6);
     if ($72) {
      $bytes_per_pixel = 8;
      break;
     } else {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $i2 = 0;
   $73 = $1;
   $rp1 = $73;
   while(1) {
    $74 = $i2;
    $75 = $row_width;
    $76 = ($74>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = $rp1;
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = $79 << 8;
    $81 = $rp1;
    $82 = (($81) + 1|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $80 | $84;
    $s0 = $85;
    $86 = $rp1;
    $87 = (($86) + 2|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = $89 << 8;
    $91 = $rp1;
    $92 = (($91) + 3|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $90 | $94;
    $s1 = $95;
    $96 = $rp1;
    $97 = (($96) + 4|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 << 8;
    $101 = $rp1;
    $102 = (($101) + 5|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $100 | $104;
    $s2 = $105;
    $106 = $s0;
    $107 = $s1;
    $108 = (($106) - ($107))|0;
    $109 = $108 & 65535;
    $red = $109;
    $110 = $s2;
    $111 = $s1;
    $112 = (($110) - ($111))|0;
    $113 = $112 & 65535;
    $blue = $113;
    $114 = $red;
    $115 = $114 >>> 8;
    $116 = $115 & 255;
    $117 = $116&255;
    $118 = $rp1;
    HEAP8[$118>>0] = $117;
    $119 = $red;
    $120 = $119 & 255;
    $121 = $120&255;
    $122 = $rp1;
    $123 = (($122) + 1|0);
    HEAP8[$123>>0] = $121;
    $124 = $blue;
    $125 = $124 >>> 8;
    $126 = $125 & 255;
    $127 = $126&255;
    $128 = $rp1;
    $129 = (($128) + 4|0);
    HEAP8[$129>>0] = $127;
    $130 = $blue;
    $131 = $130 & 255;
    $132 = $131&255;
    $133 = $rp1;
    $134 = (($133) + 5|0);
    HEAP8[$134>>0] = $132;
    $135 = $i2;
    $136 = (($135) + 1)|0;
    $i2 = $136;
    $137 = $bytes_per_pixel;
    $138 = $rp1;
    $139 = (($138) + ($137)|0);
    $rp1 = $139;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_create_struct($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = (_png_create_struct_2($1,0,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _png_create_struct_2($type,$malloc_fn,$mem_ptr) {
 $type = $type|0;
 $malloc_fn = $malloc_fn|0;
 $mem_ptr = $mem_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy_struct = 0, $png_ptr = 0, $size = 0, $struct_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy_struct = sp + 8|0;
 $1 = $type;
 $2 = $malloc_fn;
 $3 = $mem_ptr;
 $4 = $1;
 $5 = ($4|0)==(2);
 do {
  if ($5) {
   $size = 288;
  } else {
   $6 = $1;
   $7 = ($6|0)==(1);
   if ($7) {
    $size = 744;
    break;
   } else {
    $0 = 0;
    $29 = $0;
    STACKTOP = sp;return ($29|0);
   }
  }
 } while(0);
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $png_ptr = $dummy_struct;
  $10 = $3;
  $11 = $png_ptr;
  $12 = (($11) + 672|0);
  HEAP32[$12>>2] = $10;
  $13 = $2;
  $14 = $png_ptr;
  $15 = $size;
  $16 = (FUNCTION_TABLE_iii[$13 & 63]($14,$15)|0);
  $struct_ptr = $16;
  $17 = $struct_ptr;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $struct_ptr;
   $20 = $size;
   _memset(($19|0),0,($20|0))|0;
  }
  $21 = $struct_ptr;
  $0 = $21;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $22 = $size;
  $23 = (_malloc($22)|0);
  $struct_ptr = $23;
  $24 = $struct_ptr;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $struct_ptr;
   $27 = $size;
   _memset(($26|0),0,($27|0))|0;
  }
  $28 = $struct_ptr;
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _png_destroy_struct($struct_ptr) {
 $struct_ptr = $struct_ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $struct_ptr;
 $1 = $0;
 _png_destroy_struct_2($1,0,0);
 STACKTOP = sp;return;
}
function _png_destroy_struct_2($struct_ptr,$free_fn,$mem_ptr) {
 $struct_ptr = $struct_ptr|0;
 $free_fn = $free_fn|0;
 $mem_ptr = $mem_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy_struct = 0, $png_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy_struct = sp + 8|0;
 $0 = $struct_ptr;
 $1 = $free_fn;
 $2 = $mem_ptr;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $png_ptr = $dummy_struct;
  $7 = $2;
  $8 = $png_ptr;
  $9 = (($8) + 672|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = $png_ptr;
  $12 = $0;
  FUNCTION_TABLE_vii[$10 & 63]($11,$12);
  STACKTOP = sp;return;
 } else {
  $13 = $0;
  _free($13);
  STACKTOP = sp;return;
 }
}
function _png_calloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = (_png_malloc($2,$3)|0);
 $ret = $4;
 $5 = $ret;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $ret;
  STACKTOP = sp;return ($9|0);
 }
 $7 = $ret;
 $8 = $1;
 _memset(($7|0),0,($8|0))|0;
 $9 = $ret;
 STACKTOP = sp;return ($9|0);
}
function _png_malloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = $1;
   $8 = (($7) + 676|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $1;
    $12 = (($11) + 676|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = $2;
    $16 = (FUNCTION_TABLE_iii[$13 & 63]($14,$15)|0);
    $ret = $16;
   } else {
    $17 = $1;
    $18 = $2;
    $19 = (_png_malloc_default($17,$18)|0);
    $ret = $19;
   }
   $20 = $ret;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = $1;
    $23 = (($22) + 200|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & 1048576;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = $1;
     _png_error($27,9456);
    }
   }
   $28 = $ret;
   $0 = $28;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _png_malloc_default($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = $2;
   $8 = $2;
   $9 = ($7|0)!=($8|0);
   if ($9) {
    $ret = 0;
   } else {
    $10 = $2;
    $11 = (_malloc($10)|0);
    $ret = $11;
   }
   $12 = $ret;
   $0 = $12;
   $13 = $0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $0 = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _png_free($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = $0;
   $7 = (($6) + 680|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $0;
    $11 = (($10) + 680|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $0;
    $14 = $1;
    FUNCTION_TABLE_vii[$12 & 63]($13,$14);
    STACKTOP = sp;return;
   } else {
    $15 = $0;
    $16 = $1;
    _png_free_default($15,$16);
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_free_default($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = $1;
   _free($6);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _png_malloc_warn($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ptr = 0, $save_flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $5 = $1;
  $6 = (($5) + 200|0);
  $7 = HEAP32[$6>>2]|0;
  $save_flags = $7;
  $8 = $1;
  $9 = (($8) + 200|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 | 1048576;
  HEAP32[$9>>2] = $11;
  $12 = $1;
  $13 = $2;
  $14 = (_png_malloc($12,$13)|0);
  $ptr = $14;
  $15 = $save_flags;
  $16 = $1;
  $17 = (($16) + 200|0);
  HEAP32[$17>>2] = $15;
  $18 = $ptr;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _png_memcpy_check($png_ptr,$s1,$s2,$length) {
 $png_ptr = $png_ptr|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $s1;
 $2 = $s2;
 $3 = $length;
 $4 = $3;
 $size = $4;
 $5 = $size;
 $6 = $3;
 $7 = ($5|0)!=($6|0);
 if ($7) {
  $8 = $0;
  _png_error($8,9472);
 }
 $9 = $1;
 $10 = $2;
 $11 = $size;
 _memcpy(($9|0),($10|0),($11|0))|0;
 STACKTOP = sp;return ($9|0);
}
function _png_set_mem_fn($png_ptr,$mem_ptr,$malloc_fn,$free_fn) {
 $png_ptr = $png_ptr|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $mem_ptr;
 $2 = $malloc_fn;
 $3 = $free_fn;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 672|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = (($10) + 676|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $0;
 $14 = (($13) + 680|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _png_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $msg = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp + 16|0;
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 200|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 786432;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $1;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(35);
   if ($12) {
    $offset = 1;
    while(1) {
     $13 = $offset;
     $14 = ($13|0)<(15);
     if (!($14)) {
      break;
     }
     $15 = $offset;
     $16 = $1;
     $17 = (($16) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(32);
     if ($20) {
      label = 7;
      break;
     }
     $21 = $offset;
     $22 = (($21) + 1)|0;
     $offset = $22;
    }
    if ((label|0) == 7) {
    }
    $23 = $0;
    $24 = (($23) + 200|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 524288;
    $27 = ($26|0)!=(0);
    if ($27) {
     $i = 0;
     while(1) {
      $28 = $i;
      $29 = $offset;
      $30 = (($29) - 1)|0;
      $31 = ($28|0)<($30|0);
      if (!($31)) {
       break;
      }
      $32 = $i;
      $33 = (($32) + 1)|0;
      $34 = $1;
      $35 = (($34) + ($33)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $i;
      $38 = (($msg) + ($37)|0);
      HEAP8[$38>>0] = $36;
      $39 = $i;
      $40 = (($39) + 1)|0;
      $i = $40;
     }
     $41 = $i;
     $42 = (($41) - 1)|0;
     $43 = (($msg) + ($42)|0);
     HEAP8[$43>>0] = 0;
     $1 = $msg;
    } else {
     $44 = $offset;
     $45 = $1;
     $46 = (($45) + ($44)|0);
     $1 = $46;
    }
   } else {
    $47 = $0;
    $48 = (($47) + 200|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 524288;
    $51 = ($50|0)!=(0);
    if ($51) {
     HEAP8[$msg>>0] = 48;
     $52 = (($msg) + 1|0);
     HEAP8[$52>>0] = 0;
     $1 = $msg;
    }
   }
  }
 }
 $53 = $0;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  $64 = $0;
  $65 = $1;
  _png_default_error($64,$65);
  STACKTOP = sp;return;
 }
 $55 = $0;
 $56 = (($55) + 156|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  $64 = $0;
  $65 = $1;
  _png_default_error($64,$65);
  STACKTOP = sp;return;
 }
 $59 = $0;
 $60 = (($59) + 156|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $0;
 $63 = $1;
 FUNCTION_TABLE_vii[$61 & 63]($62,$63);
 $64 = $0;
 $65 = $1;
 _png_default_error($64,$65);
 STACKTOP = sp;return;
}
function _png_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $warning_message;
 $offset = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 200|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 786432;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $1;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(35);
   if ($12) {
    $offset = 1;
    while(1) {
     $13 = $offset;
     $14 = ($13|0)<(15);
     if (!($14)) {
      break;
     }
     $15 = $offset;
     $16 = $1;
     $17 = (($16) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(32);
     if ($20) {
      label = 7;
      break;
     }
     $21 = $offset;
     $22 = (($21) + 1)|0;
     $offset = $22;
    }
    if ((label|0) == 7) {
    }
   }
  }
 }
 $23 = $0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $0;
  $26 = (($25) + 160|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $0;
   $30 = (($29) + 160|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   $33 = $1;
   $34 = $offset;
   $35 = (($33) + ($34)|0);
   FUNCTION_TABLE_vii[$31 & 63]($32,$35);
   STACKTOP = sp;return;
  }
 }
 $36 = $0;
 $37 = $1;
 $38 = $offset;
 $39 = (($37) + ($38)|0);
 _png_default_warning($36,$39);
 STACKTOP = sp;return;
}
function _png_set_error_fn($png_ptr,$error_ptr,$error_fn,$warning_fn) {
 $png_ptr = $png_ptr|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warning_fn = $warning_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_ptr;
 $2 = $error_fn;
 $3 = $warning_fn;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $6 = $1;
  $7 = $0;
  $8 = (($7) + 164|0);
  HEAP32[$8>>2] = $6;
  $9 = $2;
  $10 = $0;
  $11 = (($10) + 156|0);
  HEAP32[$11>>2] = $9;
  $12 = $3;
  $13 = $0;
  $14 = (($13) + 160|0);
  HEAP32[$14>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _png_default_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error_number = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $error_number = sp + 56|0;
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(35);
 if ($5) {
  $offset = 0;
  while(1) {
   $6 = $offset;
   $7 = ($6|0)<(15);
   if (!($7)) {
    break;
   }
   $8 = $offset;
   $9 = (($8) + 1)|0;
   $10 = $1;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $offset;
   $14 = (($error_number) + ($13)|0);
   HEAP8[$14>>0] = $12;
   $15 = $offset;
   $16 = $1;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(32);
   if ($20) {
    label = 5;
    break;
   }
   $21 = $offset;
   $22 = (($21) + 1)|0;
   $offset = $22;
  }
  if ((label|0) == 5) {
  }
  $23 = $offset;
  $24 = ($23|0)>(1);
  if ($24) {
   $25 = $offset;
   $26 = ($25|0)<(15);
   if ($26) {
    $27 = $offset;
    $28 = (($27) - 1)|0;
    $29 = (($error_number) + ($28)|0);
    HEAP8[$29>>0] = 0;
    $30 = HEAP32[_stderr>>2]|0;
    $31 = $1;
    $32 = $offset;
    $33 = (($31) + ($32)|0);
    $34 = (($33) + 1|0);
    HEAP32[$vararg_buffer>>2] = $error_number;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $34;
    (_fprintf(($30|0),(9560|0),($vararg_buffer|0))|0);
    $35 = HEAP32[_stderr>>2]|0;
    (_fprintf(($35|0),(27712|0),($vararg_buffer2|0))|0);
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   $36 = HEAP32[_stderr>>2]|0;
   $37 = $1;
   $38 = $offset;
   HEAP32[$vararg_buffer4>>2] = $37;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $38;
   (_fprintf(($36|0),(9584|0),($vararg_buffer4|0))|0);
   $39 = HEAP32[_stderr>>2]|0;
   (_fprintf(($39|0),(27712|0),($vararg_buffer8|0))|0);
  }
 } else {
  $40 = HEAP32[_stderr>>2]|0;
  $41 = $1;
  HEAP32[$vararg_buffer10>>2] = $41;
  (_fprintf(($40|0),(9616|0),($vararg_buffer10|0))|0);
  $42 = HEAP32[_stderr>>2]|0;
  (_fprintf(($42|0),(27712|0),($vararg_buffer13|0))|0);
 }
 $43 = $0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $0;
  _longjmp(($45|0),1);
  // unreachable;
 } else {
  _abort();
  // unreachable;
 }
}
function _png_default_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $warning_number = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $warning_number = sp + 56|0;
 $0 = $png_ptr;
 $1 = $warning_message;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(35);
 if (!($5)) {
  $38 = HEAP32[_stderr>>2]|0;
  $39 = $1;
  HEAP32[$vararg_buffer9>>2] = $39;
  (_fprintf(($38|0),(9536|0),($vararg_buffer9|0))|0);
  $40 = HEAP32[_stderr>>2]|0;
  (_fprintf(($40|0),(27712|0),($vararg_buffer12|0))|0);
  STACKTOP = sp;return;
 }
 $offset = 0;
 while(1) {
  $6 = $offset;
  $7 = ($6|0)<(15);
  if (!($7)) {
   break;
  }
  $8 = $offset;
  $9 = (($8) + 1)|0;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $offset;
  $14 = (($warning_number) + ($13)|0);
  HEAP8[$14>>0] = $12;
  $15 = $offset;
  $16 = $1;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(32);
  if ($20) {
   label = 5;
   break;
  }
  $21 = $offset;
  $22 = (($21) + 1)|0;
  $offset = $22;
 }
 if ((label|0) == 5) {
 }
 $23 = $offset;
 $24 = ($23|0)>(1);
 if ($24) {
  $25 = $offset;
  $26 = ($25|0)<(15);
  if ($26) {
   $27 = $offset;
   $28 = (($27) + 1)|0;
   $29 = (($warning_number) + ($28)|0);
   HEAP8[$29>>0] = 0;
   $30 = HEAP32[_stderr>>2]|0;
   $31 = $1;
   $32 = $offset;
   $33 = (($31) + ($32)|0);
   HEAP32[$vararg_buffer>>2] = $warning_number;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $33;
   (_fprintf(($30|0),(9504|0),($vararg_buffer|0))|0);
   $34 = HEAP32[_stderr>>2]|0;
   (_fprintf(($34|0),(27712|0),($vararg_buffer2|0))|0);
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $35 = HEAP32[_stderr>>2]|0;
  $36 = $1;
  HEAP32[$vararg_buffer4>>2] = $36;
  (_fprintf(($35|0),(9536|0),($vararg_buffer4|0))|0);
  $37 = HEAP32[_stderr>>2]|0;
  (_fprintf(($37|0),(27712|0),($vararg_buffer7|0))|0);
 }
 STACKTOP = sp;return;
}
function _png_do_invert($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i = 0, $i2 = 0, $i5 = 0, $istop = 0, $istop3 = 0, $istop6 = 0, $rp = 0, $rp1 = 0, $rp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $rp = $7;
  $8 = $0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $istop = $10;
  $i = 0;
  while(1) {
   $11 = $i;
   $12 = $istop;
   $13 = ($11>>>0)<($12>>>0);
   if (!($13)) {
    break;
   }
   $14 = $rp;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 ^ -1;
   $18 = $17&255;
   $19 = $rp;
   HEAP8[$19>>0] = $18;
   $20 = $rp;
   $21 = (($20) + 1|0);
   $rp = $21;
   $22 = $i;
   $23 = (($22) + 1)|0;
   $i = $23;
  }
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = (($24) + 8|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)==(4);
 if ($28) {
  $29 = $0;
  $30 = (($29) + 9|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(8);
  if ($33) {
   $34 = $1;
   $rp1 = $34;
   $35 = $0;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $istop3 = $37;
   $i2 = 0;
   while(1) {
    $38 = $i2;
    $39 = $istop3;
    $40 = ($38>>>0)<($39>>>0);
    if (!($40)) {
     break;
    }
    $41 = $rp1;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43 ^ -1;
    $45 = $44&255;
    $46 = $rp1;
    HEAP8[$46>>0] = $45;
    $47 = $rp1;
    $48 = (($47) + 2|0);
    $rp1 = $48;
    $49 = $i2;
    $50 = (($49) + 2)|0;
    $i2 = $50;
   }
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $51 = $0;
  $52 = (($51) + 8|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(4);
  if ($55) {
   $56 = $0;
   $57 = (($56) + 9|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59|0)==(16);
   if ($60) {
    $61 = $1;
    $rp4 = $61;
    $62 = $0;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $istop6 = $64;
    $i5 = 0;
    while(1) {
     $65 = $i5;
     $66 = $istop6;
     $67 = ($65>>>0)<($66>>>0);
     if (!($67)) {
      break;
     }
     $68 = $rp4;
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $70 ^ -1;
     $72 = $71&255;
     $73 = $rp4;
     HEAP8[$73>>0] = $72;
     $74 = $rp4;
     $75 = (($74) + 1|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = $77 ^ -1;
     $79 = $78&255;
     $80 = $rp4;
     $81 = (($80) + 1|0);
     HEAP8[$81>>0] = $79;
     $82 = $rp4;
     $83 = (($82) + 4|0);
     $rp4 = $83;
     $84 = $i5;
     $85 = (($84) + 4)|0;
     $i5 = $85;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_do_swap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $istop = 0, $rp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(16);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $rp = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (($10) + 10|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = Math_imul($9, $13)|0;
 $istop = $14;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $istop;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $rp;
  $19 = HEAP8[$18>>0]|0;
  $t = $19;
  $20 = $rp;
  $21 = (($20) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $rp;
  HEAP8[$23>>0] = $22;
  $24 = $t;
  $25 = $rp;
  $26 = (($25) + 1|0);
  HEAP8[$26>>0] = $24;
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
  $29 = $rp;
  $30 = (($29) + 2|0);
  $rp = $30;
 }
 STACKTOP = sp;return;
}
function _png_do_packswap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $end = 0, $rp = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)<(8);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $end = $11;
 $12 = $0;
 $13 = (($12) + 9|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(1);
 if ($16) {
  $table = 9640;
 } else {
  $17 = $0;
  $18 = (($17) + 9|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)==(2);
  do {
   if ($21) {
    $table = 9896;
   } else {
    $22 = $0;
    $23 = (($22) + 9|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)==(4);
    if ($26) {
     $table = 10152;
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
 }
 $27 = $1;
 $rp = $27;
 while(1) {
  $28 = $rp;
  $29 = $end;
  $30 = ($28>>>0)<($29>>>0);
  if (!($30)) {
   break;
  }
  $31 = $rp;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $table;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $rp;
  HEAP8[$37>>0] = $36;
  $38 = $rp;
  $39 = (($38) + 1|0);
  $rp = $39;
 }
 STACKTOP = sp;return;
}
function _png_do_strip_filler($row_info,$row,$flags) {
 $row_info = $row_info|0;
 $row = $row|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $i = 0, $row_width = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $flags;
 $3 = $1;
 $sp = $3;
 $4 = $1;
 $dp = $4;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $row_width = $6;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(2);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = (($12) + 8|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(6);
  if ($16) {
   $17 = $2;
   $18 = $17 & 4194304;
   $19 = ($18|0)!=(0);
   if ($19) {
    label = 4;
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
 }
 if ((label|0) == 4) {
  $20 = $0;
  $21 = (($20) + 10|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(4);
  if ($24) {
   $25 = $0;
   $26 = (($25) + 9|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)==(8);
   if ($29) {
    $30 = $2;
    $31 = $30 & 128;
    $32 = ($31|0)!=(0);
    if ($32) {
     $33 = $dp;
     $34 = (($33) + 3|0);
     $dp = $34;
     $35 = $sp;
     $36 = (($35) + 4|0);
     $sp = $36;
     $i = 1;
     while(1) {
      $37 = $i;
      $38 = $row_width;
      $39 = ($37>>>0)<($38>>>0);
      if (!($39)) {
       break;
      }
      $40 = $sp;
      $41 = (($40) + 1|0);
      $sp = $41;
      $42 = HEAP8[$40>>0]|0;
      $43 = $dp;
      $44 = (($43) + 1|0);
      $dp = $44;
      HEAP8[$43>>0] = $42;
      $45 = $sp;
      $46 = (($45) + 1|0);
      $sp = $46;
      $47 = HEAP8[$45>>0]|0;
      $48 = $dp;
      $49 = (($48) + 1|0);
      $dp = $49;
      HEAP8[$48>>0] = $47;
      $50 = $sp;
      $51 = (($50) + 1|0);
      $sp = $51;
      $52 = HEAP8[$50>>0]|0;
      $53 = $dp;
      $54 = (($53) + 1|0);
      $dp = $54;
      HEAP8[$53>>0] = $52;
      $55 = $sp;
      $56 = (($55) + 1|0);
      $sp = $56;
      $57 = $i;
      $58 = (($57) + 1)|0;
      $i = $58;
     }
    } else {
     $i = 0;
     while(1) {
      $59 = $i;
      $60 = $row_width;
      $61 = ($59>>>0)<($60>>>0);
      if (!($61)) {
       break;
      }
      $62 = $sp;
      $63 = (($62) + 1|0);
      $sp = $63;
      $64 = $sp;
      $65 = (($64) + 1|0);
      $sp = $65;
      $66 = HEAP8[$64>>0]|0;
      $67 = $dp;
      $68 = (($67) + 1|0);
      $dp = $68;
      HEAP8[$67>>0] = $66;
      $69 = $sp;
      $70 = (($69) + 1|0);
      $sp = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $dp;
      $73 = (($72) + 1|0);
      $dp = $73;
      HEAP8[$72>>0] = $71;
      $74 = $sp;
      $75 = (($74) + 1|0);
      $sp = $75;
      $76 = HEAP8[$74>>0]|0;
      $77 = $dp;
      $78 = (($77) + 1|0);
      $dp = $78;
      HEAP8[$77>>0] = $76;
      $79 = $i;
      $80 = (($79) + 1)|0;
      $i = $80;
     }
    }
    $81 = $0;
    $82 = (($81) + 11|0);
    HEAP8[$82>>0] = 24;
    $83 = $row_width;
    $84 = ($83*3)|0;
    $85 = $0;
    $86 = (($85) + 4|0);
    HEAP32[$86>>2] = $84;
   } else {
    $87 = $2;
    $88 = $87 & 128;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = $sp;
     $91 = (($90) + 8|0);
     $sp = $91;
     $92 = $dp;
     $93 = (($92) + 6|0);
     $dp = $93;
     $i = 1;
     while(1) {
      $94 = $i;
      $95 = $row_width;
      $96 = ($94>>>0)<($95>>>0);
      if (!($96)) {
       break;
      }
      $97 = $sp;
      $98 = (($97) + 1|0);
      $sp = $98;
      $99 = HEAP8[$97>>0]|0;
      $100 = $dp;
      $101 = (($100) + 1|0);
      $dp = $101;
      HEAP8[$100>>0] = $99;
      $102 = $sp;
      $103 = (($102) + 1|0);
      $sp = $103;
      $104 = HEAP8[$102>>0]|0;
      $105 = $dp;
      $106 = (($105) + 1|0);
      $dp = $106;
      HEAP8[$105>>0] = $104;
      $107 = $sp;
      $108 = (($107) + 1|0);
      $sp = $108;
      $109 = HEAP8[$107>>0]|0;
      $110 = $dp;
      $111 = (($110) + 1|0);
      $dp = $111;
      HEAP8[$110>>0] = $109;
      $112 = $sp;
      $113 = (($112) + 1|0);
      $sp = $113;
      $114 = HEAP8[$112>>0]|0;
      $115 = $dp;
      $116 = (($115) + 1|0);
      $dp = $116;
      HEAP8[$115>>0] = $114;
      $117 = $sp;
      $118 = (($117) + 1|0);
      $sp = $118;
      $119 = HEAP8[$117>>0]|0;
      $120 = $dp;
      $121 = (($120) + 1|0);
      $dp = $121;
      HEAP8[$120>>0] = $119;
      $122 = $sp;
      $123 = (($122) + 1|0);
      $sp = $123;
      $124 = HEAP8[$122>>0]|0;
      $125 = $dp;
      $126 = (($125) + 1|0);
      $dp = $126;
      HEAP8[$125>>0] = $124;
      $127 = $sp;
      $128 = (($127) + 2|0);
      $sp = $128;
      $129 = $i;
      $130 = (($129) + 1)|0;
      $i = $130;
     }
    } else {
     $i = 0;
     while(1) {
      $131 = $i;
      $132 = $row_width;
      $133 = ($131>>>0)<($132>>>0);
      if (!($133)) {
       break;
      }
      $134 = $sp;
      $135 = (($134) + 2|0);
      $sp = $135;
      $136 = $sp;
      $137 = (($136) + 1|0);
      $sp = $137;
      $138 = HEAP8[$136>>0]|0;
      $139 = $dp;
      $140 = (($139) + 1|0);
      $dp = $140;
      HEAP8[$139>>0] = $138;
      $141 = $sp;
      $142 = (($141) + 1|0);
      $sp = $142;
      $143 = HEAP8[$141>>0]|0;
      $144 = $dp;
      $145 = (($144) + 1|0);
      $dp = $145;
      HEAP8[$144>>0] = $143;
      $146 = $sp;
      $147 = (($146) + 1|0);
      $sp = $147;
      $148 = HEAP8[$146>>0]|0;
      $149 = $dp;
      $150 = (($149) + 1|0);
      $dp = $150;
      HEAP8[$149>>0] = $148;
      $151 = $sp;
      $152 = (($151) + 1|0);
      $sp = $152;
      $153 = HEAP8[$151>>0]|0;
      $154 = $dp;
      $155 = (($154) + 1|0);
      $dp = $155;
      HEAP8[$154>>0] = $153;
      $156 = $sp;
      $157 = (($156) + 1|0);
      $sp = $157;
      $158 = HEAP8[$156>>0]|0;
      $159 = $dp;
      $160 = (($159) + 1|0);
      $dp = $160;
      HEAP8[$159>>0] = $158;
      $161 = $sp;
      $162 = (($161) + 1|0);
      $sp = $162;
      $163 = HEAP8[$161>>0]|0;
      $164 = $dp;
      $165 = (($164) + 1|0);
      $dp = $165;
      HEAP8[$164>>0] = $163;
      $166 = $i;
      $167 = (($166) + 1)|0;
      $i = $167;
     }
    }
    $168 = $0;
    $169 = (($168) + 11|0);
    HEAP8[$169>>0] = 48;
    $170 = $row_width;
    $171 = ($170*6)|0;
    $172 = $0;
    $173 = (($172) + 4|0);
    HEAP32[$173>>2] = $171;
   }
   $174 = $0;
   $175 = (($174) + 10|0);
   HEAP8[$175>>0] = 3;
  } else {
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $176 = $0;
  $177 = (($176) + 8|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = ($179|0)==(0);
  if ($180) {
   label = 34;
  } else {
   $181 = $0;
   $182 = (($181) + 8|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)==(4);
   if ($185) {
    $186 = $2;
    $187 = $186 & 4194304;
    $188 = ($187|0)!=(0);
    if ($188) {
     label = 34;
    }
   }
  }
  if ((label|0) == 34) {
   $189 = $0;
   $190 = (($189) + 10|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = ($192|0)==(2);
   if ($193) {
    $194 = $0;
    $195 = (($194) + 9|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = ($197|0)==(8);
    if ($198) {
     $199 = $2;
     $200 = $199 & 128;
     $201 = ($200|0)!=(0);
     if ($201) {
      $i = 0;
      while(1) {
       $202 = $i;
       $203 = $row_width;
       $204 = ($202>>>0)<($203>>>0);
       if (!($204)) {
        break;
       }
       $205 = $sp;
       $206 = (($205) + 1|0);
       $sp = $206;
       $207 = HEAP8[$205>>0]|0;
       $208 = $dp;
       $209 = (($208) + 1|0);
       $dp = $209;
       HEAP8[$208>>0] = $207;
       $210 = $sp;
       $211 = (($210) + 1|0);
       $sp = $211;
       $212 = $i;
       $213 = (($212) + 1)|0;
       $i = $213;
      }
     } else {
      $i = 0;
      while(1) {
       $214 = $i;
       $215 = $row_width;
       $216 = ($214>>>0)<($215>>>0);
       if (!($216)) {
        break;
       }
       $217 = $sp;
       $218 = (($217) + 1|0);
       $sp = $218;
       $219 = $sp;
       $220 = (($219) + 1|0);
       $sp = $220;
       $221 = HEAP8[$219>>0]|0;
       $222 = $dp;
       $223 = (($222) + 1|0);
       $dp = $223;
       HEAP8[$222>>0] = $221;
       $224 = $i;
       $225 = (($224) + 1)|0;
       $i = $225;
      }
     }
     $226 = $0;
     $227 = (($226) + 11|0);
     HEAP8[$227>>0] = 8;
     $228 = $row_width;
     $229 = $0;
     $230 = (($229) + 4|0);
     HEAP32[$230>>2] = $228;
    } else {
     $231 = $2;
     $232 = $231 & 128;
     $233 = ($232|0)!=(0);
     if ($233) {
      $234 = $sp;
      $235 = (($234) + 4|0);
      $sp = $235;
      $236 = $dp;
      $237 = (($236) + 2|0);
      $dp = $237;
      $i = 1;
      while(1) {
       $238 = $i;
       $239 = $row_width;
       $240 = ($238>>>0)<($239>>>0);
       if (!($240)) {
        break;
       }
       $241 = $sp;
       $242 = (($241) + 1|0);
       $sp = $242;
       $243 = HEAP8[$241>>0]|0;
       $244 = $dp;
       $245 = (($244) + 1|0);
       $dp = $245;
       HEAP8[$244>>0] = $243;
       $246 = $sp;
       $247 = (($246) + 1|0);
       $sp = $247;
       $248 = HEAP8[$246>>0]|0;
       $249 = $dp;
       $250 = (($249) + 1|0);
       $dp = $250;
       HEAP8[$249>>0] = $248;
       $251 = $sp;
       $252 = (($251) + 2|0);
       $sp = $252;
       $253 = $i;
       $254 = (($253) + 1)|0;
       $i = $254;
      }
     } else {
      $i = 0;
      while(1) {
       $255 = $i;
       $256 = $row_width;
       $257 = ($255>>>0)<($256>>>0);
       if (!($257)) {
        break;
       }
       $258 = $sp;
       $259 = (($258) + 2|0);
       $sp = $259;
       $260 = $sp;
       $261 = (($260) + 1|0);
       $sp = $261;
       $262 = HEAP8[$260>>0]|0;
       $263 = $dp;
       $264 = (($263) + 1|0);
       $dp = $264;
       HEAP8[$263>>0] = $262;
       $265 = $sp;
       $266 = (($265) + 1|0);
       $sp = $266;
       $267 = HEAP8[$265>>0]|0;
       $268 = $dp;
       $269 = (($268) + 1|0);
       $dp = $269;
       HEAP8[$268>>0] = $267;
       $270 = $i;
       $271 = (($270) + 1)|0;
       $i = $271;
      }
     }
     $272 = $0;
     $273 = (($272) + 11|0);
     HEAP8[$273>>0] = 16;
     $274 = $row_width;
     $275 = $274<<1;
     $276 = $0;
     $277 = (($276) + 4|0);
     HEAP32[$277>>2] = $275;
    }
    $278 = $0;
    $279 = (($278) + 10|0);
    HEAP8[$279>>0] = 1;
   }
  }
 }
 $280 = $2;
 $281 = $280 & 4194304;
 $282 = ($281|0)!=(0);
 if (!($282)) {
  STACKTOP = sp;return;
 }
 $283 = $0;
 $284 = (($283) + 8|0);
 $285 = HEAP8[$284>>0]|0;
 $286 = $285&255;
 $287 = $286 & -5;
 $288 = $287&255;
 HEAP8[$284>>0] = $288;
 STACKTOP = sp;return;
}
function _png_do_bgr($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i2 = 0, $i5 = 0, $i8 = 0, $row_width = 0, $rp = 0, $rp1 = 0, $rp4 = 0, $rp7 = 0, $save = 0;
 var $save3 = 0, $save6 = 0, $save9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $row_width = $9;
 $10 = $0;
 $11 = (($10) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(8);
 if ($14) {
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(2);
  if ($19) {
   $i = 0;
   $20 = $1;
   $rp = $20;
   while(1) {
    $21 = $i;
    $22 = $row_width;
    $23 = ($21>>>0)<($22>>>0);
    if (!($23)) {
     break;
    }
    $24 = $rp;
    $25 = HEAP8[$24>>0]|0;
    $save = $25;
    $26 = $rp;
    $27 = (($26) + 2|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $rp;
    HEAP8[$29>>0] = $28;
    $30 = $save;
    $31 = $rp;
    $32 = (($31) + 2|0);
    HEAP8[$32>>0] = $30;
    $33 = $i;
    $34 = (($33) + 1)|0;
    $i = $34;
    $35 = $rp;
    $36 = (($35) + 3|0);
    $rp = $36;
   }
  } else {
   $37 = $0;
   $38 = (($37) + 8|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)==(6);
   if ($41) {
    $i2 = 0;
    $42 = $1;
    $rp1 = $42;
    while(1) {
     $43 = $i2;
     $44 = $row_width;
     $45 = ($43>>>0)<($44>>>0);
     if (!($45)) {
      break;
     }
     $46 = $rp1;
     $47 = HEAP8[$46>>0]|0;
     $save3 = $47;
     $48 = $rp1;
     $49 = (($48) + 2|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $rp1;
     HEAP8[$51>>0] = $50;
     $52 = $save3;
     $53 = $rp1;
     $54 = (($53) + 2|0);
     HEAP8[$54>>0] = $52;
     $55 = $i2;
     $56 = (($55) + 1)|0;
     $i2 = $56;
     $57 = $rp1;
     $58 = (($57) + 4|0);
     $rp1 = $58;
    }
   }
  }
 } else {
  $59 = $0;
  $60 = (($59) + 9|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ($62|0)==(16);
  if ($63) {
   $64 = $0;
   $65 = (($64) + 8|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = ($67|0)==(2);
   if ($68) {
    $i5 = 0;
    $69 = $1;
    $rp4 = $69;
    while(1) {
     $70 = $i5;
     $71 = $row_width;
     $72 = ($70>>>0)<($71>>>0);
     if (!($72)) {
      break;
     }
     $73 = $rp4;
     $74 = HEAP8[$73>>0]|0;
     $save6 = $74;
     $75 = $rp4;
     $76 = (($75) + 4|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $rp4;
     HEAP8[$78>>0] = $77;
     $79 = $save6;
     $80 = $rp4;
     $81 = (($80) + 4|0);
     HEAP8[$81>>0] = $79;
     $82 = $rp4;
     $83 = (($82) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $save6 = $84;
     $85 = $rp4;
     $86 = (($85) + 5|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $rp4;
     $89 = (($88) + 1|0);
     HEAP8[$89>>0] = $87;
     $90 = $save6;
     $91 = $rp4;
     $92 = (($91) + 5|0);
     HEAP8[$92>>0] = $90;
     $93 = $i5;
     $94 = (($93) + 1)|0;
     $i5 = $94;
     $95 = $rp4;
     $96 = (($95) + 6|0);
     $rp4 = $96;
    }
   } else {
    $97 = $0;
    $98 = (($97) + 8|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ($100|0)==(6);
    if ($101) {
     $i8 = 0;
     $102 = $1;
     $rp7 = $102;
     while(1) {
      $103 = $i8;
      $104 = $row_width;
      $105 = ($103>>>0)<($104>>>0);
      if (!($105)) {
       break;
      }
      $106 = $rp7;
      $107 = HEAP8[$106>>0]|0;
      $save9 = $107;
      $108 = $rp7;
      $109 = (($108) + 4|0);
      $110 = HEAP8[$109>>0]|0;
      $111 = $rp7;
      HEAP8[$111>>0] = $110;
      $112 = $save9;
      $113 = $rp7;
      $114 = (($113) + 4|0);
      HEAP8[$114>>0] = $112;
      $115 = $rp7;
      $116 = (($115) + 1|0);
      $117 = HEAP8[$116>>0]|0;
      $save9 = $117;
      $118 = $rp7;
      $119 = (($118) + 5|0);
      $120 = HEAP8[$119>>0]|0;
      $121 = $rp7;
      $122 = (($121) + 1|0);
      HEAP8[$122>>0] = $120;
      $123 = $save9;
      $124 = $rp7;
      $125 = (($124) + 5|0);
      HEAP8[$125>>0] = $123;
      $126 = $i8;
      $127 = (($126) + 1)|0;
      $i8 = $127;
      $128 = $rp7;
      $129 = (($128) + 8|0);
      $rp7 = $129;
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_save_uint_32($buf,$i) {
 $buf = $buf|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $i;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >>> 16;
 $9 = $8 & 255;
 $10 = $9&255;
 $11 = $0;
 $12 = (($11) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >>> 8;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $0;
 $18 = (($17) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $0;
 $23 = (($22) + 3|0);
 HEAP8[$23>>0] = $21;
 STACKTOP = sp;return;
}
function _png_save_int_32($buf,$i) {
 $buf = $buf|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $i;
 $2 = $1;
 $3 = $2 >> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >> 16;
 $9 = $8 & 255;
 $10 = $9&255;
 $11 = $0;
 $12 = (($11) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >> 8;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $0;
 $18 = (($17) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $0;
 $23 = (($22) + 3|0);
 HEAP8[$23>>0] = $21;
 STACKTOP = sp;return;
}
function _png_save_uint_16($buf,$i) {
 $buf = $buf|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $i;
 $2 = $1;
 $3 = $2 >>> 8;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 & 255;
 $9 = $8&255;
 $10 = $0;
 $11 = (($10) + 1|0);
 HEAP8[$11>>0] = $9;
 STACKTOP = sp;return;
}
function _png_write_sig($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $png_signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $png_signature = sp + 8|0;
 $0 = $png_ptr;
 ;HEAP8[$png_signature+0>>0]=HEAP8[10408+0>>0]|0;HEAP8[$png_signature+1>>0]=HEAP8[10408+1>>0]|0;HEAP8[$png_signature+2>>0]=HEAP8[10408+2>>0]|0;HEAP8[$png_signature+3>>0]=HEAP8[10408+3>>0]|0;HEAP8[$png_signature+4>>0]=HEAP8[10408+4>>0]|0;HEAP8[$png_signature+5>>0]=HEAP8[10408+5>>0]|0;HEAP8[$png_signature+6>>0]=HEAP8[10408+6>>0]|0;HEAP8[$png_signature+7>>0]=HEAP8[10408+7>>0]|0;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 392|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($png_signature) + ($5)|0);
 $7 = $0;
 $8 = (($7) + 392|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (8 - ($10))|0;
 _png_write_data($1,$6,$11);
 $12 = $0;
 $13 = (($12) + 392|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)<(3);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = (($17) + 196|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 | 4096;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function _png_write_chunk($png_ptr,$chunk_name,$data,$length) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $chunk_name;
 $2 = $data;
 $3 = $length;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $6 = $0;
  $7 = $1;
  $8 = $3;
  _png_write_chunk_start($6,$7,$8);
  $9 = $0;
  $10 = $2;
  $11 = $3;
  _png_write_chunk_data($9,$10,$11);
  $12 = $0;
  _png_write_chunk_end($12);
  STACKTOP = sp;return;
 }
}
function _png_write_chunk_start($png_ptr,$chunk_name,$length) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $chunk_name;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = $2;
  _png_save_uint_32($buf,$5);
  $6 = (($buf) + 4|0);
  $7 = $1;
  ;HEAP8[$6+0>>0]=HEAP8[$7+0>>0]|0;HEAP8[$6+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$7+3>>0]|0;
  $8 = $0;
  _png_write_data($8,$buf,8);
  $9 = $0;
  $10 = (($9) + 376|0);
  $11 = $1;
  ;HEAP8[$10+0>>0]=HEAP8[$11+0>>0]|0;HEAP8[$10+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$11+3>>0]|0;
  $12 = $0;
  _png_reset_crc($12);
  $13 = $0;
  $14 = $1;
  _png_calculate_crc($13,$14,4);
  STACKTOP = sp;return;
 }
}
function _png_write_chunk_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
 } else {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $2;
   $8 = ($7>>>0)>(0);
   if ($8) {
    $9 = $0;
    $10 = $1;
    $11 = $2;
    _png_write_data($9,$10,$11);
    $12 = $0;
    $13 = $1;
    $14 = $2;
    _png_calculate_crc($12,$13,$14);
   }
  }
 }
 STACKTOP = sp;return;
}
function _png_write_chunk_end($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 4|0;
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $3 = $0;
  $4 = (($3) + 364|0);
  $5 = HEAP32[$4>>2]|0;
  _png_save_uint_32($buf,$5);
  $6 = $0;
  _png_write_data($6,$buf,4);
  STACKTOP = sp;return;
 }
}
function _png_write_IHDR($png_ptr,$width,$height,$bit_depth,$color_type,$compression_type,$filter_type,$interlace_type) {
 $png_ptr = $png_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 $interlace_type = $interlace_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 36|0;
 $0 = $png_ptr;
 $1 = $width;
 $2 = $height;
 $3 = $bit_depth;
 $4 = $color_type;
 $5 = $compression_type;
 $6 = $filter_type;
 $7 = $interlace_type;
 $8 = $4;
 switch ($8|0) {
 case 4:  {
  $24 = $3;
  $25 = ($24|0)!=(8);
  if ($25) {
   $26 = $3;
   $27 = ($26|0)!=(16);
   if ($27) {
    $28 = $0;
    _png_error($28,10528);
   }
  }
  $29 = $0;
  $30 = (($29) + 390|0);
  HEAP8[$30>>0] = 2;
  break;
 }
 case 3:  {
  $20 = $3;
  if ((($20|0) == 8) | (($20|0) == 4) | (($20|0) == 2) | (($20|0) == 1)) {
   $21 = $0;
   $22 = (($21) + 390|0);
   HEAP8[$22>>0] = 1;
  } else {
   $23 = $0;
   _png_error($23,10488);
  }
  break;
 }
 case 0:  {
  $9 = $3;
  switch ($9|0) {
  case 16: case 8: case 4: case 2: case 1:  {
   $10 = $0;
   $11 = (($10) + 390|0);
   HEAP8[$11>>0] = 1;
   break;
  }
  default: {
   $12 = $0;
   _png_error($12,10416);
  }
  }
  break;
 }
 case 6:  {
  $31 = $3;
  $32 = ($31|0)!=(8);
  if ($32) {
   $33 = $3;
   $34 = ($33|0)!=(16);
   if ($34) {
    $35 = $0;
    _png_error($35,10576);
   }
  }
  $36 = $0;
  $37 = (($36) + 390|0);
  HEAP8[$37>>0] = 4;
  break;
 }
 case 2:  {
  $13 = $3;
  $14 = ($13|0)!=(8);
  if ($14) {
   $15 = $3;
   $16 = ($15|0)!=(16);
   if ($16) {
    $17 = $0;
    _png_error($17,10456);
   }
  }
  $18 = $0;
  $19 = (($18) + 390|0);
  HEAP8[$19>>0] = 3;
  break;
 }
 default: {
  $38 = $0;
  _png_error($38,10616);
 }
 }
 $39 = $5;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $0;
  _png_warning($41,10656);
  $5 = 0;
 }
 $42 = $0;
 $43 = (($42) + 652|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & 4;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $47 = $0;
   $48 = (($47) + 196|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 4096;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = $4;
    $53 = ($52|0)==(2);
    if (!($53)) {
     $54 = $4;
     $55 = ($54|0)==(6);
     if (!($55)) {
      label = 30;
      break;
     }
    }
    $56 = $6;
    $57 = ($56|0)==(64);
    if (!($57)) {
     label = 30;
    }
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $58 = $6;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $0;
   _png_warning($60,10696);
   $6 = 0;
  }
 }
 $61 = $7;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $7;
  $64 = ($63|0)!=(1);
  if ($64) {
   $65 = $0;
   _png_warning($65,10728);
   $7 = 1;
  }
 }
 $66 = $3;
 $67 = $66&255;
 $68 = $0;
 $69 = (($68) + 387|0);
 HEAP8[$69>>0] = $67;
 $70 = $4;
 $71 = $70&255;
 $72 = $0;
 $73 = (($72) + 386|0);
 HEAP8[$73>>0] = $71;
 $74 = $7;
 $75 = $74&255;
 $76 = $0;
 $77 = (($76) + 383|0);
 HEAP8[$77>>0] = $75;
 $78 = $6;
 $79 = $78&255;
 $80 = $0;
 $81 = (($80) + 660|0);
 HEAP8[$81>>0] = $79;
 $82 = $5;
 $83 = $82&255;
 $84 = $0;
 $85 = (($84) + 700|0);
 HEAP8[$85>>0] = $83;
 $86 = $1;
 $87 = $0;
 $88 = (($87) + 292|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 $90 = $0;
 $91 = (($90) + 296|0);
 HEAP32[$91>>2] = $89;
 $92 = $3;
 $93 = $0;
 $94 = (($93) + 390|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = Math_imul($92, $96)|0;
 $98 = $97&255;
 $99 = $0;
 $100 = (($99) + 389|0);
 HEAP8[$100>>0] = $98;
 $101 = $0;
 $102 = (($101) + 389|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = ($104|0)>=(8);
 if ($105) {
  $106 = $1;
  $107 = $0;
  $108 = (($107) + 389|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $110 >>> 3;
  $112 = Math_imul($106, $111)|0;
  $123 = $112;
 } else {
  $113 = $1;
  $114 = $0;
  $115 = (($114) + 389|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = Math_imul($113, $117)|0;
  $119 = (($118) + 7)|0;
  $120 = $119 >>> 3;
  $123 = $120;
 }
 $121 = $0;
 $122 = (($121) + 308|0);
 HEAP32[$122>>2] = $123;
 $124 = $0;
 $125 = (($124) + 292|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $0;
 $128 = (($127) + 304|0);
 HEAP32[$128>>2] = $126;
 $129 = $0;
 $130 = (($129) + 387|0);
 $131 = HEAP8[$130>>0]|0;
 $132 = $0;
 $133 = (($132) + 388|0);
 HEAP8[$133>>0] = $131;
 $134 = $0;
 $135 = (($134) + 390|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $0;
 $138 = (($137) + 391|0);
 HEAP8[$138>>0] = $136;
 $139 = $1;
 _png_save_uint_32($buf,$139);
 $140 = (($buf) + 4|0);
 $141 = $2;
 _png_save_uint_32($140,$141);
 $142 = $3;
 $143 = $142&255;
 $144 = (($buf) + 8|0);
 HEAP8[$144>>0] = $143;
 $145 = $4;
 $146 = $145&255;
 $147 = (($buf) + 9|0);
 HEAP8[$147>>0] = $146;
 $148 = $5;
 $149 = $148&255;
 $150 = (($buf) + 10|0);
 HEAP8[$150>>0] = $149;
 $151 = $6;
 $152 = $151&255;
 $153 = (($buf) + 11|0);
 HEAP8[$153>>0] = $152;
 $154 = $7;
 $155 = $154&255;
 $156 = (($buf) + 12|0);
 HEAP8[$156>>0] = $155;
 $157 = $0;
 _png_write_chunk($157,7688,$buf,13);
 $158 = $0;
 $159 = (($158) + 208|0);
 $160 = (($159) + 32|0);
 HEAP32[$160>>2] = 47;
 $161 = $0;
 $162 = (($161) + 208|0);
 $163 = (($162) + 36|0);
 HEAP32[$163>>2] = 48;
 $164 = $0;
 $165 = $0;
 $166 = (($165) + 208|0);
 $167 = (($166) + 40|0);
 HEAP32[$167>>2] = $164;
 $168 = $0;
 $169 = (($168) + 385|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = ($170<<24>>24)!=(0);
 if (!($171)) {
  $172 = $0;
  $173 = (($172) + 386|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174&255;
  $176 = ($175|0)==(3);
  if ($176) {
   label = 41;
  } else {
   $177 = $0;
   $178 = (($177) + 387|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = ($180|0)<(8);
   if ($181) {
    label = 41;
   } else {
    $184 = $0;
    $185 = (($184) + 385|0);
    HEAP8[$185>>0] = -8;
   }
  }
  if ((label|0) == 41) {
   $182 = $0;
   $183 = (($182) + 385|0);
   HEAP8[$183>>0] = 8;
  }
 }
 $186 = $0;
 $187 = (($186) + 200|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $188 & 1;
 $190 = ($189|0)!=(0);
 if (!($190)) {
  $191 = $0;
  $192 = (($191) + 385|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193&255;
  $195 = ($194|0)!=(8);
  if ($195) {
   $196 = $0;
   $197 = (($196) + 288|0);
   HEAP32[$197>>2] = 1;
  } else {
   $198 = $0;
   $199 = (($198) + 288|0);
   HEAP32[$199>>2] = 0;
  }
 }
 $200 = $0;
 $201 = (($200) + 200|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = $202 & 2;
 $204 = ($203|0)!=(0);
 if (!($204)) {
  $205 = $0;
  $206 = (($205) + 272|0);
  HEAP32[$206>>2] = -1;
 }
 $207 = $0;
 $208 = (($207) + 200|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = $209 & 4;
 $211 = ($210|0)!=(0);
 if (!($211)) {
  $212 = $0;
  $213 = (($212) + 284|0);
  HEAP32[$213>>2] = 8;
 }
 $214 = $0;
 $215 = (($214) + 200|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $216 & 8;
 $218 = ($217|0)!=(0);
 if (!($218)) {
  $219 = $0;
  $220 = (($219) + 280|0);
  HEAP32[$220>>2] = 15;
 }
 $221 = $0;
 $222 = (($221) + 200|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = $223 & 16;
 $225 = ($224|0)!=(0);
 if (!($225)) {
  $226 = $0;
  $227 = (($226) + 276|0);
  HEAP32[$227>>2] = 8;
 }
 $228 = $0;
 $229 = (($228) + 208|0);
 $230 = $0;
 $231 = (($230) + 272|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = $0;
 $234 = (($233) + 276|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = $0;
 $237 = (($236) + 280|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = $0;
 $240 = (($239) + 284|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = $0;
 $243 = (($242) + 288|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = (_deflateInit2_($229,$232,$235,$238,$241,$244,10768,56)|0);
 $ret = $245;
 $246 = $ret;
 $247 = ($246|0)!=(0);
 if (!($247)) {
  $258 = $0;
  $259 = (($258) + 264|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $0;
  $262 = (($261) + 208|0);
  $263 = (($262) + 12|0);
  HEAP32[$263>>2] = $260;
  $264 = $0;
  $265 = (($264) + 268|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = $0;
  $268 = (($267) + 208|0);
  $269 = (($268) + 16|0);
  HEAP32[$269>>2] = $266;
  $270 = $0;
  $271 = (($270) + 208|0);
  $272 = (($271) + 44|0);
  HEAP32[$272>>2] = 0;
  $273 = $0;
  $274 = (($273) + 196|0);
  HEAP32[$274>>2] = 1;
  STACKTOP = sp;return;
 }
 $248 = $ret;
 $249 = ($248|0)==(-6);
 if ($249) {
  $250 = $0;
  _png_error($250,10776);
 }
 $251 = $ret;
 $252 = ($251|0)==(-2);
 if ($252) {
  $253 = $0;
  _png_error($253,10832);
 }
 $254 = $ret;
 $255 = ($254|0)==(-4);
 if ($255) {
  $256 = $0;
  _png_error($256,10888);
 }
 $257 = $0;
 _png_error($257,10944);
 $258 = $0;
 $259 = (($258) + 264|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = $0;
 $262 = (($261) + 208|0);
 $263 = (($262) + 12|0);
 HEAP32[$263>>2] = $260;
 $264 = $0;
 $265 = (($264) + 268|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = $0;
 $268 = (($267) + 208|0);
 $269 = (($268) + 16|0);
 HEAP32[$269>>2] = $266;
 $270 = $0;
 $271 = (($270) + 208|0);
 $272 = (($271) + 44|0);
 HEAP32[$272>>2] = 0;
 $273 = $0;
 $274 = (($273) + 196|0);
 HEAP32[$274>>2] = 1;
 STACKTOP = sp;return;
}
function _png_write_PLTE($png_ptr,$palette,$num_pal) {
 $png_ptr = $png_ptr|0;
 $palette = $palette|0;
 $num_pal = $num_pal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $pal_ptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $png_ptr;
 $1 = $palette;
 $2 = $num_pal;
 $3 = $0;
 $4 = (($3) + 652|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  label = 3;
 } else {
  $8 = $2;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 4;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = $2;
  $11 = ($10>>>0)>(256);
  if ($11) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $12 = $0;
   $13 = (($12) + 386|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)==(3);
   if ($16) {
    $17 = $0;
    _png_error($17,10984);
    break;
   } else {
    $18 = $0;
    _png_warning($18,10984);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $19 = $0;
 $20 = (($19) + 386|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 2;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $0;
  _png_warning($25,11024);
  STACKTOP = sp;return;
 }
 $26 = $2;
 $27 = $26&65535;
 $28 = $0;
 $29 = (($28) + 372|0);
 HEAP16[$29>>1] = $27;
 $30 = $0;
 $31 = $2;
 $32 = ($31*3)|0;
 _png_write_chunk_start($30,7712,$32);
 $i = 0;
 $33 = $1;
 $pal_ptr = $33;
 while(1) {
  $34 = $i;
  $35 = $2;
  $36 = ($34>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = $pal_ptr;
  $38 = HEAP8[$37>>0]|0;
  HEAP8[$buf>>0] = $38;
  $39 = $pal_ptr;
  $40 = (($39) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = (($buf) + 1|0);
  HEAP8[$42>>0] = $41;
  $43 = $pal_ptr;
  $44 = (($43) + 2|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = (($buf) + 2|0);
  HEAP8[$46>>0] = $45;
  $47 = $0;
  _png_write_chunk_data($47,$buf,3);
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
  $50 = $pal_ptr;
  $51 = (($50) + 3|0);
  $pal_ptr = $51;
 }
 $52 = $0;
 _png_write_chunk_end($52);
 $53 = $0;
 $54 = (($53) + 196|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 | 2;
 HEAP32[$54>>2] = $56;
 STACKTOP = sp;return;
}
function _png_write_IDAT($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $half_z_window_size = 0, $uncompressed_idat_size = 0, $z_cinfo = 0, $z_cmf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = (($3) + 196|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4;
 $7 = ($6|0)!=(0);
 if ($7) {
  $104 = $0;
  $105 = $1;
  $106 = $2;
  _png_write_chunk($104,7696,$105,$106);
  $107 = $0;
  $108 = (($107) + 196|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $109 | 4;
  HEAP32[$108>>2] = $110;
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = (($8) + 700|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $104 = $0;
  $105 = $1;
  $106 = $2;
  _png_write_chunk($104,7696,$105,$106);
  $107 = $0;
  $108 = (($107) + 196|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $109 | 4;
  HEAP32[$108>>2] = $110;
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $z_cmf = $15;
 $16 = $z_cmf;
 $17 = $16 & 15;
 $18 = ($17|0)==(8);
 if ($18) {
  $19 = $z_cmf;
  $20 = $19 & 240;
  $21 = ($20>>>0)<=(112);
  if ($21) {
   $22 = $2;
   $23 = ($22>>>0)>=(2);
   if ($23) {
    $24 = $0;
    $25 = (($24) + 296|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26>>>0)<(16384);
    if ($27) {
     $28 = $0;
     $29 = (($28) + 292|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30>>>0)<(16384);
     if ($31) {
      $32 = $0;
      $33 = (($32) + 296|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $0;
      $36 = (($35) + 292|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $0;
      $39 = (($38) + 390|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40&255;
      $42 = Math_imul($37, $41)|0;
      $43 = $0;
      $44 = (($43) + 387|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45&255;
      $47 = Math_imul($42, $46)|0;
      $48 = (($47) + 15)|0;
      $49 = $48 >>> 3;
      $50 = Math_imul($34, $49)|0;
      $uncompressed_idat_size = $50;
      $51 = $z_cmf;
      $52 = $51 >>> 4;
      $z_cinfo = $52;
      $53 = $z_cinfo;
      $54 = (($53) + 7)|0;
      $55 = 1 << $54;
      $half_z_window_size = $55;
      while(1) {
       $56 = $uncompressed_idat_size;
       $57 = $half_z_window_size;
       $58 = ($56>>>0)<=($57>>>0);
       if ($58) {
        $59 = $half_z_window_size;
        $60 = ($59>>>0)>=(256);
        $111 = $60;
       } else {
        $111 = 0;
       }
       if (!($111)) {
        break;
       }
       $61 = $z_cinfo;
       $62 = (($61) + -1)|0;
       $z_cinfo = $62;
       $63 = $half_z_window_size;
       $64 = $63 >>> 1;
       $half_z_window_size = $64;
      }
      $65 = $z_cmf;
      $66 = $65 & 15;
      $67 = $z_cinfo;
      $68 = $67 << 4;
      $69 = $66 | $68;
      $z_cmf = $69;
      $70 = $1;
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = $z_cmf;
      $74 = $73&255;
      $75 = $74&255;
      $76 = ($72|0)!=($75|0);
      if ($76) {
       $77 = $z_cmf;
       $78 = $77&255;
       $79 = $1;
       HEAP8[$79>>0] = $78;
       $80 = $1;
       $81 = (($80) + 1|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = $82&255;
       $84 = $83 & 224;
       $85 = $84&255;
       HEAP8[$81>>0] = $85;
       $86 = $z_cmf;
       $87 = $86 << 8;
       $88 = $1;
       $89 = (($88) + 1|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = $90&255;
       $92 = (($87) + ($91))|0;
       $93 = (($92>>>0) % 31)&-1;
       $94 = (31 - ($93))|0;
       $95 = $94&255;
       $96 = $95&255;
       $97 = $1;
       $98 = (($97) + 1|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = $99&255;
       $101 = (($100) + ($96))|0;
       $102 = $101&255;
       HEAP8[$98>>0] = $102;
      }
     }
    }
   }
  } else {
   label = 17;
  }
 } else {
  label = 17;
 }
 if ((label|0) == 17) {
  $103 = $0;
  _png_error($103,11080);
 }
 $104 = $0;
 $105 = $1;
 $106 = $2;
 _png_write_chunk($104,7696,$105,$106);
 $107 = $0;
 $108 = (($107) + 196|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 | 4;
 HEAP32[$108>>2] = $110;
 STACKTOP = sp;return;
}
function _png_write_IEND($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 _png_write_chunk($1,7704,0,0);
 $2 = $0;
 $3 = (($2) + 196|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 | 16;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function _png_write_gAMA($png_ptr,$file_gamma) {
 $png_ptr = $png_ptr|0;
 $file_gamma = +$file_gamma;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $igamma = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $file_gamma;
 $2 = $1;
 $3 = $2 * 1.0E+5;
 $4 = $3 + 0.5;
 $5 = (~~(($4))>>>0);
 $igamma = $5;
 $6 = $igamma;
 _png_save_uint_32($buf,$6);
 $7 = $0;
 _png_write_chunk($7,7736,$buf,4);
 STACKTOP = sp;return;
}
function _png_write_sRGB($png_ptr,$srgb_intent) {
 $png_ptr = $png_ptr|0;
 $srgb_intent = $srgb_intent|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $0 = $png_ptr;
 $1 = $srgb_intent;
 $2 = $1;
 $3 = ($2|0)>=(4);
 if ($3) {
  $4 = $0;
  _png_warning($4,11136);
 }
 $5 = $1;
 $6 = $5&255;
 HEAP8[$buf>>0] = $6;
 $7 = $0;
 _png_write_chunk($7,7808,$buf,1);
 STACKTOP = sp;return;
}
function _png_write_iCCP($png_ptr,$name,$compression_type,$profile,$profile_len) {
 $png_ptr = $png_ptr|0;
 $name = $name|0;
 $compression_type = $compression_type|0;
 $profile = $profile|0;
 $profile_len = $profile_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $comp = 0, $embedded_profile_len = 0, $name_len = 0, $new_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $new_name = sp + 24|0;
 $comp = sp + 4|0;
 $0 = $png_ptr;
 $1 = $name;
 $2 = $compression_type;
 $3 = $profile;
 $4 = $profile_len;
 $embedded_profile_len = 0;
 $5 = (($comp) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = (($comp) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = (($comp) + 16|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$comp>>2] = 0;
 $8 = (($comp) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = $1;
 $11 = (_png_check_keyword($9,$10,$new_name)|0);
 $name_len = $11;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  _png_warning($15,11176);
 }
 $16 = $3;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $4 = 0;
 }
 $18 = $4;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = $3;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 24;
  $24 = $3;
  $25 = (($24) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 16;
  $29 = $23 | $28;
  $30 = $3;
  $31 = (($30) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 << 8;
  $35 = $29 | $34;
  $36 = $3;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $35 | $39;
  $embedded_profile_len = $40;
 }
 $41 = $embedded_profile_len;
 $42 = ($41|0)<(0);
 if ($42) {
  $43 = $0;
  _png_warning($43,11216);
  $44 = $0;
  $45 = HEAP32[$new_name>>2]|0;
  _png_free($44,$45);
  STACKTOP = sp;return;
 }
 $46 = $4;
 $47 = $embedded_profile_len;
 $48 = ($46|0)<($47|0);
 if ($48) {
  $49 = $0;
  _png_warning($49,11272);
  $50 = $0;
  $51 = HEAP32[$new_name>>2]|0;
  _png_free($50,$51);
  STACKTOP = sp;return;
 }
 $52 = $4;
 $53 = $embedded_profile_len;
 $54 = ($52|0)>($53|0);
 if ($54) {
  $55 = $0;
  _png_warning($55,11320);
  $56 = $embedded_profile_len;
  $4 = $56;
 }
 $57 = $4;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $0;
  $60 = $3;
  $61 = $4;
  $62 = (_png_text_compress($59,$60,$61,0,$comp)|0);
  $4 = $62;
 }
 $63 = $0;
 $64 = $name_len;
 $65 = $4;
 $66 = (($64) + ($65))|0;
 $67 = (($66) + 2)|0;
 _png_write_chunk_start($63,7752,$67);
 $68 = $name_len;
 $69 = (($68) + 1)|0;
 $70 = HEAP32[$new_name>>2]|0;
 $71 = (($70) + ($69)|0);
 HEAP8[$71>>0] = 0;
 $72 = $0;
 $73 = HEAP32[$new_name>>2]|0;
 $74 = $name_len;
 $75 = (($74) + 2)|0;
 _png_write_chunk_data($72,$73,$75);
 $76 = $4;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $0;
  _png_write_compressed_data_out($78,$comp);
 }
 $79 = $0;
 _png_write_chunk_end($79);
 $80 = $0;
 $81 = HEAP32[$new_name>>2]|0;
 _png_free($80,$81);
 STACKTOP = sp;return;
}
function _png_check_keyword($png_ptr,$key,$new_key) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $new_key = $new_key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $key_len = 0, $kflag = 0, $kp = 0, $kwarn = 0, $msg = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg = sp + 40|0;
 $1 = $png_ptr;
 $2 = $key;
 $3 = $new_key;
 $kwarn = 0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $2;
  $8 = (_strlen(($7|0))|0);
  $key_len = $8;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $11 = $1;
   $12 = $key_len;
   $13 = (($12) + 2)|0;
   $14 = (_png_malloc_warn($11,$13)|0);
   $15 = $3;
   HEAP32[$15>>2] = $14;
   $16 = $3;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = $1;
    _png_warning($19,11864);
    $0 = 0;
    $131 = $0;
    STACKTOP = sp;return ($131|0);
   }
   $20 = $2;
   $kp = $20;
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $dp = $22;
   while(1) {
    $23 = $kp;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)!=(0);
    if (!($26)) {
     break;
    }
    $27 = $kp;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = ($29|0)<(32);
    do {
     if ($30) {
      label = 11;
     } else {
      $31 = $kp;
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&255;
      $34 = ($33|0)>(126);
      if ($34) {
       $35 = $kp;
       $36 = HEAP8[$35>>0]|0;
       $37 = $36&255;
       $38 = ($37|0)<(161);
       if ($38) {
        label = 11;
        break;
       }
      }
      $44 = $kp;
      $45 = HEAP8[$44>>0]|0;
      $46 = $dp;
      HEAP8[$46>>0] = $45;
     }
    } while(0);
    if ((label|0) == 11) {
     label = 0;
     $39 = $kp;
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     HEAP32[$vararg_buffer>>2] = $41;
     (_snprintf($msg,40,11904,$vararg_buffer)|0);
     $42 = $1;
     _png_warning($42,$msg);
     $43 = $dp;
     HEAP8[$43>>0] = 32;
    }
    $47 = $kp;
    $48 = (($47) + 1|0);
    $kp = $48;
    $49 = $dp;
    $50 = (($49) + 1|0);
    $dp = $50;
   }
   $51 = $dp;
   HEAP8[$51>>0] = 0;
   $52 = $3;
   $53 = HEAP32[$52>>2]|0;
   $54 = $key_len;
   $55 = (($53) + ($54)|0);
   $56 = (($55) + -1|0);
   $kp = $56;
   $57 = $kp;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)==(32);
   if ($60) {
    $61 = $1;
    _png_warning($61,11944);
    while(1) {
     $62 = $kp;
     $63 = HEAP8[$62>>0]|0;
     $64 = $63 << 24 >> 24;
     $65 = ($64|0)==(32);
     if (!($65)) {
      break;
     }
     $66 = $kp;
     $67 = (($66) + -1|0);
     $kp = $67;
     HEAP8[$66>>0] = 0;
     $68 = $key_len;
     $69 = (($68) + -1)|0;
     $key_len = $69;
    }
   }
   $70 = $3;
   $71 = HEAP32[$70>>2]|0;
   $kp = $71;
   $72 = $kp;
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(32);
   if ($75) {
    $76 = $1;
    _png_warning($76,11984);
    while(1) {
     $77 = $kp;
     $78 = HEAP8[$77>>0]|0;
     $79 = $78 << 24 >> 24;
     $80 = ($79|0)==(32);
     if (!($80)) {
      break;
     }
     $81 = $kp;
     $82 = (($81) + 1|0);
     $kp = $82;
     $83 = $key_len;
     $84 = (($83) + -1)|0;
     $key_len = $84;
    }
   }
   $kflag = 0;
   $85 = $3;
   $86 = HEAP32[$85>>2]|0;
   $dp = $86;
   while(1) {
    $87 = $kp;
    $88 = HEAP8[$87>>0]|0;
    $89 = $88 << 24 >> 24;
    $90 = ($89|0)!=(0);
    if (!($90)) {
     break;
    }
    $91 = $kp;
    $92 = HEAP8[$91>>0]|0;
    $93 = $92 << 24 >> 24;
    $94 = ($93|0)==(32);
    if ($94) {
     $95 = $kflag;
     $96 = ($95|0)==(0);
     if ($96) {
      $97 = $kp;
      $98 = HEAP8[$97>>0]|0;
      $99 = $dp;
      $100 = (($99) + 1|0);
      $dp = $100;
      HEAP8[$99>>0] = $98;
      $kflag = 1;
     } else {
      label = 30;
     }
    } else {
     label = 30;
    }
    if ((label|0) == 30) {
     label = 0;
     $101 = $kp;
     $102 = HEAP8[$101>>0]|0;
     $103 = $102 << 24 >> 24;
     $104 = ($103|0)==(32);
     if ($104) {
      $105 = $key_len;
      $106 = (($105) + -1)|0;
      $key_len = $106;
      $kwarn = 1;
     } else {
      $107 = $kp;
      $108 = HEAP8[$107>>0]|0;
      $109 = $dp;
      $110 = (($109) + 1|0);
      $dp = $110;
      HEAP8[$109>>0] = $108;
      $kflag = 0;
     }
    }
    $111 = $kp;
    $112 = (($111) + 1|0);
    $kp = $112;
   }
   $113 = $dp;
   HEAP8[$113>>0] = 0;
   $114 = $kwarn;
   $115 = ($114|0)!=(0);
   if ($115) {
    $116 = $1;
    _png_warning($116,12024);
   }
   $117 = $key_len;
   $118 = ($117|0)==(0);
   if ($118) {
    $119 = $1;
    $120 = $3;
    $121 = HEAP32[$120>>2]|0;
    _png_free($119,$121);
    $122 = $3;
    HEAP32[$122>>2] = 0;
    $123 = $1;
    _png_warning($123,12072);
   }
   $124 = $key_len;
   $125 = ($124>>>0)>(79);
   if ($125) {
    $126 = $1;
    _png_warning($126,12096);
    $127 = $3;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($128) + 79|0);
    HEAP8[$129>>0] = 0;
    $key_len = 79;
   }
   $130 = $key_len;
   $0 = $130;
   $131 = $0;
   STACKTOP = sp;return ($131|0);
  }
 }
 $10 = $1;
 _png_warning($10,11840);
 $0 = 0;
 $131 = $0;
 STACKTOP = sp;return ($131|0);
}
function _png_write_sPLT($png_ptr,$spalette) {
 $png_ptr = $png_ptr|0;
 $spalette = $spalette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $entry_size = 0, $entrybuf = 0, $ep = 0, $name_len = 0, $new_name = 0, $palette_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $new_name = sp + 12|0;
 $entrybuf = sp + 28|0;
 $0 = $png_ptr;
 $1 = $spalette;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(8);
 $7 = $6 ? 6 : 10;
 $entry_size = $7;
 $8 = $entry_size;
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $palette_size = $12;
 $13 = $0;
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_png_check_keyword($13,$15,$new_name)|0);
 $name_len = $16;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $name_len;
 $20 = (($19) + 2)|0;
 $21 = $palette_size;
 $22 = (($20) + ($21))|0;
 _png_write_chunk_start($18,7800,$22);
 $23 = $0;
 $24 = HEAP32[$new_name>>2]|0;
 $25 = $name_len;
 $26 = (($25) + 1)|0;
 _png_write_chunk_data($23,$24,$26);
 $27 = $0;
 $28 = $1;
 $29 = (($28) + 4|0);
 _png_write_chunk_data($27,$29,1);
 $30 = $1;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $ep = $32;
 while(1) {
  $33 = $ep;
  $34 = $1;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($36) + (($39*10)|0)|0);
  $41 = ($33>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $1;
  $43 = (($42) + 4|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)==(8);
  if ($46) {
   $47 = $ep;
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&255;
   HEAP8[$entrybuf>>0] = $49;
   $50 = $ep;
   $51 = (($50) + 2|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&255;
   $54 = (($entrybuf) + 1|0);
   HEAP8[$54>>0] = $53;
   $55 = $ep;
   $56 = (($55) + 4|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&255;
   $59 = (($entrybuf) + 2|0);
   HEAP8[$59>>0] = $58;
   $60 = $ep;
   $61 = (($60) + 6|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $62&255;
   $64 = (($entrybuf) + 3|0);
   HEAP8[$64>>0] = $63;
   $65 = (($entrybuf) + 4|0);
   $66 = $ep;
   $67 = (($66) + 8|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   _png_save_uint_16($65,$69);
  } else {
   $70 = $ep;
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   _png_save_uint_16($entrybuf,$72);
   $73 = (($entrybuf) + 2|0);
   $74 = $ep;
   $75 = (($74) + 2|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   _png_save_uint_16($73,$77);
   $78 = (($entrybuf) + 4|0);
   $79 = $ep;
   $80 = (($79) + 4|0);
   $81 = HEAP16[$80>>1]|0;
   $82 = $81&65535;
   _png_save_uint_16($78,$82);
   $83 = (($entrybuf) + 6|0);
   $84 = $ep;
   $85 = (($84) + 6|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86&65535;
   _png_save_uint_16($83,$87);
   $88 = (($entrybuf) + 8|0);
   $89 = $ep;
   $90 = (($89) + 8|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = $91&65535;
   _png_save_uint_16($88,$92);
  }
  $93 = $0;
  $94 = $entry_size;
  _png_write_chunk_data($93,$entrybuf,$94);
  $95 = $ep;
  $96 = (($95) + 10|0);
  $ep = $96;
 }
 $97 = $0;
 _png_write_chunk_end($97);
 $98 = $0;
 $99 = HEAP32[$new_name>>2]|0;
 _png_free($98,$99);
 STACKTOP = sp;return;
}
function _png_write_sBIT($png_ptr,$sbit,$color_type) {
 $png_ptr = $png_ptr|0;
 $sbit = $sbit|0;
 $color_type = $color_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $maxbits = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $png_ptr;
 $1 = $sbit;
 $2 = $color_type;
 $3 = $2;
 $4 = $3 & 2;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = $2;
   $7 = ($6|0)==(3);
   if ($7) {
    $13 = 8;
   } else {
    $8 = $0;
    $9 = (($8) + 388|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $13 = $11;
   }
   $12 = $13&255;
   $maxbits = $12;
   $14 = $1;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = $1;
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $maxbits;
    $22 = $21&255;
    $23 = ($20|0)>($22|0);
    if (!($23)) {
     $24 = $1;
     $25 = (($24) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = ($27|0)==(0);
     if (!($28)) {
      $29 = $1;
      $30 = (($29) + 1|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31&255;
      $33 = $maxbits;
      $34 = $33&255;
      $35 = ($32|0)>($34|0);
      if (!($35)) {
       $36 = $1;
       $37 = (($36) + 2|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = $38&255;
       $40 = ($39|0)==(0);
       if (!($40)) {
        $41 = $1;
        $42 = (($41) + 2|0);
        $43 = HEAP8[$42>>0]|0;
        $44 = $43&255;
        $45 = $maxbits;
        $46 = $45&255;
        $47 = ($44|0)>($46|0);
        if (!($47)) {
         $49 = $1;
         $50 = HEAP8[$49>>0]|0;
         HEAP8[$buf>>0] = $50;
         $51 = $1;
         $52 = (($51) + 1|0);
         $53 = HEAP8[$52>>0]|0;
         $54 = (($buf) + 1|0);
         HEAP8[$54>>0] = $53;
         $55 = $1;
         $56 = (($55) + 2|0);
         $57 = HEAP8[$56>>0]|0;
         $58 = (($buf) + 2|0);
         HEAP8[$58>>0] = $57;
         $size = 3;
         break;
        }
       }
      }
     }
    }
   }
   $48 = $0;
   _png_warning($48,11376);
   STACKTOP = sp;return;
  } else {
   $59 = $1;
   $60 = (($59) + 3|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)==(0);
   if (!($63)) {
    $64 = $1;
    $65 = (($64) + 3|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $0;
    $69 = (($68) + 388|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($67|0)>($71|0);
    if (!($72)) {
     $74 = $1;
     $75 = (($74) + 3|0);
     $76 = HEAP8[$75>>0]|0;
     HEAP8[$buf>>0] = $76;
     $size = 1;
     break;
    }
   }
   $73 = $0;
   _png_warning($73,11376);
   STACKTOP = sp;return;
  }
 } while(0);
 $77 = $2;
 $78 = $77 & 4;
 $79 = ($78|0)!=(0);
 do {
  if ($79) {
   $80 = $1;
   $81 = (($80) + 4|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)==(0);
   if (!($84)) {
    $85 = $1;
    $86 = (($85) + 4|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = $0;
    $90 = (($89) + 388|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = ($88|0)>($92|0);
    if (!($93)) {
     $95 = $1;
     $96 = (($95) + 4|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $size;
     $99 = (($98) + 1)|0;
     $size = $99;
     $100 = (($buf) + ($98)|0);
     HEAP8[$100>>0] = $97;
     break;
    }
   }
   $94 = $0;
   _png_warning($94,11376);
   STACKTOP = sp;return;
  }
 } while(0);
 $101 = $0;
 $102 = $size;
 _png_write_chunk($101,7792,$buf,$102);
 STACKTOP = sp;return;
}
function _png_write_cHRM($png_ptr,$white_x,$white_y,$red_x,$red_y,$green_x,$green_y,$blue_x,$blue_y) {
 $png_ptr = $png_ptr|0;
 $white_x = +$white_x;
 $white_y = +$white_y;
 $red_x = +$red_x;
 $red_y = +$red_y;
 $green_x = +$green_x;
 $green_y = +$green_y;
 $blue_x = +$blue_x;
 $blue_y = +$blue_y;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $buf = 0, $int_blue_x = 0, $int_blue_y = 0, $int_green_x = 0, $int_green_y = 0, $int_red_x = 0, $int_red_y = 0, $int_white_x = 0, $int_white_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 104|0;
 $0 = $png_ptr;
 $1 = $white_x;
 $2 = $white_y;
 $3 = $red_x;
 $4 = $red_y;
 $5 = $green_x;
 $6 = $green_y;
 $7 = $blue_x;
 $8 = $blue_y;
 $9 = $1;
 $10 = $9 * 1.0E+5;
 $11 = $10 + 0.5;
 $12 = (~~(($11))>>>0);
 $int_white_x = $12;
 $13 = $2;
 $14 = $13 * 1.0E+5;
 $15 = $14 + 0.5;
 $16 = (~~(($15))>>>0);
 $int_white_y = $16;
 $17 = $3;
 $18 = $17 * 1.0E+5;
 $19 = $18 + 0.5;
 $20 = (~~(($19))>>>0);
 $int_red_x = $20;
 $21 = $4;
 $22 = $21 * 1.0E+5;
 $23 = $22 + 0.5;
 $24 = (~~(($23))>>>0);
 $int_red_y = $24;
 $25 = $5;
 $26 = $25 * 1.0E+5;
 $27 = $26 + 0.5;
 $28 = (~~(($27))>>>0);
 $int_green_x = $28;
 $29 = $6;
 $30 = $29 * 1.0E+5;
 $31 = $30 + 0.5;
 $32 = (~~(($31))>>>0);
 $int_green_y = $32;
 $33 = $7;
 $34 = $33 * 1.0E+5;
 $35 = $34 + 0.5;
 $36 = (~~(($35))>>>0);
 $int_blue_x = $36;
 $37 = $8;
 $38 = $37 * 1.0E+5;
 $39 = $38 + 0.5;
 $40 = (~~(($39))>>>0);
 $int_blue_y = $40;
 $41 = $0;
 $42 = $int_white_x;
 $43 = $int_white_y;
 $44 = $int_red_x;
 $45 = $int_red_y;
 $46 = $int_green_x;
 $47 = $int_green_y;
 $48 = $int_blue_x;
 $49 = $int_blue_y;
 $50 = (_png_check_cHRM_fixed($41,$42,$43,$44,$45,$46,$47,$48,$49)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = $int_white_x;
 _png_save_uint_32($buf,$52);
 $53 = (($buf) + 4|0);
 $54 = $int_white_y;
 _png_save_uint_32($53,$54);
 $55 = (($buf) + 8|0);
 $56 = $int_red_x;
 _png_save_uint_32($55,$56);
 $57 = (($buf) + 12|0);
 $58 = $int_red_y;
 _png_save_uint_32($57,$58);
 $59 = (($buf) + 16|0);
 $60 = $int_green_x;
 _png_save_uint_32($59,$60);
 $61 = (($buf) + 20|0);
 $62 = $int_green_y;
 _png_save_uint_32($61,$62);
 $63 = (($buf) + 24|0);
 $64 = $int_blue_x;
 _png_save_uint_32($63,$64);
 $65 = (($buf) + 28|0);
 $66 = $int_blue_y;
 _png_save_uint_32($65,$66);
 $67 = $0;
 _png_write_chunk($67,7728,$buf,32);
 STACKTOP = sp;return;
}
function _png_write_tRNS($png_ptr,$trans,$tran,$num_trans,$color_type) {
 $png_ptr = $png_ptr|0;
 $trans = $trans|0;
 $tran = $tran|0;
 $num_trans = $num_trans|0;
 $color_type = $color_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $png_ptr;
 $1 = $trans;
 $2 = $tran;
 $3 = $num_trans;
 $4 = $color_type;
 $5 = $4;
 $6 = ($5|0)==(3);
 if ($6) {
  $7 = $3;
  $8 = ($7|0)<=(0);
  if (!($8)) {
   $9 = $3;
   $10 = $0;
   $11 = (($10) + 372|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $14 = ($9|0)>($13|0);
   if (!($14)) {
    $16 = $0;
    $17 = $1;
    $18 = $3;
    _png_write_chunk($16,7832,$17,$18);
    STACKTOP = sp;return;
   }
  }
  $15 = $0;
  _png_warning($15,11408);
  STACKTOP = sp;return;
 }
 $19 = $4;
 $20 = ($19|0)==(0);
 do {
  if ($20) {
   $21 = $2;
   $22 = (($21) + 8|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $25 = $0;
   $26 = (($25) + 387|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = 1 << $28;
   $30 = ($24|0)>=($29|0);
   if (!($30)) {
    $32 = $2;
    $33 = (($32) + 8|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    _png_save_uint_16($buf,$35);
    $36 = $0;
    _png_write_chunk($36,7832,$buf,2);
    break;
   }
   $31 = $0;
   _png_warning($31,11456);
   STACKTOP = sp;return;
  } else {
   $37 = $4;
   $38 = ($37|0)==(2);
   if ($38) {
    $39 = $2;
    $40 = (($39) + 2|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41&65535;
    _png_save_uint_16($buf,$42);
    $43 = (($buf) + 2|0);
    $44 = $2;
    $45 = (($44) + 4|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    _png_save_uint_16($43,$47);
    $48 = (($buf) + 4|0);
    $49 = $2;
    $50 = (($49) + 6|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = $51&65535;
    _png_save_uint_16($48,$52);
    $53 = $0;
    $54 = (($53) + 387|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)==(8);
    if ($57) {
     $58 = HEAP8[$buf>>0]|0;
     $59 = $58&255;
     $60 = (($buf) + 2|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $59 | $62;
     $64 = (($buf) + 4|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65&255;
     $67 = $63 | $66;
     $68 = ($67|0)!=(0);
     if ($68) {
      $69 = $0;
      _png_warning($69,11520);
      STACKTOP = sp;return;
     }
    }
    $70 = $0;
    _png_write_chunk($70,7832,$buf,6);
   } else {
    $71 = $0;
    _png_warning($71,11584);
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _png_write_bKGD($png_ptr,$back,$color_type) {
 $png_ptr = $png_ptr|0;
 $back = $back|0;
 $color_type = $color_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 12|0;
 $0 = $png_ptr;
 $1 = $back;
 $2 = $color_type;
 $3 = $2;
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 372|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 4;
  } else {
   $10 = $0;
   $11 = (($10) + 652|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 1;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   $15 = $1;
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = $0;
   $19 = (($18) + 372|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = ($17|0)>=($21|0);
   if ($22) {
    $23 = $0;
    _png_warning($23,11624);
    STACKTOP = sp;return;
   }
  }
  $24 = $1;
  $25 = HEAP8[$24>>0]|0;
  HEAP8[$buf>>0] = $25;
  $26 = $0;
  _png_write_chunk($26,7720,$buf,1);
  STACKTOP = sp;return;
 }
 $27 = $2;
 $28 = $27 & 2;
 $29 = ($28|0)!=(0);
 do {
  if ($29) {
   $30 = $1;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   _png_save_uint_16($buf,$33);
   $34 = (($buf) + 2|0);
   $35 = $1;
   $36 = (($35) + 4|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   _png_save_uint_16($34,$38);
   $39 = (($buf) + 4|0);
   $40 = $1;
   $41 = (($40) + 6|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42&65535;
   _png_save_uint_16($39,$43);
   $44 = $0;
   $45 = (($44) + 387|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)==(8);
   if ($48) {
    $49 = HEAP8[$buf>>0]|0;
    $50 = $49&255;
    $51 = (($buf) + 2|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $50 | $53;
    $55 = (($buf) + 4|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $54 | $57;
    $59 = ($58|0)!=(0);
    if ($59) {
     $60 = $0;
     _png_warning($60,11664);
     STACKTOP = sp;return;
    }
   }
   $61 = $0;
   _png_write_chunk($61,7720,$buf,6);
  } else {
   $62 = $1;
   $63 = (($62) + 8|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = $0;
   $67 = (($66) + 387|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = 1 << $69;
   $71 = ($65|0)>=($70|0);
   if (!($71)) {
    $73 = $1;
    $74 = (($73) + 8|0);
    $75 = HEAP16[$74>>1]|0;
    $76 = $75&65535;
    _png_save_uint_16($buf,$76);
    $77 = $0;
    _png_write_chunk($77,7720,$buf,2);
    break;
   }
   $72 = $0;
   _png_warning($72,11728);
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _png_write_hIST($png_ptr,$hist,$num_hist) {
 $png_ptr = $png_ptr|0;
 $hist = $hist|0;
 $num_hist = $num_hist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $hist;
 $2 = $num_hist;
 $3 = $2;
 $4 = $0;
 $5 = (($4) + 372|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($3|0)>($7|0);
 if ($8) {
  $9 = $0;
  _png_warning($9,11792);
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $2;
 $12 = $11<<1;
 _png_write_chunk_start($10,7744,$12);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $2;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $1;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  _png_save_uint_16($buf,$20);
  $21 = $0;
  _png_write_chunk_data($21,$buf,2);
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $0;
 _png_write_chunk_end($24);
 STACKTOP = sp;return;
}
function _png_write_tEXt($png_ptr,$key,$text,$text_len) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $text = $text|0;
 $text_len = $text_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key_len = 0, $new_key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $new_key = sp;
 $0 = $png_ptr;
 $1 = $key;
 $2 = $text;
 $3 = $text_len;
 $4 = $0;
 $5 = $1;
 $6 = (_png_check_keyword($4,$5,$new_key)|0);
 $key_len = $6;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if ($9) {
  label = 5;
 } else {
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  if ($13) {
   label = 5;
  } else {
   $14 = $2;
   $15 = (_strlen(($14|0))|0);
   $3 = $15;
  }
 }
 if ((label|0) == 5) {
  $3 = 0;
 }
 $16 = $0;
 $17 = $key_len;
 $18 = $3;
 $19 = (($17) + ($18))|0;
 $20 = (($19) + 1)|0;
 _png_write_chunk_start($16,7816,$20);
 $21 = $0;
 $22 = HEAP32[$new_key>>2]|0;
 $23 = $key_len;
 $24 = (($23) + 1)|0;
 _png_write_chunk_data($21,$22,$24);
 $25 = $3;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $0;
  $28 = $2;
  $29 = $3;
  _png_write_chunk_data($27,$28,$29);
 }
 $30 = $0;
 _png_write_chunk_end($30);
 $31 = $0;
 $32 = HEAP32[$new_key>>2]|0;
 _png_free($31,$32);
 STACKTOP = sp;return;
}
function _png_write_zTXt($png_ptr,$key,$text,$text_len,$compression) {
 $png_ptr = $png_ptr|0;
 $key = $key|0;
 $text = $text|0;
 $text_len = $text_len|0;
 $compression = $compression|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $comp = 0, $key_len = 0, $new_key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 48|0;
 $new_key = sp + 20|0;
 $comp = sp;
 $0 = $png_ptr;
 $1 = $key;
 $2 = $text;
 $3 = $text_len;
 $4 = $compression;
 $5 = (($comp) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = (($comp) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = (($comp) + 16|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$comp>>2] = 0;
 $8 = (($comp) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = $1;
 $11 = (_png_check_keyword($9,$10,$new_key)|0);
 $key_len = $11;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $0;
  $14 = HEAP32[$new_key>>2]|0;
  _png_free($13,$14);
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = $2;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = $4;
   $22 = ($21|0)==(-1);
   if (!($22)) {
    $28 = $2;
    $29 = (_strlen(($28|0))|0);
    $3 = $29;
    $30 = $0;
    $31 = $2;
    $32 = $3;
    $33 = $4;
    $34 = (_png_text_compress($30,$31,$32,$33,$comp)|0);
    $3 = $34;
    $35 = $0;
    $36 = $key_len;
    $37 = $3;
    $38 = (($36) + ($37))|0;
    $39 = (($38) + 2)|0;
    _png_write_chunk_start($35,7840,$39);
    $40 = $0;
    $41 = HEAP32[$new_key>>2]|0;
    $42 = $key_len;
    $43 = (($42) + 1)|0;
    _png_write_chunk_data($40,$41,$43);
    $44 = $0;
    $45 = HEAP32[$new_key>>2]|0;
    _png_free($44,$45);
    $46 = $4;
    $47 = $46&255;
    HEAP8[$buf>>0] = $47;
    $48 = $0;
    _png_write_chunk_data($48,$buf,1);
    $49 = $0;
    _png_write_compressed_data_out($49,$comp);
    $50 = $0;
    _png_write_chunk_end($50);
    STACKTOP = sp;return;
   }
  }
 }
 $23 = $0;
 $24 = HEAP32[$new_key>>2]|0;
 $25 = $2;
 _png_write_tEXt($23,$24,$25,0);
 $26 = $0;
 $27 = HEAP32[$new_key>>2]|0;
 _png_free($26,$27);
 STACKTOP = sp;return;
}
function _png_write_oFFs($png_ptr,$x_offset,$y_offset,$unit_type) {
 $png_ptr = $png_ptr|0;
 $x_offset = $x_offset|0;
 $y_offset = $y_offset|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $x_offset;
 $2 = $y_offset;
 $3 = $unit_type;
 $4 = $3;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $0;
  _png_warning($6,12144);
 }
 $7 = $1;
 _png_save_int_32($buf,$7);
 $8 = (($buf) + 4|0);
 $9 = $2;
 _png_save_int_32($8,$9);
 $10 = $3;
 $11 = $10&255;
 $12 = (($buf) + 8|0);
 HEAP8[$12>>0] = $11;
 $13 = $0;
 _png_write_chunk($13,7760,$buf,9);
 STACKTOP = sp;return;
}
function _png_write_pCAL($png_ptr,$purpose,$X0,$X1,$type,$nparams,$units,$params) {
 $png_ptr = $png_ptr|0;
 $purpose = $purpose|0;
 $X0 = $X0|0;
 $X1 = $X1|0;
 $type = $type|0;
 $nparams = $nparams|0;
 $units = $units|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $buf = 0, $i = 0, $new_purpose = 0, $params_len = 0, $purpose_len = 0, $total_len = 0, $units_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 56|0;
 $new_purpose = sp + 4|0;
 $0 = $png_ptr;
 $1 = $purpose;
 $2 = $X0;
 $3 = $X1;
 $4 = $type;
 $5 = $nparams;
 $6 = $units;
 $7 = $params;
 $8 = $4;
 $9 = ($8|0)>=(4);
 if ($9) {
  $10 = $0;
  _png_warning($10,12184);
 }
 $11 = $0;
 $12 = $1;
 $13 = (_png_check_keyword($11,$12,$new_purpose)|0);
 $14 = (($13) + 1)|0;
 $purpose_len = $14;
 $15 = $6;
 $16 = (_strlen(($15|0))|0);
 $17 = $5;
 $18 = ($17|0)==(0);
 $19 = $18 ? 0 : 1;
 $20 = (($16) + ($19))|0;
 $units_len = $20;
 $21 = $purpose_len;
 $22 = $units_len;
 $23 = (($21) + ($22))|0;
 $24 = (($23) + 10)|0;
 $total_len = $24;
 $25 = $0;
 $26 = $5;
 $27 = $26<<2;
 $28 = (_png_malloc($25,$27)|0);
 $params_len = $28;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $5;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  $33 = $7;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_strlen(($35|0))|0);
  $37 = $i;
  $38 = $5;
  $39 = (($38) - 1)|0;
  $40 = ($37|0)==($39|0);
  $41 = $40 ? 0 : 1;
  $42 = (($36) + ($41))|0;
  $43 = $i;
  $44 = $params_len;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = $42;
  $46 = $i;
  $47 = $params_len;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $total_len;
  $51 = (($50) + ($49))|0;
  $total_len = $51;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $0;
 $55 = $total_len;
 _png_write_chunk_start($54,7768,$55);
 $56 = $0;
 $57 = HEAP32[$new_purpose>>2]|0;
 $58 = $purpose_len;
 _png_write_chunk_data($56,$57,$58);
 $59 = $2;
 _png_save_int_32($buf,$59);
 $60 = (($buf) + 4|0);
 $61 = $3;
 _png_save_int_32($60,$61);
 $62 = $4;
 $63 = $62&255;
 $64 = (($buf) + 8|0);
 HEAP8[$64>>0] = $63;
 $65 = $5;
 $66 = $65&255;
 $67 = (($buf) + 9|0);
 HEAP8[$67>>0] = $66;
 $68 = $0;
 _png_write_chunk_data($68,$buf,10);
 $69 = $0;
 $70 = $6;
 $71 = $units_len;
 _png_write_chunk_data($69,$70,$71);
 $72 = $0;
 $73 = HEAP32[$new_purpose>>2]|0;
 _png_free($72,$73);
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = $5;
  $76 = ($74|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $0;
  $78 = $i;
  $79 = $7;
  $80 = (($79) + ($78<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $i;
  $83 = $params_len;
  $84 = (($83) + ($82<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  _png_write_chunk_data($77,$81,$85);
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $0;
 $89 = $params_len;
 _png_free($88,$89);
 $90 = $0;
 _png_write_chunk_end($90);
 STACKTOP = sp;return;
}
function _png_write_sCAL($png_ptr,$unit,$width,$height) {
 $png_ptr = $png_ptr|0;
 $unit = $unit|0;
 $width = +$width;
 $height = +$height;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $buf = 0, $total_len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $buf = sp + 48|0;
 $0 = $png_ptr;
 $1 = $unit;
 $2 = $width;
 $3 = $height;
 $4 = $1;
 $5 = $4&255;
 HEAP8[$buf>>0] = $5;
 $6 = (($buf) + 1|0);
 $7 = $2;
 HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_snprintf($6,63,12232,$vararg_buffer)|0);
 $8 = (($buf) + 1|0);
 $9 = (_strlen(($8|0))|0);
 $10 = (1 + ($9))|0;
 $11 = (($10) + 1)|0;
 $total_len = $11;
 $12 = $total_len;
 $13 = (($buf) + ($12)|0);
 $14 = $total_len;
 $15 = (64 - ($14))|0;
 $16 = $3;
 HEAPF64[tempDoublePtr>>3]=$16;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_snprintf($13,$15,12232,$vararg_buffer1)|0);
 $17 = $total_len;
 $18 = (($buf) + ($17)|0);
 $19 = (_strlen(($18|0))|0);
 $20 = $total_len;
 $21 = (($20) + ($19))|0;
 $total_len = $21;
 $22 = $0;
 $23 = $total_len;
 _png_write_chunk($22,7776,$buf,$23);
 STACKTOP = sp;return;
}
function _png_write_pHYs($png_ptr,$x_pixels_per_unit,$y_pixels_per_unit,$unit_type) {
 $png_ptr = $png_ptr|0;
 $x_pixels_per_unit = $x_pixels_per_unit|0;
 $y_pixels_per_unit = $y_pixels_per_unit|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $x_pixels_per_unit;
 $2 = $y_pixels_per_unit;
 $3 = $unit_type;
 $4 = $3;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $0;
  _png_warning($6,12240);
 }
 $7 = $1;
 _png_save_uint_32($buf,$7);
 $8 = (($buf) + 4|0);
 $9 = $2;
 _png_save_uint_32($8,$9);
 $10 = $3;
 $11 = $10&255;
 $12 = (($buf) + 8|0);
 HEAP8[$12>>0] = $11;
 $13 = $0;
 _png_write_chunk($13,7784,$buf,9);
 STACKTOP = sp;return;
}
function _png_write_tIME($png_ptr,$mod_time) {
 $png_ptr = $png_ptr|0;
 $mod_time = $mod_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $0 = $png_ptr;
 $1 = $mod_time;
 $2 = $1;
 $3 = (($2) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)>(12);
 if (!($6)) {
  $7 = $1;
  $8 = (($7) + 2|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)<(1);
  if (!($11)) {
   $12 = $1;
   $13 = (($12) + 3|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)>(31);
   if (!($16)) {
    $17 = $1;
    $18 = (($17) + 3|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = ($20|0)<(1);
    if (!($21)) {
     $22 = $1;
     $23 = (($22) + 4|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = ($25|0)>(23);
     if (!($26)) {
      $27 = $1;
      $28 = (($27) + 6|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = ($30|0)>(60);
      if (!($31)) {
       $33 = $1;
       $34 = HEAP16[$33>>1]|0;
       $35 = $34&65535;
       _png_save_uint_16($buf,$35);
       $36 = $1;
       $37 = (($36) + 2|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = (($buf) + 2|0);
       HEAP8[$39>>0] = $38;
       $40 = $1;
       $41 = (($40) + 3|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = (($buf) + 3|0);
       HEAP8[$43>>0] = $42;
       $44 = $1;
       $45 = (($44) + 4|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = (($buf) + 4|0);
       HEAP8[$47>>0] = $46;
       $48 = $1;
       $49 = (($48) + 5|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($buf) + 5|0);
       HEAP8[$51>>0] = $50;
       $52 = $1;
       $53 = (($52) + 6|0);
       $54 = HEAP8[$53>>0]|0;
       $55 = (($buf) + 6|0);
       HEAP8[$55>>0] = $54;
       $56 = $0;
       _png_write_chunk($56,7824,$buf,7);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $32 = $0;
 _png_warning($32,12280);
 STACKTOP = sp;return;
}
function _png_write_start_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (($1) + 391|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $0;
 $6 = (($5) + 388|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = Math_imul($4, $8)|0;
 $10 = ($9|0)>=(8);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 292|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = (($14) + 391|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $0;
  $19 = (($18) + 388|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = Math_imul($17, $21)|0;
  $23 = $22 >>> 3;
  $24 = Math_imul($13, $23)|0;
  $41 = $24;
 } else {
  $25 = $0;
  $26 = (($25) + 292|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  $29 = (($28) + 391|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $0;
  $33 = (($32) + 388|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = Math_imul($31, $35)|0;
  $37 = Math_imul($27, $36)|0;
  $38 = (($37) + 7)|0;
  $39 = $38 >>> 3;
  $41 = $39;
 }
 $40 = (($41) + 1)|0;
 $buf_size = $40;
 $42 = $0;
 $43 = $buf_size;
 $44 = (_png_malloc($42,$43)|0);
 $45 = $0;
 $46 = (($45) + 328|0);
 HEAP32[$46>>2] = $44;
 $47 = $0;
 $48 = (($47) + 328|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP8[$49>>0] = 0;
 $50 = $0;
 $51 = (($50) + 385|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 & 16;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $0;
  $57 = $0;
  $58 = (($57) + 308|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  $61 = (_png_malloc($56,$60)|0);
  $62 = $0;
  $63 = (($62) + 332|0);
  HEAP32[$63>>2] = $61;
  $64 = $0;
  $65 = (($64) + 332|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP8[$66>>0] = 1;
 }
 $67 = $0;
 $68 = (($67) + 385|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 & 224;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $0;
  $74 = $buf_size;
  $75 = (_png_calloc($73,$74)|0);
  $76 = $0;
  $77 = (($76) + 324|0);
  HEAP32[$77>>2] = $75;
  $78 = $0;
  $79 = (($78) + 385|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 & 32;
  $83 = ($82|0)!=(0);
  if ($83) {
   $84 = $0;
   $85 = $0;
   $86 = (($85) + 308|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) + 1)|0;
   $89 = (_png_malloc($84,$88)|0);
   $90 = $0;
   $91 = (($90) + 336|0);
   HEAP32[$91>>2] = $89;
   $92 = $0;
   $93 = (($92) + 336|0);
   $94 = HEAP32[$93>>2]|0;
   HEAP8[$94>>0] = 2;
  }
  $95 = $0;
  $96 = (($95) + 385|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 & 64;
  $100 = ($99|0)!=(0);
  if ($100) {
   $101 = $0;
   $102 = $0;
   $103 = (($102) + 308|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + 1)|0;
   $106 = (_png_malloc($101,$105)|0);
   $107 = $0;
   $108 = (($107) + 340|0);
   HEAP32[$108>>2] = $106;
   $109 = $0;
   $110 = (($109) + 340|0);
   $111 = HEAP32[$110>>2]|0;
   HEAP8[$111>>0] = 3;
  }
  $112 = $0;
  $113 = (($112) + 385|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $115 & 128;
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = $0;
   $119 = $0;
   $120 = (($119) + 308|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + 1)|0;
   $123 = (_png_malloc($118,$122)|0);
   $124 = $0;
   $125 = (($124) + 344|0);
   HEAP32[$125>>2] = $123;
   $126 = $0;
   $127 = (($126) + 344|0);
   $128 = HEAP32[$127>>2]|0;
   HEAP8[$128>>0] = 4;
  }
 }
 $129 = $0;
 $130 = (($129) + 383|0);
 $131 = HEAP8[$130>>0]|0;
 $132 = ($131<<24>>24)!=(0);
 if (!($132)) {
  $172 = $0;
  $173 = (($172) + 296|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $0;
  $176 = (($175) + 300|0);
  HEAP32[$176>>2] = $174;
  $177 = $0;
  $178 = (($177) + 292|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $0;
  $181 = (($180) + 304|0);
  HEAP32[$181>>2] = $179;
  $182 = $0;
  $183 = (($182) + 268|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $0;
  $186 = (($185) + 208|0);
  $187 = (($186) + 16|0);
  HEAP32[$187>>2] = $184;
  $188 = $0;
  $189 = (($188) + 264|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $0;
  $192 = (($191) + 208|0);
  $193 = (($192) + 12|0);
  HEAP32[$193>>2] = $190;
  STACKTOP = sp;return;
 }
 $133 = $0;
 $134 = (($133) + 204|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 & 2;
 $137 = ($136|0)!=(0);
 if ($137) {
  $162 = $0;
  $163 = (($162) + 296|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $0;
  $166 = (($165) + 300|0);
  HEAP32[$166>>2] = $164;
  $167 = $0;
  $168 = (($167) + 292|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $0;
  $171 = (($170) + 304|0);
  HEAP32[$171>>2] = $169;
 } else {
  $138 = $0;
  $139 = (($138) + 296|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = HEAP32[7944>>2]|0;
  $142 = (($140) + ($141))|0;
  $143 = (($142) - 1)|0;
  $144 = HEAP32[7912>>2]|0;
  $145 = (($143) - ($144))|0;
  $146 = HEAP32[7944>>2]|0;
  $147 = (($145>>>0) / ($146>>>0))&-1;
  $148 = $0;
  $149 = (($148) + 300|0);
  HEAP32[$149>>2] = $147;
  $150 = $0;
  $151 = (($150) + 292|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = HEAP32[7880>>2]|0;
  $154 = (($152) + ($153))|0;
  $155 = (($154) - 1)|0;
  $156 = HEAP32[7848>>2]|0;
  $157 = (($155) - ($156))|0;
  $158 = HEAP32[7880>>2]|0;
  $159 = (($157>>>0) / ($158>>>0))&-1;
  $160 = $0;
  $161 = (($160) + 304|0);
  HEAP32[$161>>2] = $159;
 }
 $182 = $0;
 $183 = (($182) + 268|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = $0;
 $186 = (($185) + 208|0);
 $187 = (($186) + 16|0);
 HEAP32[$187>>2] = $184;
 $188 = $0;
 $189 = (($188) + 264|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $0;
 $192 = (($191) + 208|0);
 $193 = (($192) + 12|0);
 HEAP32[$193>>2] = $190;
 STACKTOP = sp;return;
}
function _png_write_finish_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (($1) + 320|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 320|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 300|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 383|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)!=(0);
 do {
  if ($15) {
   $16 = $0;
   $17 = (($16) + 320|0);
   HEAP32[$17>>2] = 0;
   $18 = $0;
   $19 = (($18) + 204|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 2;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $0;
    $24 = (($23) + 384|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = (($25) + 1)<<24>>24;
    HEAP8[$24>>0] = $26;
   } else {
    while(1) {
     $27 = $0;
     $28 = (($27) + 384|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = (($29) + 1)<<24>>24;
     HEAP8[$28>>0] = $30;
     $31 = $0;
     $32 = (($31) + 384|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = ($34|0)>=(7);
     if ($35) {
      label = 8;
      break;
     }
     $36 = $0;
     $37 = (($36) + 292|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $0;
     $40 = (($39) + 384|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = (7880 + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($38) + ($44))|0;
     $46 = (($45) - 1)|0;
     $47 = $0;
     $48 = (($47) + 384|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (7848 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($46) - ($52))|0;
     $54 = $0;
     $55 = (($54) + 384|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = (7880 + ($57<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($53>>>0) / ($59>>>0))&-1;
     $61 = $0;
     $62 = (($61) + 304|0);
     HEAP32[$62>>2] = $60;
     $63 = $0;
     $64 = (($63) + 296|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $0;
     $67 = (($66) + 384|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = (7944 + ($69<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($65) + ($71))|0;
     $73 = (($72) - 1)|0;
     $74 = $0;
     $75 = (($74) + 384|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = (7912 + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($73) - ($79))|0;
     $81 = $0;
     $82 = (($81) + 384|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = (7944 + ($84<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($80>>>0) / ($86>>>0))&-1;
     $88 = $0;
     $89 = (($88) + 300|0);
     HEAP32[$89>>2] = $87;
     $90 = $0;
     $91 = (($90) + 204|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92 & 2;
     $94 = ($93|0)!=(0);
     if ($94) {
      label = 10;
      break;
     }
     $95 = $0;
     $96 = (($95) + 304|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(0);
     if ($98) {
      $225 = 1;
     } else {
      $99 = $0;
      $100 = (($99) + 300|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)==(0);
      $225 = $102;
     }
     if (!($225)) {
      break;
     }
    }
    if ((label|0) == 8) {
    }
    else if ((label|0) == 10) {
    }
   }
   $103 = $0;
   $104 = (($103) + 384|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = ($106|0)<(7);
   if (!($107)) {
    break;
   }
   $108 = $0;
   $109 = (($108) + 324|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = $0;
    $113 = (($112) + 324|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $0;
    $116 = (($115) + 391|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = $0;
    $120 = (($119) + 388|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = Math_imul($118, $122)|0;
    $124 = ($123|0)>=(8);
    if ($124) {
     $125 = $0;
     $126 = (($125) + 292|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $0;
     $129 = (($128) + 391|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130&255;
     $132 = $0;
     $133 = (($132) + 388|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     $136 = Math_imul($131, $135)|0;
     $137 = $136 >>> 3;
     $138 = Math_imul($127, $137)|0;
     $155 = $138;
    } else {
     $139 = $0;
     $140 = (($139) + 292|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $0;
     $143 = (($142) + 391|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = $0;
     $147 = (($146) + 388|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = Math_imul($145, $149)|0;
     $151 = Math_imul($141, $150)|0;
     $152 = (($151) + 7)|0;
     $153 = $152 >>> 3;
     $155 = $153;
    }
    $154 = (($155) + 1)|0;
    _memset(($114|0),0,($154|0))|0;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 while(1) {
  $156 = $0;
  $157 = (($156) + 208|0);
  $158 = (_deflate($157,4)|0);
  $ret = $158;
  $159 = $ret;
  $160 = ($159|0)==(0);
  if ($160) {
   $161 = $0;
   $162 = (($161) + 208|0);
   $163 = (($162) + 16|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)!=(0);
   if (!($165)) {
    $166 = $0;
    $167 = $0;
    $168 = (($167) + 264|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $0;
    $171 = (($170) + 268|0);
    $172 = HEAP32[$171>>2]|0;
    _png_write_IDAT($166,$169,$172);
    $173 = $0;
    $174 = (($173) + 264|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $0;
    $177 = (($176) + 208|0);
    $178 = (($177) + 12|0);
    HEAP32[$178>>2] = $175;
    $179 = $0;
    $180 = (($179) + 268|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $0;
    $183 = (($182) + 208|0);
    $184 = (($183) + 16|0);
    HEAP32[$184>>2] = $181;
   }
  } else {
   $185 = $ret;
   $186 = ($185|0)!=(1);
   if ($186) {
    $187 = $0;
    $188 = (($187) + 208|0);
    $189 = (($188) + 24|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)!=(0|0);
    if ($191) {
     $192 = $0;
     $193 = $0;
     $194 = (($193) + 208|0);
     $195 = (($194) + 24|0);
     $196 = HEAP32[$195>>2]|0;
     _png_error($192,$196);
    } else {
     $197 = $0;
     _png_error($197,12320);
    }
   }
  }
  $198 = $ret;
  $199 = ($198|0)!=(1);
  if (!($199)) {
   break;
  }
 }
 $200 = $0;
 $201 = (($200) + 208|0);
 $202 = (($201) + 16|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = $0;
 $205 = (($204) + 268|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ($203>>>0)<($206>>>0);
 if ($207) {
  $208 = $0;
  $209 = $0;
  $210 = (($209) + 264|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $0;
  $213 = (($212) + 268|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $0;
  $216 = (($215) + 208|0);
  $217 = (($216) + 16|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($214) - ($218))|0;
  _png_write_IDAT($208,$211,$219);
 }
 $220 = $0;
 $221 = (($220) + 208|0);
 (_deflateReset($221)|0);
 $222 = $0;
 $223 = (($222) + 208|0);
 $224 = (($223) + 44|0);
 HEAP32[$224>>2] = 0;
 STACKTOP = sp;return;
}
function _png_do_write_interlace($row_info,$row,$pass) {
 $row_info = $row_info|0;
 $row = $row|0;
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d11 = 0, $d4 = 0;
 var $dp = 0, $dp16 = 0, $dp2 = 0, $dp9 = 0, $i = 0, $i13 = 0, $i17 = 0, $i6 = 0, $pixel_bytes = 0, $row_width = 0, $row_width14 = 0, $row_width18 = 0, $row_width7 = 0, $shift = 0, $shift10 = 0, $shift3 = 0, $sp = 0, $sp1 = 0, $sp15 = 0, $sp8 = 0;
 var $value = 0, $value12 = 0, $value5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $pass;
 $3 = $2;
 $4 = ($3|0)<(6);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 if ((($8|0) == 2)) {
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $row_width7 = $54;
  $55 = $1;
  $dp2 = $55;
  $shift3 = 6;
  $d4 = 0;
  $56 = $2;
  $57 = (7848 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $i6 = $58;
  while(1) {
   $59 = $i6;
   $60 = $row_width7;
   $61 = ($59>>>0)<($60>>>0);
   if (!($61)) {
    break;
   }
   $62 = $1;
   $63 = $i6;
   $64 = $63 >>> 2;
   $65 = (($62) + ($64)|0);
   $sp1 = $65;
   $66 = $sp1;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $i6;
   $70 = $69 & 3;
   $71 = (3 - ($70))|0;
   $72 = $71 << 1;
   $73 = $68 >> $72;
   $74 = $73 & 3;
   $value5 = $74;
   $75 = $value5;
   $76 = $shift3;
   $77 = $75 << $76;
   $78 = $d4;
   $79 = $78 | $77;
   $d4 = $79;
   $80 = $shift3;
   $81 = ($80|0)==(0);
   if ($81) {
    $shift3 = 6;
    $82 = $d4;
    $83 = $82&255;
    $84 = $dp2;
    $85 = (($84) + 1|0);
    $dp2 = $85;
    HEAP8[$84>>0] = $83;
    $d4 = 0;
   } else {
    $86 = $shift3;
    $87 = (($86) - 2)|0;
    $shift3 = $87;
   }
   $88 = $2;
   $89 = (7880 + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $i6;
   $92 = (($91) + ($90))|0;
   $i6 = $92;
  }
  $93 = $shift3;
  $94 = ($93|0)!=(6);
  if ($94) {
   $95 = $d4;
   $96 = $95&255;
   $97 = $dp2;
   HEAP8[$97>>0] = $96;
  }
 } else if ((($8|0) == 1)) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $row_width = $10;
  $11 = $1;
  $dp = $11;
  $d = 0;
  $shift = 7;
  $12 = $2;
  $13 = (7848 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $i = $14;
  while(1) {
   $15 = $i;
   $16 = $row_width;
   $17 = ($15>>>0)<($16>>>0);
   if (!($17)) {
    break;
   }
   $18 = $1;
   $19 = $i;
   $20 = $19 >>> 3;
   $21 = (($18) + ($20)|0);
   $sp = $21;
   $22 = $sp;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $i;
   $26 = $25 & 7;
   $27 = (7 - ($26))|0;
   $28 = $24 >> $27;
   $29 = $28 & 1;
   $value = $29;
   $30 = $value;
   $31 = $shift;
   $32 = $30 << $31;
   $33 = $d;
   $34 = $33 | $32;
   $d = $34;
   $35 = $shift;
   $36 = ($35|0)==(0);
   if ($36) {
    $shift = 7;
    $37 = $d;
    $38 = $37&255;
    $39 = $dp;
    $40 = (($39) + 1|0);
    $dp = $40;
    HEAP8[$39>>0] = $38;
    $d = 0;
   } else {
    $41 = $shift;
    $42 = (($41) + -1)|0;
    $shift = $42;
   }
   $43 = $2;
   $44 = (7880 + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $i;
   $47 = (($46) + ($45))|0;
   $i = $47;
  }
  $48 = $shift;
  $49 = ($48|0)!=(7);
  if ($49) {
   $50 = $d;
   $51 = $50&255;
   $52 = $dp;
   HEAP8[$52>>0] = $51;
  }
 } else if ((($8|0) == 4)) {
  $98 = $0;
  $99 = HEAP32[$98>>2]|0;
  $row_width14 = $99;
  $100 = $1;
  $dp9 = $100;
  $shift10 = 4;
  $d11 = 0;
  $101 = $2;
  $102 = (7848 + ($101<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $i13 = $103;
  while(1) {
   $104 = $i13;
   $105 = $row_width14;
   $106 = ($104>>>0)<($105>>>0);
   if (!($106)) {
    break;
   }
   $107 = $1;
   $108 = $i13;
   $109 = $108 >>> 1;
   $110 = (($107) + ($109)|0);
   $sp8 = $110;
   $111 = $sp8;
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $i13;
   $115 = $114 & 1;
   $116 = (1 - ($115))|0;
   $117 = $116 << 2;
   $118 = $113 >> $117;
   $119 = $118 & 15;
   $value12 = $119;
   $120 = $value12;
   $121 = $shift10;
   $122 = $120 << $121;
   $123 = $d11;
   $124 = $123 | $122;
   $d11 = $124;
   $125 = $shift10;
   $126 = ($125|0)==(0);
   if ($126) {
    $shift10 = 4;
    $127 = $d11;
    $128 = $127&255;
    $129 = $dp9;
    $130 = (($129) + 1|0);
    $dp9 = $130;
    HEAP8[$129>>0] = $128;
    $d11 = 0;
   } else {
    $131 = $shift10;
    $132 = (($131) - 4)|0;
    $shift10 = $132;
   }
   $133 = $2;
   $134 = (7880 + ($133<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $i13;
   $137 = (($136) + ($135))|0;
   $i13 = $137;
  }
  $138 = $shift10;
  $139 = ($138|0)!=(4);
  if ($139) {
   $140 = $d11;
   $141 = $140&255;
   $142 = $dp9;
   HEAP8[$142>>0] = $141;
  }
 } else {
  $143 = $0;
  $144 = HEAP32[$143>>2]|0;
  $row_width18 = $144;
  $145 = $1;
  $dp16 = $145;
  $146 = $0;
  $147 = (($146) + 11|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 >> 3;
  $pixel_bytes = $150;
  $151 = $2;
  $152 = (7848 + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $i17 = $153;
  while(1) {
   $154 = $i17;
   $155 = $row_width18;
   $156 = ($154>>>0)<($155>>>0);
   if (!($156)) {
    break;
   }
   $157 = $1;
   $158 = $i17;
   $159 = $pixel_bytes;
   $160 = Math_imul($158, $159)|0;
   $161 = (($157) + ($160)|0);
   $sp15 = $161;
   $162 = $dp16;
   $163 = $sp15;
   $164 = ($162|0)!=($163|0);
   if ($164) {
    $165 = $dp16;
    $166 = $sp15;
    $167 = $pixel_bytes;
    _memcpy(($165|0),($166|0),($167|0))|0;
   }
   $168 = $pixel_bytes;
   $169 = $dp16;
   $170 = (($169) + ($168)|0);
   $dp16 = $170;
   $171 = $2;
   $172 = (7880 + ($171<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $i17;
   $175 = (($174) + ($173))|0;
   $i17 = $175;
  }
 }
 $176 = $0;
 $177 = HEAP32[$176>>2]|0;
 $178 = $2;
 $179 = (7880 + ($178<<2)|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (($177) + ($180))|0;
 $182 = (($181) - 1)|0;
 $183 = $2;
 $184 = (7848 + ($183<<2)|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (($182) - ($185))|0;
 $187 = $2;
 $188 = (7880 + ($187<<2)|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($186>>>0) / ($189>>>0))&-1;
 $191 = $0;
 HEAP32[$191>>2] = $190;
 $192 = $0;
 $193 = (($192) + 11|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = $194&255;
 $196 = ($195|0)>=(8);
 if ($196) {
  $197 = $0;
  $198 = HEAP32[$197>>2]|0;
  $199 = $0;
  $200 = (($199) + 11|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $202 >>> 3;
  $204 = Math_imul($198, $203)|0;
  $216 = $204;
 } else {
  $205 = $0;
  $206 = HEAP32[$205>>2]|0;
  $207 = $0;
  $208 = (($207) + 11|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&255;
  $211 = Math_imul($206, $210)|0;
  $212 = (($211) + 7)|0;
  $213 = $212 >>> 3;
  $216 = $213;
 }
 $214 = $0;
 $215 = (($214) + 4|0);
 HEAP32[$215>>2] = $216;
 STACKTOP = sp;return;
}
function _png_write_find_filter($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $a65 = 0, $b = 0, $b66 = 0;
 var $best_row = 0, $bpp = 0, $c = 0, $c67 = 0, $cp = 0, $cp56 = 0, $dp = 0, $dp14 = 0, $dp17 = 0, $dp30 = 0, $dp35 = 0, $dp4 = 0, $dp49 = 0, $dp54 = 0, $filter_to_do = 0, $i = 0, $i15 = 0, $i2 = 0, $i21 = 0, $i33 = 0;
 var $i40 = 0, $i52 = 0, $i60 = 0, $i7 = 0, $j = 0, $j10 = 0, $j23 = 0, $j26 = 0, $j42 = 0, $j45 = 0, $j62 = 0, $j72 = 0, $j75 = 0, $j9 = 0, $lmhi = 0, $lmhi24 = 0, $lmhi43 = 0, $lmhi63 = 0, $lmins = 0, $lmins20 = 0;
 var $lmins39 = 0, $lmins59 = 0, $lmlo = 0, $lmlo25 = 0, $lmlo44 = 0, $lmlo64 = 0, $lp = 0, $lp32 = 0, $lp37 = 0, $lp5 = 0, $lp51 = 0, $lp57 = 0, $mins = 0, $num_p_filters = 0, $p = 0, $p71 = 0, $pa = 0, $pa68 = 0, $pb = 0, $pb69 = 0;
 var $pc = 0, $pc70 = 0, $pp = 0, $pp18 = 0, $pp31 = 0, $pp36 = 0, $pp50 = 0, $pp55 = 0, $prev_row = 0, $row_buf = 0, $row_bytes = 0, $rp = 0, $rp1 = 0, $rp13 = 0, $rp16 = 0, $rp29 = 0, $rp3 = 0, $rp34 = 0, $rp48 = 0, $rp53 = 0;
 var $sum = 0, $sum19 = 0, $sum38 = 0, $sum58 = 0, $sum6 = 0, $sumhi = 0, $sumhi11 = 0, $sumhi27 = 0, $sumhi46 = 0, $sumhi73 = 0, $sumlo = 0, $sumlo12 = 0, $sumlo28 = 0, $sumlo47 = 0, $sumlo74 = 0, $v = 0, $v22 = 0, $v41 = 0, $v61 = 0, $v8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $row_info;
 $2 = $0;
 $3 = (($2) + 385|0);
 $4 = HEAP8[$3>>0]|0;
 $filter_to_do = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $row_bytes = $7;
 $8 = $0;
 $9 = (($8) + 597|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $num_p_filters = $11;
 $12 = $1;
 $13 = (($12) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 7)|0;
 $17 = $16 >> 3;
 $bpp = $17;
 $18 = $0;
 $19 = (($18) + 324|0);
 $20 = HEAP32[$19>>2]|0;
 $prev_row = $20;
 $21 = $0;
 $22 = (($21) + 328|0);
 $23 = HEAP32[$22>>2]|0;
 $best_row = $23;
 $24 = $best_row;
 $row_buf = $24;
 $mins = 2147483647;
 $25 = $filter_to_do;
 $26 = $25&255;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $filter_to_do;
  $30 = $29&255;
  $31 = ($30|0)!=(8);
  if ($31) {
   $sum = 0;
   $i = 0;
   $32 = $row_buf;
   $33 = (($32) + 1|0);
   $rp = $33;
   while(1) {
    $34 = $i;
    $35 = $row_bytes;
    $36 = ($34>>>0)<($35>>>0);
    if (!($36)) {
     break;
    }
    $37 = $rp;
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $v = $39;
    $40 = $v;
    $41 = ($40|0)<(128);
    if ($41) {
     $42 = $v;
     $47 = $42;
    } else {
     $43 = $v;
     $44 = (256 - ($43))|0;
     $47 = $44;
    }
    $45 = $sum;
    $46 = (($45) + ($47))|0;
    $sum = $46;
    $48 = $i;
    $49 = (($48) + 1)|0;
    $i = $49;
    $50 = $rp;
    $51 = (($50) + 1|0);
    $rp = $51;
   }
   $52 = $0;
   $53 = (($52) + 596|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)==(2);
   if ($56) {
    $57 = $sum;
    $58 = $57 & 65535;
    $sumlo = $58;
    $59 = $sum;
    $60 = $59 >>> 10;
    $61 = $60 & 4194240;
    $sumhi = $61;
    $j = 0;
    while(1) {
     $62 = $j;
     $63 = $num_p_filters;
     $64 = ($62|0)<($63|0);
     if (!($64)) {
      break;
     }
     $65 = $j;
     $66 = $0;
     $67 = (($66) + 600|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + ($65)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = ($71|0)==(0);
     if ($72) {
      $73 = $sumlo;
      $74 = $j;
      $75 = $0;
      $76 = (($75) + 604|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + ($74<<1)|0);
      $79 = HEAP16[$78>>1]|0;
      $80 = $79&65535;
      $81 = Math_imul($73, $80)|0;
      $82 = $81 >>> 8;
      $sumlo = $82;
      $83 = $sumhi;
      $84 = $j;
      $85 = $0;
      $86 = (($85) + 604|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (($87) + ($84<<1)|0);
      $89 = HEAP16[$88>>1]|0;
      $90 = $89&65535;
      $91 = Math_imul($83, $90)|0;
      $92 = $91 >>> 8;
      $sumhi = $92;
     }
     $93 = $j;
     $94 = (($93) + 1)|0;
     $j = $94;
    }
    $95 = $sumlo;
    $96 = $0;
    $97 = (($96) + 612|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP16[$98>>1]|0;
    $100 = $99&65535;
    $101 = Math_imul($95, $100)|0;
    $102 = $101 >>> 3;
    $sumlo = $102;
    $103 = $sumhi;
    $104 = $0;
    $105 = (($104) + 612|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = Math_imul($103, $108)|0;
    $110 = $109 >>> 3;
    $sumhi = $110;
    $111 = $sumhi;
    $112 = ($111>>>0)>(4194240);
    if ($112) {
     $sum = 2147483647;
    } else {
     $113 = $sumhi;
     $114 = $113 << 10;
     $115 = $sumlo;
     $116 = (($114) + ($115))|0;
     $sum = $116;
    }
   }
   $117 = $sum;
   $mins = $117;
  }
 }
 $118 = $filter_to_do;
 $119 = $118&255;
 $120 = ($119|0)==(16);
 if ($120) {
  $i2 = 0;
  $121 = $row_buf;
  $122 = (($121) + 1|0);
  $rp1 = $122;
  $123 = $0;
  $124 = (($123) + 332|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + 1|0);
  $dp = $126;
  while(1) {
   $127 = $i2;
   $128 = $bpp;
   $129 = ($127>>>0)<($128>>>0);
   if (!($129)) {
    break;
   }
   $130 = $rp1;
   $131 = HEAP8[$130>>0]|0;
   $132 = $dp;
   HEAP8[$132>>0] = $131;
   $133 = $i2;
   $134 = (($133) + 1)|0;
   $i2 = $134;
   $135 = $rp1;
   $136 = (($135) + 1|0);
   $rp1 = $136;
   $137 = $dp;
   $138 = (($137) + 1|0);
   $dp = $138;
  }
  $139 = $row_buf;
  $140 = (($139) + 1|0);
  $lp = $140;
  while(1) {
   $141 = $i2;
   $142 = $row_bytes;
   $143 = ($141>>>0)<($142>>>0);
   if (!($143)) {
    break;
   }
   $144 = $rp1;
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = $lp;
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($146) - ($149))|0;
   $151 = $150 & 255;
   $152 = $151&255;
   $153 = $dp;
   HEAP8[$153>>0] = $152;
   $154 = $i2;
   $155 = (($154) + 1)|0;
   $i2 = $155;
   $156 = $rp1;
   $157 = (($156) + 1|0);
   $rp1 = $157;
   $158 = $lp;
   $159 = (($158) + 1|0);
   $lp = $159;
   $160 = $dp;
   $161 = (($160) + 1|0);
   $dp = $161;
  }
  $162 = $0;
  $163 = (($162) + 332|0);
  $164 = HEAP32[$163>>2]|0;
  $best_row = $164;
 } else {
  $165 = $filter_to_do;
  $166 = $165&255;
  $167 = $166 & 16;
  $168 = ($167|0)!=(0);
  if ($168) {
   $sum6 = 0;
   $169 = $mins;
   $lmins = $169;
   $170 = $0;
   $171 = (($170) + 596|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = ($173|0)==(2);
   if ($174) {
    $175 = $lmins;
    $176 = $175 & 65535;
    $lmlo = $176;
    $177 = $lmins;
    $178 = $177 >>> 10;
    $179 = $178 & 4194240;
    $lmhi = $179;
    $j9 = 0;
    while(1) {
     $180 = $j9;
     $181 = $num_p_filters;
     $182 = ($180|0)<($181|0);
     if (!($182)) {
      break;
     }
     $183 = $j9;
     $184 = $0;
     $185 = (($184) + 600|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + ($183)|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = ($189|0)==(1);
     if ($190) {
      $191 = $lmlo;
      $192 = $j9;
      $193 = $0;
      $194 = (($193) + 608|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + ($192<<1)|0);
      $197 = HEAP16[$196>>1]|0;
      $198 = $197&65535;
      $199 = Math_imul($191, $198)|0;
      $200 = $199 >>> 8;
      $lmlo = $200;
      $201 = $lmhi;
      $202 = $j9;
      $203 = $0;
      $204 = (($203) + 608|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (($205) + ($202<<1)|0);
      $207 = HEAP16[$206>>1]|0;
      $208 = $207&65535;
      $209 = Math_imul($201, $208)|0;
      $210 = $209 >>> 8;
      $lmhi = $210;
     }
     $211 = $j9;
     $212 = (($211) + 1)|0;
     $j9 = $212;
    }
    $213 = $lmlo;
    $214 = $0;
    $215 = (($214) + 616|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (($216) + 2|0);
    $218 = HEAP16[$217>>1]|0;
    $219 = $218&65535;
    $220 = Math_imul($213, $219)|0;
    $221 = $220 >>> 3;
    $lmlo = $221;
    $222 = $lmhi;
    $223 = $0;
    $224 = (($223) + 616|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 2|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = $227&65535;
    $229 = Math_imul($222, $228)|0;
    $230 = $229 >>> 3;
    $lmhi = $230;
    $231 = $lmhi;
    $232 = ($231>>>0)>(4194240);
    if ($232) {
     $lmins = 2147483647;
    } else {
     $233 = $lmhi;
     $234 = $233 << 10;
     $235 = $lmlo;
     $236 = (($234) + ($235))|0;
     $lmins = $236;
    }
   }
   $i7 = 0;
   $237 = $row_buf;
   $238 = (($237) + 1|0);
   $rp3 = $238;
   $239 = $0;
   $240 = (($239) + 332|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (($241) + 1|0);
   $dp4 = $242;
   while(1) {
    $243 = $i7;
    $244 = $bpp;
    $245 = ($243>>>0)<($244>>>0);
    if (!($245)) {
     break;
    }
    $246 = $rp3;
    $247 = HEAP8[$246>>0]|0;
    $248 = $dp4;
    HEAP8[$248>>0] = $247;
    $249 = $247&255;
    $v8 = $249;
    $250 = $v8;
    $251 = ($250|0)<(128);
    if ($251) {
     $252 = $v8;
     $257 = $252;
    } else {
     $253 = $v8;
     $254 = (256 - ($253))|0;
     $257 = $254;
    }
    $255 = $sum6;
    $256 = (($255) + ($257))|0;
    $sum6 = $256;
    $258 = $i7;
    $259 = (($258) + 1)|0;
    $i7 = $259;
    $260 = $rp3;
    $261 = (($260) + 1|0);
    $rp3 = $261;
    $262 = $dp4;
    $263 = (($262) + 1|0);
    $dp4 = $263;
   }
   $264 = $row_buf;
   $265 = (($264) + 1|0);
   $lp5 = $265;
   while(1) {
    $266 = $i7;
    $267 = $row_bytes;
    $268 = ($266>>>0)<($267>>>0);
    if (!($268)) {
     break;
    }
    $269 = $rp3;
    $270 = HEAP8[$269>>0]|0;
    $271 = $270&255;
    $272 = $lp5;
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = (($271) - ($274))|0;
    $276 = $275 & 255;
    $277 = $276&255;
    $278 = $dp4;
    HEAP8[$278>>0] = $277;
    $279 = $277&255;
    $v8 = $279;
    $280 = $v8;
    $281 = ($280|0)<(128);
    if ($281) {
     $282 = $v8;
     $287 = $282;
    } else {
     $283 = $v8;
     $284 = (256 - ($283))|0;
     $287 = $284;
    }
    $285 = $sum6;
    $286 = (($285) + ($287))|0;
    $sum6 = $286;
    $288 = $sum6;
    $289 = $lmins;
    $290 = ($288>>>0)>($289>>>0);
    if ($290) {
     label = 57;
     break;
    }
    $291 = $i7;
    $292 = (($291) + 1)|0;
    $i7 = $292;
    $293 = $rp3;
    $294 = (($293) + 1|0);
    $rp3 = $294;
    $295 = $lp5;
    $296 = (($295) + 1|0);
    $lp5 = $296;
    $297 = $dp4;
    $298 = (($297) + 1|0);
    $dp4 = $298;
   }
   if ((label|0) == 57) {
   }
   $299 = $0;
   $300 = (($299) + 596|0);
   $301 = HEAP8[$300>>0]|0;
   $302 = $301&255;
   $303 = ($302|0)==(2);
   if ($303) {
    $304 = $sum6;
    $305 = $304 & 65535;
    $sumlo12 = $305;
    $306 = $sum6;
    $307 = $306 >>> 10;
    $308 = $307 & 4194240;
    $sumhi11 = $308;
    $j10 = 0;
    while(1) {
     $309 = $j10;
     $310 = $num_p_filters;
     $311 = ($309|0)<($310|0);
     if (!($311)) {
      break;
     }
     $312 = $j10;
     $313 = $0;
     $314 = (($313) + 600|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = (($315) + ($312)|0);
     $317 = HEAP8[$316>>0]|0;
     $318 = $317&255;
     $319 = ($318|0)==(1);
     if ($319) {
      $320 = $sumlo12;
      $321 = $j10;
      $322 = $0;
      $323 = (($322) + 608|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = (($324) + ($321<<1)|0);
      $326 = HEAP16[$325>>1]|0;
      $327 = $326&65535;
      $328 = Math_imul($320, $327)|0;
      $329 = $328 >>> 8;
      $sumlo12 = $329;
      $330 = $sumhi11;
      $331 = $j10;
      $332 = $0;
      $333 = (($332) + 608|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = (($334) + ($331<<1)|0);
      $336 = HEAP16[$335>>1]|0;
      $337 = $336&65535;
      $338 = Math_imul($330, $337)|0;
      $339 = $338 >>> 8;
      $sumhi11 = $339;
     }
     $340 = $j10;
     $341 = (($340) + 1)|0;
     $j10 = $341;
    }
    $342 = $sumlo12;
    $343 = $0;
    $344 = (($343) + 616|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + 2|0);
    $347 = HEAP16[$346>>1]|0;
    $348 = $347&65535;
    $349 = Math_imul($342, $348)|0;
    $350 = $349 >>> 3;
    $sumlo12 = $350;
    $351 = $sumhi11;
    $352 = $0;
    $353 = (($352) + 616|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = (($354) + 2|0);
    $356 = HEAP16[$355>>1]|0;
    $357 = $356&65535;
    $358 = Math_imul($351, $357)|0;
    $359 = $358 >>> 3;
    $sumhi11 = $359;
    $360 = $sumhi11;
    $361 = ($360>>>0)>(4194240);
    if ($361) {
     $sum6 = 2147483647;
    } else {
     $362 = $sumhi11;
     $363 = $362 << 10;
     $364 = $sumlo12;
     $365 = (($363) + ($364))|0;
     $sum6 = $365;
    }
   }
   $366 = $sum6;
   $367 = $mins;
   $368 = ($366>>>0)<($367>>>0);
   if ($368) {
    $369 = $sum6;
    $mins = $369;
    $370 = $0;
    $371 = (($370) + 332|0);
    $372 = HEAP32[$371>>2]|0;
    $best_row = $372;
   }
  }
 }
 $373 = $filter_to_do;
 $374 = $373&255;
 $375 = ($374|0)==(32);
 if ($375) {
  $i15 = 0;
  $376 = $row_buf;
  $377 = (($376) + 1|0);
  $rp13 = $377;
  $378 = $0;
  $379 = (($378) + 336|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = (($380) + 1|0);
  $dp14 = $381;
  $382 = $prev_row;
  $383 = (($382) + 1|0);
  $pp = $383;
  while(1) {
   $384 = $i15;
   $385 = $row_bytes;
   $386 = ($384>>>0)<($385>>>0);
   if (!($386)) {
    break;
   }
   $387 = $rp13;
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = $pp;
   $391 = HEAP8[$390>>0]|0;
   $392 = $391&255;
   $393 = (($389) - ($392))|0;
   $394 = $393 & 255;
   $395 = $394&255;
   $396 = $dp14;
   HEAP8[$396>>0] = $395;
   $397 = $i15;
   $398 = (($397) + 1)|0;
   $i15 = $398;
   $399 = $rp13;
   $400 = (($399) + 1|0);
   $rp13 = $400;
   $401 = $pp;
   $402 = (($401) + 1|0);
   $pp = $402;
   $403 = $dp14;
   $404 = (($403) + 1|0);
   $dp14 = $404;
  }
  $405 = $0;
  $406 = (($405) + 336|0);
  $407 = HEAP32[$406>>2]|0;
  $best_row = $407;
 } else {
  $408 = $filter_to_do;
  $409 = $408&255;
  $410 = $409 & 32;
  $411 = ($410|0)!=(0);
  if ($411) {
   $sum19 = 0;
   $412 = $mins;
   $lmins20 = $412;
   $413 = $0;
   $414 = (($413) + 596|0);
   $415 = HEAP8[$414>>0]|0;
   $416 = $415&255;
   $417 = ($416|0)==(2);
   if ($417) {
    $418 = $lmins20;
    $419 = $418 & 65535;
    $lmlo25 = $419;
    $420 = $lmins20;
    $421 = $420 >>> 10;
    $422 = $421 & 4194240;
    $lmhi24 = $422;
    $j23 = 0;
    while(1) {
     $423 = $j23;
     $424 = $num_p_filters;
     $425 = ($423|0)<($424|0);
     if (!($425)) {
      break;
     }
     $426 = $j23;
     $427 = $0;
     $428 = (($427) + 600|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = (($429) + ($426)|0);
     $431 = HEAP8[$430>>0]|0;
     $432 = $431&255;
     $433 = ($432|0)==(2);
     if ($433) {
      $434 = $lmlo25;
      $435 = $j23;
      $436 = $0;
      $437 = (($436) + 608|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = (($438) + ($435<<1)|0);
      $440 = HEAP16[$439>>1]|0;
      $441 = $440&65535;
      $442 = Math_imul($434, $441)|0;
      $443 = $442 >>> 8;
      $lmlo25 = $443;
      $444 = $lmhi24;
      $445 = $j23;
      $446 = $0;
      $447 = (($446) + 608|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = (($448) + ($445<<1)|0);
      $450 = HEAP16[$449>>1]|0;
      $451 = $450&65535;
      $452 = Math_imul($444, $451)|0;
      $453 = $452 >>> 8;
      $lmhi24 = $453;
     }
     $454 = $j23;
     $455 = (($454) + 1)|0;
     $j23 = $455;
    }
    $456 = $lmlo25;
    $457 = $0;
    $458 = (($457) + 616|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = (($459) + 4|0);
    $461 = HEAP16[$460>>1]|0;
    $462 = $461&65535;
    $463 = Math_imul($456, $462)|0;
    $464 = $463 >>> 3;
    $lmlo25 = $464;
    $465 = $lmhi24;
    $466 = $0;
    $467 = (($466) + 616|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = (($468) + 4|0);
    $470 = HEAP16[$469>>1]|0;
    $471 = $470&65535;
    $472 = Math_imul($465, $471)|0;
    $473 = $472 >>> 3;
    $lmhi24 = $473;
    $474 = $lmhi24;
    $475 = ($474>>>0)>(4194240);
    if ($475) {
     $lmins20 = 2147483647;
    } else {
     $476 = $lmhi24;
     $477 = $476 << 10;
     $478 = $lmlo25;
     $479 = (($477) + ($478))|0;
     $lmins20 = $479;
    }
   }
   $i21 = 0;
   $480 = $row_buf;
   $481 = (($480) + 1|0);
   $rp16 = $481;
   $482 = $0;
   $483 = (($482) + 336|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = (($484) + 1|0);
   $dp17 = $485;
   $486 = $prev_row;
   $487 = (($486) + 1|0);
   $pp18 = $487;
   while(1) {
    $488 = $i21;
    $489 = $row_bytes;
    $490 = ($488>>>0)<($489>>>0);
    if (!($490)) {
     break;
    }
    $491 = $rp16;
    $492 = (($491) + 1|0);
    $rp16 = $492;
    $493 = HEAP8[$491>>0]|0;
    $494 = $493&255;
    $495 = $pp18;
    $496 = (($495) + 1|0);
    $pp18 = $496;
    $497 = HEAP8[$495>>0]|0;
    $498 = $497&255;
    $499 = (($494) - ($498))|0;
    $500 = $499 & 255;
    $501 = $500&255;
    $502 = $dp17;
    $503 = (($502) + 1|0);
    $dp17 = $503;
    HEAP8[$502>>0] = $501;
    $504 = $501&255;
    $v22 = $504;
    $505 = $v22;
    $506 = ($505|0)<(128);
    if ($506) {
     $507 = $v22;
     $512 = $507;
    } else {
     $508 = $v22;
     $509 = (256 - ($508))|0;
     $512 = $509;
    }
    $510 = $sum19;
    $511 = (($510) + ($512))|0;
    $sum19 = $511;
    $513 = $sum19;
    $514 = $lmins20;
    $515 = ($513>>>0)>($514>>>0);
    if ($515) {
     label = 99;
     break;
    }
    $516 = $i21;
    $517 = (($516) + 1)|0;
    $i21 = $517;
   }
   if ((label|0) == 99) {
   }
   $518 = $0;
   $519 = (($518) + 596|0);
   $520 = HEAP8[$519>>0]|0;
   $521 = $520&255;
   $522 = ($521|0)==(2);
   if ($522) {
    $523 = $sum19;
    $524 = $523 & 65535;
    $sumlo28 = $524;
    $525 = $sum19;
    $526 = $525 >>> 10;
    $527 = $526 & 4194240;
    $sumhi27 = $527;
    $j26 = 0;
    while(1) {
     $528 = $j26;
     $529 = $num_p_filters;
     $530 = ($528|0)<($529|0);
     if (!($530)) {
      break;
     }
     $531 = $j26;
     $532 = $0;
     $533 = (($532) + 600|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = (($534) + ($531)|0);
     $536 = HEAP8[$535>>0]|0;
     $537 = $536&255;
     $538 = ($537|0)==(2);
     if ($538) {
      $539 = $sumlo28;
      $540 = $j26;
      $541 = $0;
      $542 = (($541) + 604|0);
      $543 = HEAP32[$542>>2]|0;
      $544 = (($543) + ($540<<1)|0);
      $545 = HEAP16[$544>>1]|0;
      $546 = $545&65535;
      $547 = Math_imul($539, $546)|0;
      $548 = $547 >>> 8;
      $sumlo28 = $548;
      $549 = $sumhi27;
      $550 = $j26;
      $551 = $0;
      $552 = (($551) + 604|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = (($553) + ($550<<1)|0);
      $555 = HEAP16[$554>>1]|0;
      $556 = $555&65535;
      $557 = Math_imul($549, $556)|0;
      $558 = $557 >>> 8;
      $sumhi27 = $558;
     }
     $559 = $j26;
     $560 = (($559) + 1)|0;
     $j26 = $560;
    }
    $561 = $sumlo28;
    $562 = $0;
    $563 = (($562) + 612|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = (($564) + 4|0);
    $566 = HEAP16[$565>>1]|0;
    $567 = $566&65535;
    $568 = Math_imul($561, $567)|0;
    $569 = $568 >>> 3;
    $sumlo28 = $569;
    $570 = $sumhi27;
    $571 = $0;
    $572 = (($571) + 612|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = (($573) + 4|0);
    $575 = HEAP16[$574>>1]|0;
    $576 = $575&65535;
    $577 = Math_imul($570, $576)|0;
    $578 = $577 >>> 3;
    $sumhi27 = $578;
    $579 = $sumhi27;
    $580 = ($579>>>0)>(4194240);
    if ($580) {
     $sum19 = 2147483647;
    } else {
     $581 = $sumhi27;
     $582 = $581 << 10;
     $583 = $sumlo28;
     $584 = (($582) + ($583))|0;
     $sum19 = $584;
    }
   }
   $585 = $sum19;
   $586 = $mins;
   $587 = ($585>>>0)<($586>>>0);
   if ($587) {
    $588 = $sum19;
    $mins = $588;
    $589 = $0;
    $590 = (($589) + 336|0);
    $591 = HEAP32[$590>>2]|0;
    $best_row = $591;
   }
  }
 }
 $592 = $filter_to_do;
 $593 = $592&255;
 $594 = ($593|0)==(64);
 if ($594) {
  $i33 = 0;
  $595 = $row_buf;
  $596 = (($595) + 1|0);
  $rp29 = $596;
  $597 = $0;
  $598 = (($597) + 340|0);
  $599 = HEAP32[$598>>2]|0;
  $600 = (($599) + 1|0);
  $dp30 = $600;
  $601 = $prev_row;
  $602 = (($601) + 1|0);
  $pp31 = $602;
  while(1) {
   $603 = $i33;
   $604 = $bpp;
   $605 = ($603>>>0)<($604>>>0);
   if (!($605)) {
    break;
   }
   $606 = $rp29;
   $607 = (($606) + 1|0);
   $rp29 = $607;
   $608 = HEAP8[$606>>0]|0;
   $609 = $608&255;
   $610 = $pp31;
   $611 = (($610) + 1|0);
   $pp31 = $611;
   $612 = HEAP8[$610>>0]|0;
   $613 = $612&255;
   $614 = (($613|0) / 2)&-1;
   $615 = (($609) - ($614))|0;
   $616 = $615 & 255;
   $617 = $616&255;
   $618 = $dp30;
   $619 = (($618) + 1|0);
   $dp30 = $619;
   HEAP8[$618>>0] = $617;
   $620 = $i33;
   $621 = (($620) + 1)|0;
   $i33 = $621;
  }
  $622 = $row_buf;
  $623 = (($622) + 1|0);
  $lp32 = $623;
  while(1) {
   $624 = $i33;
   $625 = $row_bytes;
   $626 = ($624>>>0)<($625>>>0);
   if (!($626)) {
    break;
   }
   $627 = $rp29;
   $628 = (($627) + 1|0);
   $rp29 = $628;
   $629 = HEAP8[$627>>0]|0;
   $630 = $629&255;
   $631 = $pp31;
   $632 = (($631) + 1|0);
   $pp31 = $632;
   $633 = HEAP8[$631>>0]|0;
   $634 = $633&255;
   $635 = $lp32;
   $636 = (($635) + 1|0);
   $lp32 = $636;
   $637 = HEAP8[$635>>0]|0;
   $638 = $637&255;
   $639 = (($634) + ($638))|0;
   $640 = (($639|0) / 2)&-1;
   $641 = (($630) - ($640))|0;
   $642 = $641 & 255;
   $643 = $642&255;
   $644 = $dp30;
   $645 = (($644) + 1|0);
   $dp30 = $645;
   HEAP8[$644>>0] = $643;
   $646 = $i33;
   $647 = (($646) + 1)|0;
   $i33 = $647;
  }
  $648 = $0;
  $649 = (($648) + 340|0);
  $650 = HEAP32[$649>>2]|0;
  $best_row = $650;
 } else {
  $651 = $filter_to_do;
  $652 = $651&255;
  $653 = $652 & 64;
  $654 = ($653|0)!=(0);
  if ($654) {
   $sum38 = 0;
   $655 = $mins;
   $lmins39 = $655;
   $656 = $0;
   $657 = (($656) + 596|0);
   $658 = HEAP8[$657>>0]|0;
   $659 = $658&255;
   $660 = ($659|0)==(2);
   if ($660) {
    $661 = $lmins39;
    $662 = $661 & 65535;
    $lmlo44 = $662;
    $663 = $lmins39;
    $664 = $663 >>> 10;
    $665 = $664 & 4194240;
    $lmhi43 = $665;
    $j42 = 0;
    while(1) {
     $666 = $j42;
     $667 = $num_p_filters;
     $668 = ($666|0)<($667|0);
     if (!($668)) {
      break;
     }
     $669 = $j42;
     $670 = $0;
     $671 = (($670) + 600|0);
     $672 = HEAP32[$671>>2]|0;
     $673 = (($672) + ($669)|0);
     $674 = HEAP8[$673>>0]|0;
     $675 = $674&255;
     $676 = ($675|0)==(3);
     if ($676) {
      $677 = $lmlo44;
      $678 = $j42;
      $679 = $0;
      $680 = (($679) + 608|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = (($681) + ($678<<1)|0);
      $683 = HEAP16[$682>>1]|0;
      $684 = $683&65535;
      $685 = Math_imul($677, $684)|0;
      $686 = $685 >>> 8;
      $lmlo44 = $686;
      $687 = $lmhi43;
      $688 = $j42;
      $689 = $0;
      $690 = (($689) + 608|0);
      $691 = HEAP32[$690>>2]|0;
      $692 = (($691) + ($688<<1)|0);
      $693 = HEAP16[$692>>1]|0;
      $694 = $693&65535;
      $695 = Math_imul($687, $694)|0;
      $696 = $695 >>> 8;
      $lmhi43 = $696;
     }
     $697 = $j42;
     $698 = (($697) + 1)|0;
     $j42 = $698;
    }
    $699 = $lmlo44;
    $700 = $0;
    $701 = (($700) + 616|0);
    $702 = HEAP32[$701>>2]|0;
    $703 = (($702) + 6|0);
    $704 = HEAP16[$703>>1]|0;
    $705 = $704&65535;
    $706 = Math_imul($699, $705)|0;
    $707 = $706 >>> 3;
    $lmlo44 = $707;
    $708 = $lmhi43;
    $709 = $0;
    $710 = (($709) + 616|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (($711) + 6|0);
    $713 = HEAP16[$712>>1]|0;
    $714 = $713&65535;
    $715 = Math_imul($708, $714)|0;
    $716 = $715 >>> 3;
    $lmhi43 = $716;
    $717 = $lmhi43;
    $718 = ($717>>>0)>(4194240);
    if ($718) {
     $lmins39 = 2147483647;
    } else {
     $719 = $lmhi43;
     $720 = $719 << 10;
     $721 = $lmlo44;
     $722 = (($720) + ($721))|0;
     $lmins39 = $722;
    }
   }
   $i40 = 0;
   $723 = $row_buf;
   $724 = (($723) + 1|0);
   $rp34 = $724;
   $725 = $0;
   $726 = (($725) + 340|0);
   $727 = HEAP32[$726>>2]|0;
   $728 = (($727) + 1|0);
   $dp35 = $728;
   $729 = $prev_row;
   $730 = (($729) + 1|0);
   $pp36 = $730;
   while(1) {
    $731 = $i40;
    $732 = $bpp;
    $733 = ($731>>>0)<($732>>>0);
    if (!($733)) {
     break;
    }
    $734 = $rp34;
    $735 = (($734) + 1|0);
    $rp34 = $735;
    $736 = HEAP8[$734>>0]|0;
    $737 = $736&255;
    $738 = $pp36;
    $739 = (($738) + 1|0);
    $pp36 = $739;
    $740 = HEAP8[$738>>0]|0;
    $741 = $740&255;
    $742 = (($741|0) / 2)&-1;
    $743 = (($737) - ($742))|0;
    $744 = $743 & 255;
    $745 = $744&255;
    $746 = $dp35;
    $747 = (($746) + 1|0);
    $dp35 = $747;
    HEAP8[$746>>0] = $745;
    $748 = $745&255;
    $v41 = $748;
    $749 = $v41;
    $750 = ($749|0)<(128);
    if ($750) {
     $751 = $v41;
     $756 = $751;
    } else {
     $752 = $v41;
     $753 = (256 - ($752))|0;
     $756 = $753;
    }
    $754 = $sum38;
    $755 = (($754) + ($756))|0;
    $sum38 = $755;
    $757 = $i40;
    $758 = (($757) + 1)|0;
    $i40 = $758;
   }
   $759 = $row_buf;
   $760 = (($759) + 1|0);
   $lp37 = $760;
   while(1) {
    $761 = $i40;
    $762 = $row_bytes;
    $763 = ($761>>>0)<($762>>>0);
    if (!($763)) {
     break;
    }
    $764 = $rp34;
    $765 = (($764) + 1|0);
    $rp34 = $765;
    $766 = HEAP8[$764>>0]|0;
    $767 = $766&255;
    $768 = $pp36;
    $769 = (($768) + 1|0);
    $pp36 = $769;
    $770 = HEAP8[$768>>0]|0;
    $771 = $770&255;
    $772 = $lp37;
    $773 = (($772) + 1|0);
    $lp37 = $773;
    $774 = HEAP8[$772>>0]|0;
    $775 = $774&255;
    $776 = (($771) + ($775))|0;
    $777 = (($776|0) / 2)&-1;
    $778 = (($767) - ($777))|0;
    $779 = $778 & 255;
    $780 = $779&255;
    $781 = $dp35;
    $782 = (($781) + 1|0);
    $dp35 = $782;
    HEAP8[$781>>0] = $780;
    $783 = $780&255;
    $v41 = $783;
    $784 = $v41;
    $785 = ($784|0)<(128);
    if ($785) {
     $786 = $v41;
     $791 = $786;
    } else {
     $787 = $v41;
     $788 = (256 - ($787))|0;
     $791 = $788;
    }
    $789 = $sum38;
    $790 = (($789) + ($791))|0;
    $sum38 = $790;
    $792 = $sum38;
    $793 = $lmins39;
    $794 = ($792>>>0)>($793>>>0);
    if ($794) {
     label = 152;
     break;
    }
    $795 = $i40;
    $796 = (($795) + 1)|0;
    $i40 = $796;
   }
   if ((label|0) == 152) {
   }
   $797 = $0;
   $798 = (($797) + 596|0);
   $799 = HEAP8[$798>>0]|0;
   $800 = $799&255;
   $801 = ($800|0)==(2);
   if ($801) {
    $802 = $sum38;
    $803 = $802 & 65535;
    $sumlo47 = $803;
    $804 = $sum38;
    $805 = $804 >>> 10;
    $806 = $805 & 4194240;
    $sumhi46 = $806;
    $j45 = 0;
    while(1) {
     $807 = $j45;
     $808 = $num_p_filters;
     $809 = ($807|0)<($808|0);
     if (!($809)) {
      break;
     }
     $810 = $j45;
     $811 = $0;
     $812 = (($811) + 600|0);
     $813 = HEAP32[$812>>2]|0;
     $814 = (($813) + ($810)|0);
     $815 = HEAP8[$814>>0]|0;
     $816 = $815&255;
     $817 = ($816|0)==(0);
     if ($817) {
      $818 = $sumlo47;
      $819 = $j45;
      $820 = $0;
      $821 = (($820) + 604|0);
      $822 = HEAP32[$821>>2]|0;
      $823 = (($822) + ($819<<1)|0);
      $824 = HEAP16[$823>>1]|0;
      $825 = $824&65535;
      $826 = Math_imul($818, $825)|0;
      $827 = $826 >>> 8;
      $sumlo47 = $827;
      $828 = $sumhi46;
      $829 = $j45;
      $830 = $0;
      $831 = (($830) + 604|0);
      $832 = HEAP32[$831>>2]|0;
      $833 = (($832) + ($829<<1)|0);
      $834 = HEAP16[$833>>1]|0;
      $835 = $834&65535;
      $836 = Math_imul($828, $835)|0;
      $837 = $836 >>> 8;
      $sumhi46 = $837;
     }
     $838 = $j45;
     $839 = (($838) + 1)|0;
     $j45 = $839;
    }
    $840 = $sumlo47;
    $841 = $0;
    $842 = (($841) + 612|0);
    $843 = HEAP32[$842>>2]|0;
    $844 = (($843) + 6|0);
    $845 = HEAP16[$844>>1]|0;
    $846 = $845&65535;
    $847 = Math_imul($840, $846)|0;
    $848 = $847 >>> 3;
    $sumlo47 = $848;
    $849 = $sumhi46;
    $850 = $0;
    $851 = (($850) + 612|0);
    $852 = HEAP32[$851>>2]|0;
    $853 = (($852) + 6|0);
    $854 = HEAP16[$853>>1]|0;
    $855 = $854&65535;
    $856 = Math_imul($849, $855)|0;
    $857 = $856 >>> 3;
    $sumhi46 = $857;
    $858 = $sumhi46;
    $859 = ($858>>>0)>(4194240);
    if ($859) {
     $sum38 = 2147483647;
    } else {
     $860 = $sumhi46;
     $861 = $860 << 10;
     $862 = $sumlo47;
     $863 = (($861) + ($862))|0;
     $sum38 = $863;
    }
   }
   $864 = $sum38;
   $865 = $mins;
   $866 = ($864>>>0)<($865>>>0);
   if ($866) {
    $867 = $sum38;
    $mins = $867;
    $868 = $0;
    $869 = (($868) + 340|0);
    $870 = HEAP32[$869>>2]|0;
    $best_row = $870;
   }
  }
 }
 $871 = $filter_to_do;
 $872 = $871&255;
 $873 = ($872|0)==(128);
 if ($873) {
  $i52 = 0;
  $874 = $row_buf;
  $875 = (($874) + 1|0);
  $rp48 = $875;
  $876 = $0;
  $877 = (($876) + 344|0);
  $878 = HEAP32[$877>>2]|0;
  $879 = (($878) + 1|0);
  $dp49 = $879;
  $880 = $prev_row;
  $881 = (($880) + 1|0);
  $pp50 = $881;
  while(1) {
   $882 = $i52;
   $883 = $bpp;
   $884 = ($882>>>0)<($883>>>0);
   if (!($884)) {
    break;
   }
   $885 = $rp48;
   $886 = (($885) + 1|0);
   $rp48 = $886;
   $887 = HEAP8[$885>>0]|0;
   $888 = $887&255;
   $889 = $pp50;
   $890 = (($889) + 1|0);
   $pp50 = $890;
   $891 = HEAP8[$889>>0]|0;
   $892 = $891&255;
   $893 = (($888) - ($892))|0;
   $894 = $893 & 255;
   $895 = $894&255;
   $896 = $dp49;
   $897 = (($896) + 1|0);
   $dp49 = $897;
   HEAP8[$896>>0] = $895;
   $898 = $i52;
   $899 = (($898) + 1)|0;
   $i52 = $899;
  }
  $900 = $row_buf;
  $901 = (($900) + 1|0);
  $lp51 = $901;
  $902 = $prev_row;
  $903 = (($902) + 1|0);
  $cp = $903;
  while(1) {
   $904 = $i52;
   $905 = $row_bytes;
   $906 = ($904>>>0)<($905>>>0);
   if (!($906)) {
    break;
   }
   $907 = $pp50;
   $908 = (($907) + 1|0);
   $pp50 = $908;
   $909 = HEAP8[$907>>0]|0;
   $910 = $909&255;
   $b = $910;
   $911 = $cp;
   $912 = (($911) + 1|0);
   $cp = $912;
   $913 = HEAP8[$911>>0]|0;
   $914 = $913&255;
   $c = $914;
   $915 = $lp51;
   $916 = (($915) + 1|0);
   $lp51 = $916;
   $917 = HEAP8[$915>>0]|0;
   $918 = $917&255;
   $a = $918;
   $919 = $b;
   $920 = $c;
   $921 = (($919) - ($920))|0;
   $p = $921;
   $922 = $a;
   $923 = $c;
   $924 = (($922) - ($923))|0;
   $pc = $924;
   $925 = $p;
   $926 = ($925|0)<(0);
   if ($926) {
    $927 = $p;
    $928 = (0 - ($927))|0;
    $930 = $928;
   } else {
    $929 = $p;
    $930 = $929;
   }
   $pa = $930;
   $931 = $pc;
   $932 = ($931|0)<(0);
   if ($932) {
    $933 = $pc;
    $934 = (0 - ($933))|0;
    $936 = $934;
   } else {
    $935 = $pc;
    $936 = $935;
   }
   $pb = $936;
   $937 = $p;
   $938 = $pc;
   $939 = (($937) + ($938))|0;
   $940 = ($939|0)<(0);
   if ($940) {
    $941 = $p;
    $942 = $pc;
    $943 = (($941) + ($942))|0;
    $944 = (0 - ($943))|0;
    $948 = $944;
   } else {
    $945 = $p;
    $946 = $pc;
    $947 = (($945) + ($946))|0;
    $948 = $947;
   }
   $pc = $948;
   $949 = $pa;
   $950 = $pb;
   $951 = ($949|0)<=($950|0);
   if ($951) {
    $952 = $pa;
    $953 = $pc;
    $954 = ($952|0)<=($953|0);
    if ($954) {
     $955 = $a;
     $961 = $955;
    } else {
     label = 189;
    }
   } else {
    label = 189;
   }
   if ((label|0) == 189) {
    label = 0;
    $956 = $pb;
    $957 = $pc;
    $958 = ($956|0)<=($957|0);
    if ($958) {
     $959 = $b;
     $1274 = $959;
    } else {
     $960 = $c;
     $1274 = $960;
    }
    $961 = $1274;
   }
   $p = $961;
   $962 = $rp48;
   $963 = (($962) + 1|0);
   $rp48 = $963;
   $964 = HEAP8[$962>>0]|0;
   $965 = $964&255;
   $966 = $p;
   $967 = (($965) - ($966))|0;
   $968 = $967 & 255;
   $969 = $968&255;
   $970 = $dp49;
   $971 = (($970) + 1|0);
   $dp49 = $971;
   HEAP8[$970>>0] = $969;
   $972 = $i52;
   $973 = (($972) + 1)|0;
   $i52 = $973;
  }
  $974 = $0;
  $975 = (($974) + 344|0);
  $976 = HEAP32[$975>>2]|0;
  $best_row = $976;
 } else {
  $977 = $filter_to_do;
  $978 = $977&255;
  $979 = $978 & 128;
  $980 = ($979|0)!=(0);
  if ($980) {
   $sum58 = 0;
   $981 = $mins;
   $lmins59 = $981;
   $982 = $0;
   $983 = (($982) + 596|0);
   $984 = HEAP8[$983>>0]|0;
   $985 = $984&255;
   $986 = ($985|0)==(2);
   if ($986) {
    $987 = $lmins59;
    $988 = $987 & 65535;
    $lmlo64 = $988;
    $989 = $lmins59;
    $990 = $989 >>> 10;
    $991 = $990 & 4194240;
    $lmhi63 = $991;
    $j62 = 0;
    while(1) {
     $992 = $j62;
     $993 = $num_p_filters;
     $994 = ($992|0)<($993|0);
     if (!($994)) {
      break;
     }
     $995 = $j62;
     $996 = $0;
     $997 = (($996) + 600|0);
     $998 = HEAP32[$997>>2]|0;
     $999 = (($998) + ($995)|0);
     $1000 = HEAP8[$999>>0]|0;
     $1001 = $1000&255;
     $1002 = ($1001|0)==(4);
     if ($1002) {
      $1003 = $lmlo64;
      $1004 = $j62;
      $1005 = $0;
      $1006 = (($1005) + 608|0);
      $1007 = HEAP32[$1006>>2]|0;
      $1008 = (($1007) + ($1004<<1)|0);
      $1009 = HEAP16[$1008>>1]|0;
      $1010 = $1009&65535;
      $1011 = Math_imul($1003, $1010)|0;
      $1012 = $1011 >>> 8;
      $lmlo64 = $1012;
      $1013 = $lmhi63;
      $1014 = $j62;
      $1015 = $0;
      $1016 = (($1015) + 608|0);
      $1017 = HEAP32[$1016>>2]|0;
      $1018 = (($1017) + ($1014<<1)|0);
      $1019 = HEAP16[$1018>>1]|0;
      $1020 = $1019&65535;
      $1021 = Math_imul($1013, $1020)|0;
      $1022 = $1021 >>> 8;
      $lmhi63 = $1022;
     }
     $1023 = $j62;
     $1024 = (($1023) + 1)|0;
     $j62 = $1024;
    }
    $1025 = $lmlo64;
    $1026 = $0;
    $1027 = (($1026) + 616|0);
    $1028 = HEAP32[$1027>>2]|0;
    $1029 = (($1028) + 8|0);
    $1030 = HEAP16[$1029>>1]|0;
    $1031 = $1030&65535;
    $1032 = Math_imul($1025, $1031)|0;
    $1033 = $1032 >>> 3;
    $lmlo64 = $1033;
    $1034 = $lmhi63;
    $1035 = $0;
    $1036 = (($1035) + 616|0);
    $1037 = HEAP32[$1036>>2]|0;
    $1038 = (($1037) + 8|0);
    $1039 = HEAP16[$1038>>1]|0;
    $1040 = $1039&65535;
    $1041 = Math_imul($1034, $1040)|0;
    $1042 = $1041 >>> 3;
    $lmhi63 = $1042;
    $1043 = $lmhi63;
    $1044 = ($1043>>>0)>(4194240);
    if ($1044) {
     $lmins59 = 2147483647;
    } else {
     $1045 = $lmhi63;
     $1046 = $1045 << 10;
     $1047 = $lmlo64;
     $1048 = (($1046) + ($1047))|0;
     $lmins59 = $1048;
    }
   }
   $i60 = 0;
   $1049 = $row_buf;
   $1050 = (($1049) + 1|0);
   $rp53 = $1050;
   $1051 = $0;
   $1052 = (($1051) + 344|0);
   $1053 = HEAP32[$1052>>2]|0;
   $1054 = (($1053) + 1|0);
   $dp54 = $1054;
   $1055 = $prev_row;
   $1056 = (($1055) + 1|0);
   $pp55 = $1056;
   while(1) {
    $1057 = $i60;
    $1058 = $bpp;
    $1059 = ($1057>>>0)<($1058>>>0);
    if (!($1059)) {
     break;
    }
    $1060 = $rp53;
    $1061 = (($1060) + 1|0);
    $rp53 = $1061;
    $1062 = HEAP8[$1060>>0]|0;
    $1063 = $1062&255;
    $1064 = $pp55;
    $1065 = (($1064) + 1|0);
    $pp55 = $1065;
    $1066 = HEAP8[$1064>>0]|0;
    $1067 = $1066&255;
    $1068 = (($1063) - ($1067))|0;
    $1069 = $1068 & 255;
    $1070 = $1069&255;
    $1071 = $dp54;
    $1072 = (($1071) + 1|0);
    $dp54 = $1072;
    HEAP8[$1071>>0] = $1070;
    $1073 = $1070&255;
    $v61 = $1073;
    $1074 = $v61;
    $1075 = ($1074|0)<(128);
    if ($1075) {
     $1076 = $v61;
     $1081 = $1076;
    } else {
     $1077 = $v61;
     $1078 = (256 - ($1077))|0;
     $1081 = $1078;
    }
    $1079 = $sum58;
    $1080 = (($1079) + ($1081))|0;
    $sum58 = $1080;
    $1082 = $i60;
    $1083 = (($1082) + 1)|0;
    $i60 = $1083;
   }
   $1084 = $row_buf;
   $1085 = (($1084) + 1|0);
   $lp57 = $1085;
   $1086 = $prev_row;
   $1087 = (($1086) + 1|0);
   $cp56 = $1087;
   while(1) {
    $1088 = $i60;
    $1089 = $row_bytes;
    $1090 = ($1088>>>0)<($1089>>>0);
    if (!($1090)) {
     break;
    }
    $1091 = $pp55;
    $1092 = (($1091) + 1|0);
    $pp55 = $1092;
    $1093 = HEAP8[$1091>>0]|0;
    $1094 = $1093&255;
    $b66 = $1094;
    $1095 = $cp56;
    $1096 = (($1095) + 1|0);
    $cp56 = $1096;
    $1097 = HEAP8[$1095>>0]|0;
    $1098 = $1097&255;
    $c67 = $1098;
    $1099 = $lp57;
    $1100 = (($1099) + 1|0);
    $lp57 = $1100;
    $1101 = HEAP8[$1099>>0]|0;
    $1102 = $1101&255;
    $a65 = $1102;
    $1103 = $b66;
    $1104 = $c67;
    $1105 = (($1103) - ($1104))|0;
    $p71 = $1105;
    $1106 = $a65;
    $1107 = $c67;
    $1108 = (($1106) - ($1107))|0;
    $pc70 = $1108;
    $1109 = $p71;
    $1110 = ($1109|0)<(0);
    if ($1110) {
     $1111 = $p71;
     $1112 = (0 - ($1111))|0;
     $1114 = $1112;
    } else {
     $1113 = $p71;
     $1114 = $1113;
    }
    $pa68 = $1114;
    $1115 = $pc70;
    $1116 = ($1115|0)<(0);
    if ($1116) {
     $1117 = $pc70;
     $1118 = (0 - ($1117))|0;
     $1120 = $1118;
    } else {
     $1119 = $pc70;
     $1120 = $1119;
    }
    $pb69 = $1120;
    $1121 = $p71;
    $1122 = $pc70;
    $1123 = (($1121) + ($1122))|0;
    $1124 = ($1123|0)<(0);
    if ($1124) {
     $1125 = $p71;
     $1126 = $pc70;
     $1127 = (($1125) + ($1126))|0;
     $1128 = (0 - ($1127))|0;
     $1132 = $1128;
    } else {
     $1129 = $p71;
     $1130 = $pc70;
     $1131 = (($1129) + ($1130))|0;
     $1132 = $1131;
    }
    $pc70 = $1132;
    $1133 = $pa68;
    $1134 = $pb69;
    $1135 = ($1133|0)<=($1134|0);
    if ($1135) {
     $1136 = $pa68;
     $1137 = $pc70;
     $1138 = ($1136|0)<=($1137|0);
     if ($1138) {
      $1139 = $a65;
      $1145 = $1139;
     } else {
      label = 229;
     }
    } else {
     label = 229;
    }
    if ((label|0) == 229) {
     label = 0;
     $1140 = $pb69;
     $1141 = $pc70;
     $1142 = ($1140|0)<=($1141|0);
     if ($1142) {
      $1143 = $b66;
      $1275 = $1143;
     } else {
      $1144 = $c67;
      $1275 = $1144;
     }
     $1145 = $1275;
    }
    $p71 = $1145;
    $1146 = $rp53;
    $1147 = (($1146) + 1|0);
    $rp53 = $1147;
    $1148 = HEAP8[$1146>>0]|0;
    $1149 = $1148&255;
    $1150 = $p71;
    $1151 = (($1149) - ($1150))|0;
    $1152 = $1151 & 255;
    $1153 = $1152&255;
    $1154 = $dp54;
    $1155 = (($1154) + 1|0);
    $dp54 = $1155;
    HEAP8[$1154>>0] = $1153;
    $1156 = $1153&255;
    $v61 = $1156;
    $1157 = $v61;
    $1158 = ($1157|0)<(128);
    if ($1158) {
     $1159 = $v61;
     $1164 = $1159;
    } else {
     $1160 = $v61;
     $1161 = (256 - ($1160))|0;
     $1164 = $1161;
    }
    $1162 = $sum58;
    $1163 = (($1162) + ($1164))|0;
    $sum58 = $1163;
    $1165 = $sum58;
    $1166 = $lmins59;
    $1167 = ($1165>>>0)>($1166>>>0);
    if ($1167) {
     label = 237;
     break;
    }
    $1168 = $i60;
    $1169 = (($1168) + 1)|0;
    $i60 = $1169;
   }
   if ((label|0) == 237) {
   }
   $1170 = $0;
   $1171 = (($1170) + 596|0);
   $1172 = HEAP8[$1171>>0]|0;
   $1173 = $1172&255;
   $1174 = ($1173|0)==(2);
   if ($1174) {
    $1175 = $sum58;
    $1176 = $1175 & 65535;
    $sumlo74 = $1176;
    $1177 = $sum58;
    $1178 = $1177 >>> 10;
    $1179 = $1178 & 4194240;
    $sumhi73 = $1179;
    $j72 = 0;
    while(1) {
     $1180 = $j72;
     $1181 = $num_p_filters;
     $1182 = ($1180|0)<($1181|0);
     if (!($1182)) {
      break;
     }
     $1183 = $j72;
     $1184 = $0;
     $1185 = (($1184) + 600|0);
     $1186 = HEAP32[$1185>>2]|0;
     $1187 = (($1186) + ($1183)|0);
     $1188 = HEAP8[$1187>>0]|0;
     $1189 = $1188&255;
     $1190 = ($1189|0)==(4);
     if ($1190) {
      $1191 = $sumlo74;
      $1192 = $j72;
      $1193 = $0;
      $1194 = (($1193) + 604|0);
      $1195 = HEAP32[$1194>>2]|0;
      $1196 = (($1195) + ($1192<<1)|0);
      $1197 = HEAP16[$1196>>1]|0;
      $1198 = $1197&65535;
      $1199 = Math_imul($1191, $1198)|0;
      $1200 = $1199 >>> 8;
      $sumlo74 = $1200;
      $1201 = $sumhi73;
      $1202 = $j72;
      $1203 = $0;
      $1204 = (($1203) + 604|0);
      $1205 = HEAP32[$1204>>2]|0;
      $1206 = (($1205) + ($1202<<1)|0);
      $1207 = HEAP16[$1206>>1]|0;
      $1208 = $1207&65535;
      $1209 = Math_imul($1201, $1208)|0;
      $1210 = $1209 >>> 8;
      $sumhi73 = $1210;
     }
     $1211 = $j72;
     $1212 = (($1211) + 1)|0;
     $j72 = $1212;
    }
    $1213 = $sumlo74;
    $1214 = $0;
    $1215 = (($1214) + 612|0);
    $1216 = HEAP32[$1215>>2]|0;
    $1217 = (($1216) + 8|0);
    $1218 = HEAP16[$1217>>1]|0;
    $1219 = $1218&65535;
    $1220 = Math_imul($1213, $1219)|0;
    $1221 = $1220 >>> 3;
    $sumlo74 = $1221;
    $1222 = $sumhi73;
    $1223 = $0;
    $1224 = (($1223) + 612|0);
    $1225 = HEAP32[$1224>>2]|0;
    $1226 = (($1225) + 8|0);
    $1227 = HEAP16[$1226>>1]|0;
    $1228 = $1227&65535;
    $1229 = Math_imul($1222, $1228)|0;
    $1230 = $1229 >>> 3;
    $sumhi73 = $1230;
    $1231 = $sumhi73;
    $1232 = ($1231>>>0)>(4194240);
    if ($1232) {
     $sum58 = 2147483647;
    } else {
     $1233 = $sumhi73;
     $1234 = $1233 << 10;
     $1235 = $sumlo74;
     $1236 = (($1234) + ($1235))|0;
     $sum58 = $1236;
    }
   }
   $1237 = $sum58;
   $1238 = $mins;
   $1239 = ($1237>>>0)<($1238>>>0);
   if ($1239) {
    $1240 = $0;
    $1241 = (($1240) + 344|0);
    $1242 = HEAP32[$1241>>2]|0;
    $best_row = $1242;
   }
  }
 }
 $1243 = $0;
 $1244 = $best_row;
 _png_write_filtered_row($1243,$1244);
 $1245 = $0;
 $1246 = (($1245) + 597|0);
 $1247 = HEAP8[$1246>>0]|0;
 $1248 = $1247&255;
 $1249 = ($1248|0)>(0);
 if (!($1249)) {
  STACKTOP = sp;return;
 }
 $j75 = 1;
 while(1) {
  $1250 = $j75;
  $1251 = $num_p_filters;
  $1252 = ($1250|0)<($1251|0);
  if (!($1252)) {
   break;
  }
  $1253 = $j75;
  $1254 = (($1253) - 1)|0;
  $1255 = $0;
  $1256 = (($1255) + 600|0);
  $1257 = HEAP32[$1256>>2]|0;
  $1258 = (($1257) + ($1254)|0);
  $1259 = HEAP8[$1258>>0]|0;
  $1260 = $j75;
  $1261 = $0;
  $1262 = (($1261) + 600|0);
  $1263 = HEAP32[$1262>>2]|0;
  $1264 = (($1263) + ($1260)|0);
  HEAP8[$1264>>0] = $1259;
  $1265 = $j75;
  $1266 = (($1265) + 1)|0;
  $j75 = $1266;
 }
 $1267 = $best_row;
 $1268 = HEAP8[$1267>>0]|0;
 $1269 = $j75;
 $1270 = $0;
 $1271 = (($1270) + 600|0);
 $1272 = HEAP32[$1271>>2]|0;
 $1273 = (($1272) + ($1269)|0);
 HEAP8[$1273>>0] = $1268;
 STACKTOP = sp;return;
}
function _png_write_filtered_row($png_ptr,$filtered_row) {
 $png_ptr = $png_ptr|0;
 $filtered_row = $filtered_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $ret = 0, $tptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $filtered_row;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 208|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 348|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = $0;
 $11 = (($10) + 208|0);
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $9;
 while(1) {
  $13 = $0;
  $14 = (($13) + 208|0);
  $15 = (_deflate($14,0)|0);
  $ret = $15;
  $16 = $ret;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $0;
   $19 = (($18) + 208|0);
   $20 = (($19) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $0;
    $24 = $0;
    $25 = (($24) + 208|0);
    $26 = (($25) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    _png_error($23,$27);
   } else {
    $28 = $0;
    _png_error($28,12320);
   }
  }
  $29 = $0;
  $30 = (($29) + 208|0);
  $31 = (($30) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $34 = $0;
   $35 = $0;
   $36 = (($35) + 264|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $0;
   $39 = (($38) + 268|0);
   $40 = HEAP32[$39>>2]|0;
   _png_write_IDAT($34,$37,$40);
   $41 = $0;
   $42 = (($41) + 264|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $0;
   $45 = (($44) + 208|0);
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = $43;
   $47 = $0;
   $48 = (($47) + 268|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $0;
   $51 = (($50) + 208|0);
   $52 = (($51) + 16|0);
   HEAP32[$52>>2] = $49;
  }
  $53 = $0;
  $54 = (($53) + 208|0);
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   break;
  }
 }
 $58 = $0;
 $59 = (($58) + 324|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = $0;
  $63 = (($62) + 324|0);
  $64 = HEAP32[$63>>2]|0;
  $tptr = $64;
  $65 = $0;
  $66 = (($65) + 328|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $0;
  $69 = (($68) + 324|0);
  HEAP32[$69>>2] = $67;
  $70 = $tptr;
  $71 = $0;
  $72 = (($71) + 328|0);
  HEAP32[$72>>2] = $70;
 }
 $73 = $0;
 _png_write_finish_row($73);
 $74 = $0;
 $75 = (($74) + 432|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + 1)|0;
 HEAP32[$75>>2] = $77;
 $78 = $0;
 $79 = (($78) + 428|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80>>>0)>(0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = $0;
 $83 = (($82) + 432|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = (($85) + 428|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($84>>>0)>=($87>>>0);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = $0;
 _png_write_flush($89);
 STACKTOP = sp;return;
}
function _png_text_compress($png_ptr,$text,$text_len,$compression,$comp) {
 $png_ptr = $png_ptr|0;
 $text = $text|0;
 $text_len = $text_len|0;
 $compression = $compression|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $msg = 0, $old_max = 0, $old_max1 = 0, $old_ptr = 0, $old_ptr2 = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg = sp + 48|0;
 $1 = $png_ptr;
 $2 = $text;
 $3 = $text_len;
 $4 = $compression;
 $5 = $comp;
 $6 = $5;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $5;
 $9 = (($8) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = $5;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = $5;
 HEAP32[$12>>2] = 0;
 $13 = $5;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = $4;
 $16 = ($15|0)==(-1);
 if ($16) {
  $17 = $2;
  $18 = $5;
  HEAP32[$18>>2] = $17;
  $19 = $3;
  $20 = $5;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $0 = $22;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $23 = $4;
 $24 = ($23|0)>=(3);
 if ($24) {
  $25 = $4;
  HEAP32[$vararg_buffer>>2] = $25;
  (_snprintf($msg,50,12336,$vararg_buffer)|0);
  $26 = $1;
  _png_warning($26,$msg);
 }
 $27 = $3;
 $28 = $1;
 $29 = (($28) + 208|0);
 $30 = (($29) + 4|0);
 HEAP32[$30>>2] = $27;
 $31 = $2;
 $32 = $1;
 $33 = (($32) + 208|0);
 HEAP32[$33>>2] = $31;
 $34 = $1;
 $35 = (($34) + 268|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $1;
 $38 = (($37) + 208|0);
 $39 = (($38) + 16|0);
 HEAP32[$39>>2] = $36;
 $40 = $1;
 $41 = (($40) + 264|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $1;
 $44 = (($43) + 208|0);
 $45 = (($44) + 12|0);
 HEAP32[$45>>2] = $42;
 while(1) {
  $46 = $1;
  $47 = (($46) + 208|0);
  $48 = (_deflate($47,0)|0);
  $ret = $48;
  $49 = $ret;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $1;
   $52 = (($51) + 208|0);
   $53 = (($52) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $1;
    $57 = $1;
    $58 = (($57) + 208|0);
    $59 = (($58) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    _png_error($56,$60);
   } else {
    $61 = $1;
    _png_error($61,12320);
   }
  }
  $62 = $1;
  $63 = (($62) + 208|0);
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if (!($66)) {
   $67 = $5;
   $68 = (($67) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $5;
   $71 = (($70) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($69|0)>=($72|0);
   if ($73) {
    $74 = $5;
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $old_max = $76;
    $77 = $5;
    $78 = (($77) + 8|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + 4)|0;
    $81 = $5;
    $82 = (($81) + 12|0);
    HEAP32[$82>>2] = $80;
    $83 = $5;
    $84 = (($83) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)!=(0|0);
    if ($86) {
     $87 = $5;
     $88 = (($87) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $old_ptr = $89;
     $90 = $1;
     $91 = $5;
     $92 = (($91) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $93<<2;
     $95 = (_png_malloc($90,$94)|0);
     $96 = $5;
     $97 = (($96) + 16|0);
     HEAP32[$97>>2] = $95;
     $98 = $5;
     $99 = (($98) + 16|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $old_ptr;
     $102 = $old_max;
     $103 = $102<<2;
     _memcpy(($100|0),($101|0),($103|0))|0;
     $104 = $1;
     $105 = $old_ptr;
     _png_free($104,$105);
    } else {
     $106 = $1;
     $107 = $5;
     $108 = (($107) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $109<<2;
     $111 = (_png_malloc($106,$110)|0);
     $112 = $5;
     $113 = (($112) + 16|0);
     HEAP32[$113>>2] = $111;
    }
   }
   $114 = $1;
   $115 = $1;
   $116 = (($115) + 268|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (_png_malloc($114,$117)|0);
   $119 = $5;
   $120 = (($119) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $5;
   $123 = (($122) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + ($121<<2)|0);
   HEAP32[$125>>2] = $118;
   $126 = $5;
   $127 = (($126) + 8|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $5;
   $130 = (($129) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + ($128<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $1;
   $135 = (($134) + 264|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $1;
   $138 = (($137) + 268|0);
   $139 = HEAP32[$138>>2]|0;
   _memcpy(($133|0),($136|0),($139|0))|0;
   $140 = $5;
   $141 = (($140) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 1)|0;
   HEAP32[$141>>2] = $143;
   $144 = $1;
   $145 = (($144) + 268|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $1;
   $148 = (($147) + 208|0);
   $149 = (($148) + 16|0);
   HEAP32[$149>>2] = $146;
   $150 = $1;
   $151 = (($150) + 264|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $1;
   $154 = (($153) + 208|0);
   $155 = (($154) + 12|0);
   HEAP32[$155>>2] = $152;
  }
  $156 = $1;
  $157 = (($156) + 208|0);
  $158 = (($157) + 4|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)!=(0);
  if (!($160)) {
   break;
  }
 }
 while(1) {
  $161 = $1;
  $162 = (($161) + 208|0);
  $163 = (_deflate($162,4)|0);
  $ret = $163;
  $164 = $ret;
  $165 = ($164|0)==(0);
  if ($165) {
   $166 = $1;
   $167 = (($166) + 208|0);
   $168 = (($167) + 16|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($169|0)!=(0);
   if (!($170)) {
    $171 = $5;
    $172 = (($171) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $5;
    $175 = (($174) + 12|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($173|0)>=($176|0);
    if ($177) {
     $178 = $5;
     $179 = (($178) + 12|0);
     $180 = HEAP32[$179>>2]|0;
     $old_max1 = $180;
     $181 = $5;
     $182 = (($181) + 8|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + 4)|0;
     $185 = $5;
     $186 = (($185) + 12|0);
     HEAP32[$186>>2] = $184;
     $187 = $5;
     $188 = (($187) + 16|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)!=(0|0);
     if ($190) {
      $191 = $5;
      $192 = (($191) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $old_ptr2 = $193;
      $194 = $1;
      $195 = $5;
      $196 = (($195) + 12|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $197<<2;
      $199 = (_png_malloc($194,$198)|0);
      $200 = $5;
      $201 = (($200) + 16|0);
      HEAP32[$201>>2] = $199;
      $202 = $5;
      $203 = (($202) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = $old_ptr2;
      $206 = $old_max1;
      $207 = $206<<2;
      _memcpy(($204|0),($205|0),($207|0))|0;
      $208 = $1;
      $209 = $old_ptr2;
      _png_free($208,$209);
     } else {
      $210 = $1;
      $211 = $5;
      $212 = (($211) + 12|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $213<<2;
      $215 = (_png_malloc($210,$214)|0);
      $216 = $5;
      $217 = (($216) + 16|0);
      HEAP32[$217>>2] = $215;
     }
    }
    $218 = $1;
    $219 = $1;
    $220 = (($219) + 268|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (_png_malloc($218,$221)|0);
    $223 = $5;
    $224 = (($223) + 8|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $5;
    $227 = (($226) + 16|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (($228) + ($225<<2)|0);
    HEAP32[$229>>2] = $222;
    $230 = $5;
    $231 = (($230) + 8|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $5;
    $234 = (($233) + 16|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) + ($232<<2)|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $1;
    $239 = (($238) + 264|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $1;
    $242 = (($241) + 268|0);
    $243 = HEAP32[$242>>2]|0;
    _memcpy(($237|0),($240|0),($243|0))|0;
    $244 = $5;
    $245 = (($244) + 8|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($246) + 1)|0;
    HEAP32[$245>>2] = $247;
    $248 = $1;
    $249 = (($248) + 268|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $1;
    $252 = (($251) + 208|0);
    $253 = (($252) + 16|0);
    HEAP32[$253>>2] = $250;
    $254 = $1;
    $255 = (($254) + 264|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = $1;
    $258 = (($257) + 208|0);
    $259 = (($258) + 12|0);
    HEAP32[$259>>2] = $256;
   }
  } else {
   $260 = $ret;
   $261 = ($260|0)!=(1);
   if ($261) {
    $262 = $1;
    $263 = (($262) + 208|0);
    $264 = (($263) + 24|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($265|0)!=(0|0);
    if ($266) {
     $267 = $1;
     $268 = $1;
     $269 = (($268) + 208|0);
     $270 = (($269) + 24|0);
     $271 = HEAP32[$270>>2]|0;
     _png_error($267,$271);
    } else {
     $272 = $1;
     _png_error($272,12320);
    }
   }
  }
  $273 = $ret;
  $274 = ($273|0)!=(1);
  if (!($274)) {
   break;
  }
 }
 $275 = $1;
 $276 = (($275) + 268|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $5;
 $279 = (($278) + 8|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = Math_imul($277, $280)|0;
 $3 = $281;
 $282 = $1;
 $283 = (($282) + 208|0);
 $284 = (($283) + 16|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = $1;
 $287 = (($286) + 268|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = ($285>>>0)<($288>>>0);
 if ($289) {
  $290 = $1;
  $291 = (($290) + 268|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $1;
  $294 = (($293) + 208|0);
  $295 = (($294) + 16|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = (($292) - ($296))|0;
  $298 = $3;
  $299 = (($298) + ($297))|0;
  $3 = $299;
 }
 $300 = $3;
 $0 = $300;
 $301 = $0;
 STACKTOP = sp;return ($301|0);
}
function _png_write_compressed_data_out($png_ptr,$comp) {
 $png_ptr = $png_ptr|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $comp;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _png_write_chunk_data($5,$7,$10);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $1;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = $i;
  $18 = $1;
  $19 = (($18) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (($23) + 268|0);
  $25 = HEAP32[$24>>2]|0;
  _png_write_chunk_data($16,$22,$25);
  $26 = $0;
  $27 = $i;
  $28 = $1;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  _png_free($26,$32);
  $33 = $i;
  $34 = $1;
  $35 = (($34) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $1;
 $41 = (($40) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $0;
  $45 = $1;
  $46 = (($45) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  _png_free($44,$47);
 }
 $48 = $1;
 $49 = (($48) + 16|0);
 HEAP32[$49>>2] = 0;
 $50 = $0;
 $51 = (($50) + 208|0);
 $52 = (($51) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $0;
 $55 = (($54) + 268|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($53>>>0)<($56>>>0);
 if ($57) {
  $58 = $0;
  $59 = $0;
  $60 = (($59) + 264|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $0;
  $63 = (($62) + 268|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  $66 = (($65) + 208|0);
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($64) - ($68))|0;
  _png_write_chunk_data($58,$61,$69);
 }
 $70 = $0;
 $71 = (($70) + 208|0);
 (_deflateReset($71)|0);
 $72 = $0;
 $73 = (($72) + 208|0);
 $74 = (($73) + 44|0);
 HEAP32[$74>>2] = 0;
 STACKTOP = sp;return;
}
function _png_write_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = (($3) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 168|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = $1;
  $12 = $2;
  FUNCTION_TABLE_viii[$9 & 63]($10,$11,$12);
  STACKTOP = sp;return;
 } else {
  $13 = $0;
  _png_error($13,12368);
  STACKTOP = sp;return;
 }
}
function _png_default_write_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $check = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $2;
 $7 = $0;
 $8 = (($7) + 176|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fwrite(($5|0),1,($6|0),($9|0))|0);
 $check = $10;
 $11 = $check;
 $12 = $2;
 $13 = ($11|0)!=($12|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $0;
 _png_error($14,12400);
 STACKTOP = sp;return;
}
function _png_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (($1) + 424|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 424|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 FUNCTION_TABLE_vi[$7 & 63]($8);
 STACKTOP = sp;return;
}
function _png_default_flush($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $io_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $3 = $0;
  $4 = (($3) + 176|0);
  $5 = HEAP32[$4>>2]|0;
  $io_ptr = $5;
  $6 = $io_ptr;
  (_fflush(($6|0))|0);
  STACKTOP = sp;return;
 }
}
function _png_set_write_fn($png_ptr,$io_ptr,$write_data_fn,$output_flush_fn) {
 $png_ptr = $png_ptr|0;
 $io_ptr = $io_ptr|0;
 $write_data_fn = $write_data_fn|0;
 $output_flush_fn = $output_flush_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $io_ptr;
 $2 = $write_data_fn;
 $3 = $output_flush_fn;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 176|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = $0;
  $13 = (($12) + 168|0);
  HEAP32[$13>>2] = $11;
 } else {
  $14 = $0;
  $15 = (($14) + 168|0);
  HEAP32[$15>>2] = 49;
 }
 $16 = $3;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = $0;
  $20 = (($19) + 424|0);
  HEAP32[$20>>2] = $18;
 } else {
  $21 = $0;
  $22 = (($21) + 424|0);
  HEAP32[$22>>2] = 50;
 }
 $23 = $0;
 $24 = (($23) + 172|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $0;
 $28 = (($27) + 172|0);
 HEAP32[$28>>2] = 0;
 $29 = $0;
 _png_warning($29,12416);
 $30 = $0;
 _png_warning($30,12472);
 STACKTOP = sp;return;
}
function _QRcode_free($qrcode) {
 $qrcode = $qrcode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($qrcode|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($qrcode) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 _free($qrcode);
 return;
}
function _QRcode_encodeInput($input) {
 $input = $input|0;
 var $$ = 0, $$0 = 0, $$0$i3$i = 0, $$0$i3$i$us = 0, $$0$i3$i4 = 0, $$lcssa = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit$0$in13$i$us = 0;
 var $bit$017$i = 0, $bit$115$i = 0, $bit$115$i$us = 0, $block$0$lcssa$i$i$i = 0, $block$010$i$i$i = 0, $block$16$i$i$i = 0, $dp$0$lcssa$i$i$i = 0, $dp$011$i$i$i = 0, $dp$17$i$i$i = 0, $ep$0$lcssa$i$i$i = 0, $ep$012$i$i$i = 0, $ep$18$i$i$i = 0, $i$017$i = 0, $i$017$i$us = 0, $i$019$i = 0, $i$09$i$i$i = 0, $i$116$i = 0, $i$15$i$i$i = 0, $j$014$i$us = 0, $j$018$i = 0;
 var $j$116$i = 0, $j$116$i$us = 0, $qrcode$010$i = 0, $qrcode$09$i = 0, $ret$0$i$i = 0, $ret$0$i$i$us = 0, $ret$0$i$i3 = 0, $ret$0$in$i$i = 0, $ret$0$in$i$i$us = 0, $ret$0$in$i$i2 = 0, $spec$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $spec$i$i = sp;
 $0 = (($input) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = HEAP32[$input>>2]|0;
 if ($2) {
  $106 = ($3>>>0)>(40);
  if ($106) {
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $108 = (($input) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109>>>0)>(3);
  if ($110) {
   $111 = (___errno_location()|0);
   HEAP32[$111>>2] = 22;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $112 = (_QRinput_getByteStream($input)|0);
  $113 = ($112|0)==(0|0);
  if ($113) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $114 = HEAP32[$input>>2]|0;
  $115 = HEAP32[$108>>2]|0;
  _QRspec_getEccSpec($114,$115,$spec$i$i);
  $116 = HEAP32[$input>>2]|0;
  $117 = HEAP32[$spec$i$i>>2]|0;
  $118 = (($spec$i$i) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = Math_imul($119, $117)|0;
  $121 = (($spec$i$i) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($spec$i$i) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = Math_imul($124, $122)|0;
  $126 = (($125) + ($120))|0;
  $127 = (($122) + ($117))|0;
  $128 = (($spec$i$i) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = Math_imul($129, $127)|0;
  $131 = (_malloc($130)|0);
  $132 = ($131|0)==(0|0);
  if ($132) {
   _free($112);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $133 = (_calloc($127,16)|0);
  $134 = ($133|0)==(0|0);
  if ($134) {
   _free($112);
   _free($131);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $135 = (255 - ($119))|0;
  $136 = (($135) - ($129))|0;
  $137 = (_init_rs(8,285,0,1,$129,$136)|0);
  $138 = ($137|0)==(0|0);
  do {
   if (!($138)) {
    $139 = HEAP32[$spec$i$i>>2]|0;
    $140 = ($139|0)>(0);
    if ($140) {
     $block$010$i$i$i = $133;$dp$011$i$i$i = $112;$ep$012$i$i$i = $131;$i$09$i$i$i = 0;
     while(1) {
      HEAP32[$block$010$i$i$i>>2] = $119;
      $141 = (($block$010$i$i$i) + 4|0);
      HEAP32[$141>>2] = $dp$011$i$i$i;
      $142 = (($block$010$i$i$i) + 8|0);
      HEAP32[$142>>2] = $129;
      $143 = (($block$010$i$i$i) + 12|0);
      HEAP32[$143>>2] = $ep$012$i$i$i;
      _encode_rs_char($137,$dp$011$i$i$i,$ep$012$i$i$i);
      $144 = (($dp$011$i$i$i) + ($119)|0);
      $145 = (($ep$012$i$i$i) + ($129)|0);
      $146 = (($block$010$i$i$i) + 16|0);
      $147 = (($i$09$i$i$i) + 1)|0;
      $148 = HEAP32[$spec$i$i>>2]|0;
      $149 = ($147|0)<($148|0);
      if ($149) {
       $block$010$i$i$i = $146;$dp$011$i$i$i = $144;$ep$012$i$i$i = $145;$i$09$i$i$i = $147;
      } else {
       $$lcssa = $144;$$lcssa24 = $145;$$lcssa25 = $146;
       break;
      }
     }
     $block$0$lcssa$i$i$i = $$lcssa25;$dp$0$lcssa$i$i$i = $$lcssa;$ep$0$lcssa$i$i$i = $$lcssa24;
    } else {
     $block$0$lcssa$i$i$i = $133;$dp$0$lcssa$i$i$i = $112;$ep$0$lcssa$i$i$i = $131;
    }
    $150 = HEAP32[$121>>2]|0;
    $151 = ($150|0)==(0);
    if (!($151)) {
     $152 = HEAP32[$123>>2]|0;
     $153 = HEAP32[$128>>2]|0;
     $154 = (255 - ($152))|0;
     $155 = (($154) - ($153))|0;
     $156 = (_init_rs(8,285,0,1,$153,$155)|0);
     $157 = ($156|0)==(0|0);
     if ($157) {
      break;
     }
     $158 = HEAP32[$121>>2]|0;
     $159 = ($158|0)>(0);
     if ($159) {
      $block$16$i$i$i = $block$0$lcssa$i$i$i;$dp$17$i$i$i = $dp$0$lcssa$i$i$i;$ep$18$i$i$i = $ep$0$lcssa$i$i$i;$i$15$i$i$i = 0;
      while(1) {
       HEAP32[$block$16$i$i$i>>2] = $152;
       $160 = (($block$16$i$i$i) + 4|0);
       HEAP32[$160>>2] = $dp$17$i$i$i;
       $161 = (($block$16$i$i$i) + 8|0);
       HEAP32[$161>>2] = $153;
       $162 = (($block$16$i$i$i) + 12|0);
       HEAP32[$162>>2] = $ep$18$i$i$i;
       _encode_rs_char($156,$dp$17$i$i$i,$ep$18$i$i$i);
       $163 = (($dp$17$i$i$i) + ($152)|0);
       $164 = (($ep$18$i$i$i) + ($153)|0);
       $165 = (($block$16$i$i$i) + 16|0);
       $166 = (($i$15$i$i$i) + 1)|0;
       $167 = HEAP32[$121>>2]|0;
       $168 = ($166|0)<($167|0);
       if ($168) {
        $block$16$i$i$i = $165;$dp$17$i$i$i = $163;$ep$18$i$i$i = $164;$i$15$i$i$i = $166;
       } else {
        break;
       }
      }
     }
    }
    $169 = (_QRspec_getWidth($116)|0);
    $170 = (_QRspec_newFrame($116)|0);
    $171 = ($170|0)==(0|0);
    if ($171) {
     _free($112);
     _free($131);
     _free($133);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $172 = (_malloc(28)|0);
    $173 = ($172|0)==(0|0);
    if ($173) {
     _free($112);
     _free($131);
     _free($133);
     _free($170);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$172>>2] = $169;
    $174 = (($172) + 4|0);
    HEAP32[$174>>2] = $170;
    $175 = (($169) + -1)|0;
    $176 = (($172) + 8|0);
    HEAP32[$176>>2] = $175;
    $177 = (($172) + 12|0);
    HEAP32[$177>>2] = $175;
    $178 = (($172) + 16|0);
    HEAP32[$178>>2] = -1;
    $179 = (($172) + 20|0);
    HEAP32[$179>>2] = -1;
    $180 = (($172) + 24|0);
    HEAP32[$180>>2] = 0;
    $181 = (($130) + ($126))|0;
    $182 = ($181|0)>(0);
    do {
     if ($182) {
      $183 = 0;$i$019$i = 0;
      L48: while(1) {
       $184 = ($183|0)<($126|0);
       if ($184) {
        $185 = (($183|0) % ($127|0))&-1;
        $186 = (($183|0) / ($127|0))&-1;
        $187 = HEAP32[$133>>2]|0;
        $188 = ($186|0)<($187|0);
        $189 = $188 ? 0 : $117;
        $$ = (($185) + ($189))|0;
        $190 = ((($133) + ($$<<4)|0) + 4|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = (($191) + ($186)|0);
        $ret$0$in$i$i2 = $192;
        label = 85;
       } else {
        $193 = ($183|0)<($181|0);
        if ($193) {
         $194 = (($183) - ($126))|0;
         $195 = (($194|0) % ($127|0))&-1;
         $196 = (($194|0) / ($127|0))&-1;
         $197 = ((($133) + ($195<<4)|0) + 12|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = (($198) + ($196)|0);
         $ret$0$in$i$i2 = $199;
         label = 85;
        } else {
         $$0$i3$i4 = 0;$229 = $183;
        }
       }
       if ((label|0) == 85) {
        label = 0;
        $ret$0$i$i3 = HEAP8[$ret$0$in$i$i2>>0]|0;
        $200 = (($183) + 1)|0;
        $$0$i3$i4 = $ret$0$i$i3;$229 = $200;
       }
       $201 = $$0$i3$i4&255;
       $bit$017$i = 128;$j$018$i = 0;
       while(1) {
        $202 = (_FrameFiller_next($172)|0);
        $203 = ($202|0)==(0|0);
        if ($203) {
         label = 100;
         break L48;
        }
        $204 = $bit$017$i & $201;
        $205 = ($204|0)!=(0);
        $206 = $205&1;
        $207 = $206 | 2;
        $208 = $207&255;
        HEAP8[$202>>0] = $208;
        $209 = $bit$017$i >>> 1;
        $210 = (($j$018$i) + 1)|0;
        $211 = ($210|0)<(8);
        if ($211) {
         $bit$017$i = $209;$j$018$i = $210;
        } else {
         break;
        }
       }
       $212 = (($i$019$i) + 1)|0;
       $213 = ($212|0)<($181|0);
       if ($213) {
        $183 = $229;$i$019$i = $212;
       } else {
        label = 90;
        break;
       }
      }
      if ((label|0) == 90) {
       label = 91;
       break;
      }
      else if ((label|0) == 100) {
       _free($112);
       _free($131);
       _free($133);
       $qrcode$010$i = 0;
       break;
      }
     } else {
      label = 91;
     }
    } while(0);
    L64: do {
     if ((label|0) == 91) {
      _free($112);
      _free($131);
      _free($133);
      $214 = (_QRspec_getRemainder($116)|0);
      $215 = ($214|0)>(0);
      do {
       if ($215) {
        $i$116$i = 0;
        while(1) {
         $216 = (_FrameFiller_next($172)|0);
         $217 = ($216|0)==(0|0);
         if ($217) {
          label = 101;
          break;
         }
         HEAP8[$216>>0] = 2;
         $218 = (($i$116$i) + 1)|0;
         $219 = ($218|0)<($214|0);
         if ($219) {
          $i$116$i = $218;
         } else {
          label = 95;
          break;
         }
        }
        if ((label|0) == 95) {
         break;
        }
        else if ((label|0) == 101) {
         $qrcode$010$i = 0;
         break L64;
        }
       }
      } while(0);
      $220 = HEAP32[$108>>2]|0;
      $221 = (_Mask_mask($169,$170,$220)|0);
      $222 = ($221|0)==(0|0);
      if ($222) {
       $qrcode$010$i = 0;
      } else {
       $223 = (_malloc(12)|0);
       $224 = ($223|0)==(0|0);
       if ($224) {
        _free($221);
        $qrcode$010$i = 0;
        break;
       } else {
        HEAP32[$223>>2] = $116;
        $225 = (($223) + 4|0);
        HEAP32[$225>>2] = $169;
        $226 = (($223) + 8|0);
        HEAP32[$226>>2] = $221;
        $qrcode$010$i = $223;
        break;
       }
      }
     }
    } while(0);
    _free($172);
    _free($170);
    $$0 = $qrcode$010$i;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  _free($112);
  _free($131);
  _free($133);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$off$i = (($3) + -1)|0;
 $4 = ($$off$i>>>0)>(3);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($input) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(2);
 if ($8) {
  $9 = (___errno_location()|0);
  HEAP32[$9>>2] = 22;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_MQRspec_getDataLength($3,$7)|0);
 $11 = HEAP32[$input>>2]|0;
 $12 = HEAP32[$6>>2]|0;
 $13 = (_MQRspec_getECCLength($11,$12)|0);
 $14 = $10 << 3;
 $15 = HEAP32[$input>>2]|0;
 $16 = HEAP32[$6>>2]|0;
 $17 = (_MQRspec_getDataLengthBit($15,$16)|0);
 $18 = (($14) - ($17))|0;
 $19 = (_QRinput_getByteStream($input)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (_malloc($13)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  _free($19);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (255 - ($13))|0;
 $24 = (($23) - ($10))|0;
 $25 = (_init_rs(8,285,0,1,$13,$24)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  _free($19);
  _free($21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _encode_rs_char($25,$19,$21);
 $27 = (_MQRspec_getWidth($3)|0);
 $28 = (_MQRspec_newFrame($3)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  _free($19);
  _free($21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (_malloc(28)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  _free($19);
  _free($21);
  _free($28);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$30>>2] = $27;
 $32 = (($30) + 4|0);
 HEAP32[$32>>2] = $28;
 $33 = (($27) + -1)|0;
 $34 = (($30) + 8|0);
 HEAP32[$34>>2] = $33;
 $35 = (($30) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = (($30) + 16|0);
 HEAP32[$36>>2] = -1;
 $37 = (($30) + 20|0);
 HEAP32[$37>>2] = -1;
 $38 = (($30) + 24|0);
 HEAP32[$38>>2] = 1;
 $39 = (($13) + ($10))|0;
 $40 = ($39|0)>(0);
 L111: do {
  if ($40) {
   $41 = ($14|0)==($17|0);
   $42 = (($10) + -1)|0;
   $43 = ($18|0)>(0);
   $44 = (($18) + -1)|0;
   $45 = 1 << $44;
   do {
    if ($41) {
     $79 = 0;$i$017$i = 0;
     L115: while(1) {
      $80 = ($79|0)<($10|0);
      if ($80) {
       $81 = (($19) + ($79)|0);
       $ret$0$in$i$i = $81;
       label = 39;
      } else {
       $82 = ($79|0)<($39|0);
       if ($82) {
        $83 = (($79) - ($10))|0;
        $84 = (($21) + ($83)|0);
        $ret$0$in$i$i = $84;
        label = 39;
       } else {
        $$0$i3$i = 0;$228 = $79;
       }
      }
      if ((label|0) == 39) {
       label = 0;
       $ret$0$i$i = HEAP8[$ret$0$in$i$i>>0]|0;
       $85 = (($79) + 1)|0;
       $$0$i3$i = $ret$0$i$i;$228 = $85;
      }
      $86 = $$0$i3$i&255;
      $bit$115$i = 128;$j$116$i = 0;
      while(1) {
       $87 = (_FrameFiller_next($30)|0);
       $88 = ($87|0)==(0|0);
       if ($88) {
        label = 49;
        break L115;
       }
       $89 = $bit$115$i & $86;
       $90 = ($89|0)!=(0);
       $91 = $90&1;
       $92 = $91 | 2;
       $93 = $92&255;
       HEAP8[$87>>0] = $93;
       $94 = $bit$115$i >>> 1;
       $95 = (($j$116$i) + 1)|0;
       $96 = ($95|0)<(8);
       if ($96) {
        $bit$115$i = $94;$j$116$i = $95;
       } else {
        break;
       }
      }
      $97 = (($i$017$i) + 1)|0;
      $98 = ($97|0)<($39|0);
      if ($98) {
       $79 = $228;$i$017$i = $97;
      } else {
       label = 44;
       break;
      }
     }
     if ((label|0) == 44) {
      label = 46;
      break L111;
     }
     else if ((label|0) == 49) {
      break;
     }
    } else {
     $46 = 0;$i$017$i$us = 0;
     L132: while(1) {
      $47 = ($46|0)<($10|0);
      if ($47) {
       $51 = (($19) + ($46)|0);
       $ret$0$in$i$i$us = $51;
       label = 22;
      } else {
       $48 = ($46|0)<($39|0);
       if ($48) {
        $49 = (($46) - ($10))|0;
        $50 = (($21) + ($49)|0);
        $ret$0$in$i$i$us = $50;
        label = 22;
       } else {
        $$0$i3$i$us = 0;$227 = $46;
       }
      }
      if ((label|0) == 22) {
       label = 0;
       $ret$0$i$i$us = HEAP8[$ret$0$in$i$i$us>>0]|0;
       $52 = (($46) + 1)|0;
       $$0$i3$i$us = $ret$0$i$i$us;$227 = $52;
      }
      $53 = ($i$017$i$us|0)==($42|0);
      if ($53) {
       if ($43) {
        $65 = $$0$i3$i$us&255;
        $bit$0$in13$i$us = $45;$j$014$i$us = 0;
        while(1) {
         $66 = (_FrameFiller_next($30)|0);
         $67 = ($66|0)==(0|0);
         if ($67) {
          label = 50;
          break L132;
         }
         $68 = $bit$0$in13$i$us & $65;
         $69 = ($68|0)!=(0);
         $70 = $69&1;
         $71 = $70 | 2;
         $72 = $71&255;
         HEAP8[$66>>0] = $72;
         $73 = $bit$0$in13$i$us >>> 1;
         $74 = $73 & 127;
         $75 = (($j$014$i$us) + 1)|0;
         $76 = ($75|0)<($18|0);
         if ($76) {
          $bit$0$in13$i$us = $74;$j$014$i$us = $75;
         } else {
          break;
         }
        }
       }
      } else {
       $54 = $$0$i3$i$us&255;
       $bit$115$i$us = 128;$j$116$i$us = 0;
       while(1) {
        $55 = (_FrameFiller_next($30)|0);
        $56 = ($55|0)==(0|0);
        if ($56) {
         label = 51;
         break L132;
        }
        $57 = $bit$115$i$us & $54;
        $58 = ($57|0)!=(0);
        $59 = $58&1;
        $60 = $59 | 2;
        $61 = $60&255;
        HEAP8[$55>>0] = $61;
        $62 = $bit$115$i$us >>> 1;
        $63 = (($j$116$i$us) + 1)|0;
        $64 = ($63|0)<(8);
        if ($64) {
         $bit$115$i$us = $62;$j$116$i$us = $63;
        } else {
         break;
        }
       }
      }
      $77 = (($i$017$i$us) + 1)|0;
      $78 = ($77|0)<($39|0);
      if ($78) {
       $46 = $227;$i$017$i$us = $77;
      } else {
       label = 45;
       break;
      }
     }
     if ((label|0) == 45) {
      label = 46;
      break L111;
     }
     else if ((label|0) == 50) {
      break;
     }
     else if ((label|0) == 51) {
      break;
     }
    }
   } while(0);
   _free($19);
   _free($21);
   $qrcode$09$i = 0;
  } else {
   label = 46;
  }
 } while(0);
 if ((label|0) == 46) {
  _free($19);
  _free($21);
  $99 = HEAP32[$6>>2]|0;
  $100 = (_MMask_mask($3,$28,$99)|0);
  $101 = ($100|0)==(0|0);
  if ($101) {
   $qrcode$09$i = 0;
  } else {
   $102 = (_malloc(12)|0);
   $103 = ($102|0)==(0|0);
   if ($103) {
    $qrcode$09$i = 0;
   } else {
    HEAP32[$102>>2] = $3;
    $104 = (($102) + 4|0);
    HEAP32[$104>>2] = $27;
    $105 = (($102) + 8|0);
    HEAP32[$105>>2] = $100;
    $qrcode$09$i = $102;
   }
  }
 }
 _free($30);
 _free($28);
 $$0 = $qrcode$09$i;
 STACKTOP = sp;return ($$0|0);
}
function _QRcode_encodeString($string,$version,$level,$hint,$casesensitive) {
 $string = $string|0;
 $version = $version|0;
 $level = $level|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRcode_encodeStringReal($string,$version,$level,0,$hint,$casesensitive)|0);
 return ($0|0);
}
function _QRcode_encodeStringMQR($string,$version,$level,$hint,$casesensitive) {
 $string = $string|0;
 $version = $version|0;
 $level = $level|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRcode_encodeStringReal($string,$version,$level,1,$hint,$casesensitive)|0);
 return ($0|0);
}
function _QRcode_encodeData($size,$data,$version,$level) {
 $size = $size|0;
 $data = $data|0;
 $version = $version|0;
 $level = $level|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data|0)==(0|0);
 $1 = ($size|0)==(0);
 $or$cond$i = $0 | $1;
 if ($or$cond$i) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0$i = 0;
  return ($$0$i|0);
 }
 $3 = (_QRinput_new2($version,$level)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $5 = (_QRinput_append($3,2,$size,$data)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  _QRinput_free($3);
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  $7 = (_QRcode_encodeInput($3)|0);
  _QRinput_free($3);
  $$0$i = $7;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _QRcode_encodeDataMQR($size,$data,$version,$level) {
 $size = $size|0;
 $data = $data|0;
 $version = $version|0;
 $level = $level|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data|0)==(0|0);
 $1 = ($size|0)==(0);
 $or$cond$i = $0 | $1;
 if ($or$cond$i) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0$i = 0;
  return ($$0$i|0);
 }
 $3 = (_QRinput_newMQR($version,$level)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $5 = (_QRinput_append($3,2,$size,$data)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  _QRinput_free($3);
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  $7 = (_QRcode_encodeInput($3)|0);
  _QRinput_free($3);
  $$0$i = $7;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _QRcode_List_free($qrlist) {
 $qrlist = $qrlist|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $list$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($qrlist|0)==(0|0);
 if ($0) {
  return;
 }
 $list$01 = $qrlist;
 while(1) {
  $1 = (($list$01) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$list$01>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (($3) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   _free($6);
   _free($3);
  }
  _free($list$01);
  $7 = ($2|0)==(0|0);
  if ($7) {
   break;
  } else {
   $list$01 = $2;
  }
 }
 return;
}
function _QRcode_encodeInputStructured($s) {
 $s = $s|0;
 var $$0 = 0, $$0$i = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head$06 = 0, $head$06$lcssa = 0, $head$1 = 0, $head$1$lcssa = 0, $list$0 = 0, $list$01$i = 0, $list$01$i$ph = 0, $list$05 = 0, $list$08 = 0, $tail$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 8|0);
 $list$05 = HEAP32[$0>>2]|0;
 $1 = ($list$05|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $head$06 = 0;$list$08 = $list$05;$tail$07 = 0;
 while(1) {
  $4 = ($head$06|0)==(0|0);
  $5 = (_malloc(8)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0$i = 0;
  } else {
   $7 = (($5) + 4|0);
   HEAP32[$7>>2] = 0;
   HEAP32[$5>>2] = 0;
   $$0$i = $5;
  }
  $8 = ($$0$i|0)==(0|0);
  if ($4) {
   if ($8) {
    $$0$ph = 0;
    label = 18;
    break;
   } else {
    $head$1 = $$0$i;
   }
  } else {
   if ($8) {
    $head$06$lcssa = $head$06;
    label = 12;
    break;
   }
   $9 = (($tail$07) + 4|0);
   HEAP32[$9>>2] = $$0$i;
   $head$1 = $head$06;
  }
  $10 = HEAP32[$list$08>>2]|0;
  $11 = (_QRcode_encodeInput($10)|0);
  HEAP32[$$0$i>>2] = $11;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $head$1$lcssa = $head$1;
   label = 11;
   break;
  }
  $2 = (($list$08) + 4|0);
  $list$0 = HEAP32[$2>>2]|0;
  $3 = ($list$0|0)==(0|0);
  if ($3) {
   $$0$ph = $head$1;
   label = 18;
   break;
  } else {
   $head$06 = $head$1;$list$08 = $list$0;$tail$07 = $$0$i;
  }
 }
 if ((label|0) == 11) {
  $13 = ($head$1$lcssa|0)==(0|0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $list$01$i$ph = $head$1$lcssa;
  }
 }
 else if ((label|0) == 12) {
  $list$01$i$ph = $head$06$lcssa;
 }
 else if ((label|0) == 18) {
  $$0 = $$0$ph;
  return ($$0|0);
 }
 $list$01$i = $list$01$i$ph;
 while(1) {
  $14 = (($list$01$i) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$list$01$i>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = (($16) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   _free($16);
  }
  _free($list$01$i);
  $20 = ($15|0)==(0|0);
  if ($20) {
   break;
  } else {
   $list$01$i = $15;
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _QRcode_encodeDataStructured($size,$data,$version,$level) {
 $size = $size|0;
 $data = $data|0;
 $version = $version|0;
 $level = $level|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRcode_encodeDataStructuredReal($size,$data,$version,$level,1,-1,0)|0);
 return ($0|0);
}
function _QRcode_encodeStringStructured($string,$version,$level,$hint,$casesensitive) {
 $string = $string|0;
 $version = $version|0;
 $level = $level|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($string|0)==(0|0);
 if ($0) {
  $1 = (___errno_location()|0);
  HEAP32[$1>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = (_strlen(($string|0))|0);
  $3 = (_QRcode_encodeDataStructuredReal($2,$string,$version,$level,0,$hint,$casesensitive)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _QRcode_APIVersionString() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12528|0);
}
function _FrameFiller_next($filler) {
 $filler = $filler|0;
 var $$ = 0, $$0 = 0, $$0$ph = 0, $$6 = 0, $$pre = 0, $$pre8 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $storemerge = 0, $x$0 = 0, $x$1 = 0, $y$0 = 0;
 var $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($filler) + 20|0);
 $1 = (($filler) + 8|0);
 $2 = (($filler) + 12|0);
 $3 = (($filler) + 4|0);
 $4 = (($filler) + 16|0);
 $5 = (($filler) + 24|0);
 $$pre = HEAP32[$0>>2]|0;
 $6 = $$pre;
 while(1) {
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 3;
   break;
  }
  $14 = HEAP32[$1>>2]|0;
  $15 = HEAP32[$2>>2]|0;
  $16 = HEAP32[$3>>2]|0;
  $17 = HEAP32[$filler>>2]|0;
  $18 = ($6|0)==(0);
  if ($18) {
   $19 = (($14) + -1)|0;
   $$pre8 = HEAP32[$4>>2]|0;
   $24 = $$pre8;$storemerge = 1;$x$0 = $19;$y$0 = $15;
  } else {
   $20 = (($14) + 1)|0;
   $21 = HEAP32[$4>>2]|0;
   $22 = (($21) + ($15))|0;
   $23 = (($6) + -1)|0;
   $24 = $21;$storemerge = $23;$x$0 = $20;$y$0 = $22;
  }
  HEAP32[$0>>2] = $storemerge;
  $25 = ($24|0)<(0);
  if ($25) {
   $26 = ($y$0|0)<(0);
   if ($26) {
    $27 = (($x$0) + -2)|0;
    HEAP32[$4>>2] = 1;
    $28 = HEAP32[$5>>2]|0;
    $29 = ($28|0)==(0);
    $30 = ($27|0)==(6);
    $or$cond = $29 & $30;
    $31 = (($x$0) + -3)|0;
    $$ = $or$cond ? $31 : $27;
    $$6 = $or$cond ? 9 : 0;
    $x$1 = $$;$y$1 = $$6;
   } else {
    $x$1 = $x$0;$y$1 = $y$0;
   }
  } else {
   $32 = ($y$0|0)==($17|0);
   if ($32) {
    $33 = (($17) + -1)|0;
    $34 = (($x$0) + -2)|0;
    HEAP32[$4>>2] = -1;
    $35 = HEAP32[$5>>2]|0;
    $36 = ($35|0)==(0);
    $37 = ($34|0)==(6);
    $or$cond3 = $36 & $37;
    if ($or$cond3) {
     $38 = (($x$0) + -3)|0;
     $39 = (($17) + -9)|0;
     $x$1 = $38;$y$1 = $39;
    } else {
     $x$1 = $34;$y$1 = $33;
    }
   } else {
    $x$1 = $x$0;$y$1 = $y$0;
   }
  }
  $40 = $y$1 | $x$1;
  $41 = ($40|0)<(0);
  if ($41) {
   $$0$ph = 0;
   label = 15;
   break;
  }
  HEAP32[$1>>2] = $x$1;
  HEAP32[$2>>2] = $y$1;
  $42 = Math_imul($y$1, $17)|0;
  $43 = (($42) + ($x$1))|0;
  $44 = (($16) + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  if ($46) {
   $6 = $storemerge;
  } else {
   $$0$ph = $44;
   label = 15;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$filler>>2]|0;
  $11 = Math_imul($10, $9)|0;
  $12 = HEAP32[$1>>2]|0;
  $$sum = (($11) + ($12))|0;
  $13 = (($8) + ($$sum)|0);
  $$0 = $13;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  $$0 = $$0$ph;
  return ($$0|0);
 }
 return (0)|0;
}
function _QRcode_encodeStringReal($string,$version,$level,$mqr,$hint,$casesensitive) {
 $string = $string|0;
 $version = $version|0;
 $level = $level|0;
 $mqr = $mqr|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hint$cmp = 0, $input$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($string|0)==(0|0);
 if ($0) {
  $1 = (___errno_location()|0);
  HEAP32[$1>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $2 = $hint & -2;
 $hint$cmp = ($2|0)==(2);
 if (!($hint$cmp)) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($mqr|0)==(0);
 if ($4) {
  $6 = (_QRinput_new2($version,$level)|0);
  $input$0 = $6;
 } else {
  $5 = (_QRinput_newMQR($version,$level)|0);
  $input$0 = $5;
 }
 $7 = ($input$0|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_Split_splitStringToQRinput($string,$input$0,$hint,$casesensitive)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  _QRinput_free($input$0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = (_QRcode_encodeInput($input$0)|0);
  _QRinput_free($input$0);
  $$0 = $10;
  return ($$0|0);
 }
 return (0)|0;
}
function _QRcode_encodeDataStructuredReal($size,$data,$version,$level,$eightbit,$hint,$casesensitive) {
 $size = $size|0;
 $data = $data|0;
 $version = $version|0;
 $level = $level|0;
 $eightbit = $eightbit|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)<(1);
 if ($0) {
  $1 = (___errno_location()|0);
  HEAP32[$1>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($eightbit|0)!=(0);
 $3 = $hint & -2;
 $switch = ($3|0)==(2);
 $or$cond = $2 | $switch;
 if (!($or$cond)) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_QRinput_new2($version,$level)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($eightbit|0)==(0);
 if ($7) {
  $9 = (_Split_splitStringToQRinput($data,$5,$hint,$casesensitive)|0);
  $ret$0 = $9;
 } else {
  $8 = (_QRinput_append($5,2,$size,$data)|0);
  $ret$0 = $8;
 }
 $10 = ($ret$0|0)<(0);
 if ($10) {
  _QRinput_free($5);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_QRinput_splitQRinputToStruct($5)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0$i = 0;
 } else {
  $13 = (_QRcode_encodeInputStructured($11)|0);
  _QRinput_Struct_free($11);
  $$0$i = $13;
 }
 _QRinput_free($5);
 $$0 = $$0$i;
 return ($$0|0);
}
function _QRinput_isSplittableMode($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mode>>>0)<(4);
 $1 = $0&1;
 return ($1|0);
}
function _QRinput_new2($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version>>>0)>(40);
 $1 = ($level>>>0)>(3);
 $or$cond3 = $0 | $1;
 if ($or$cond3) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_malloc(28)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (($3) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = (($3) + 12|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$3>>2] = $version;
 $7 = (($3) + 4|0);
 HEAP32[$7>>2] = $level;
 $8 = (($3) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = (($3) + 20|0);
 HEAP32[$9>>2] = 0;
 $$0 = $3;
 return ($$0|0);
}
function _QRinput_newMQR($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3$i = 0, $version$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $version$off = (($version) + -1)|0;
 $0 = ($version$off>>>0)>(3);
 if (!($0)) {
  $1 = (_MQRspec_getECCLength($version,$level)|0);
  $2 = ($1|0)==(0);
  if (!($2)) {
   $3 = ($version>>>0)>(40);
   $4 = ($level>>>0)>(3);
   $or$cond3$i = $3 | $4;
   if ($or$cond3$i) {
    $5 = (___errno_location()|0);
    HEAP32[$5>>2] = 22;
    $$0 = 0;
    return ($$0|0);
   }
   $6 = (_malloc(28)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
    return ($$0|0);
   }
   $8 = (($6) + 8|0);
   HEAP32[$8>>2] = 0;
   $9 = (($6) + 12|0);
   HEAP32[$9>>2] = 0;
   HEAP32[$6>>2] = $version;
   $10 = (($6) + 4|0);
   HEAP32[$10>>2] = $level;
   $11 = (($6) + 16|0);
   $12 = (($6) + 20|0);
   HEAP32[$12>>2] = 0;
   HEAP32[$11>>2] = 1;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $13 = (___errno_location()|0);
 HEAP32[$13>>2] = 22;
 $$0 = 0;
 return ($$0|0);
}
function _QRinput_append($input,$mode,$size,$data) {
 $input = $input|0;
 $mode = $mode|0;
 $size = $size|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRinput_check($mode,$size,$data)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 $3 = (_malloc(20)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$3>>2] = $mode;
 $5 = (($3) + 4|0);
 HEAP32[$5>>2] = $size;
 $6 = ($size|0)>(0);
 do {
  if ($6) {
   $7 = (_malloc($size)|0);
   $8 = (($3) + 8|0);
   HEAP32[$8>>2] = $7;
   $9 = ($7|0)==(0|0);
   if (!($9)) {
    _memcpy(($7|0),($data|0),($size|0))|0;
    break;
   }
   _free($3);
   $$0 = -1;
   return ($$0|0);
  }
 } while(0);
 $10 = (($3) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = (($3) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = (($input) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = (($input) + 8|0);
  HEAP32[$15>>2] = $3;
 } else {
  $16 = (($13) + 16|0);
  HEAP32[$16>>2] = $3;
 }
 HEAP32[$12>>2] = $3;
 HEAP32[$11>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _QRinput_free($input) {
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($input|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($input) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $list$01 = $2;
  while(1) {
   $4 = (($list$01) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($list$01) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   _free($7);
   $8 = (($list$01) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   _BitStream_free($9);
   _free($list$01);
   $10 = ($5|0)==(0|0);
   if ($10) {
    break;
   } else {
    $list$01 = $5;
   }
  }
 }
 _free($input);
 return;
}
function _QRinput_dup($input) {
 $input = $input|0;
 var $$0 = 0, $$lcssa11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $list$0 = 0, $list$01$i = 0, $list$04 = 0, $list$05 = 0, $n$0$in$ph = 0, $or$cond3$i = 0, $or$cond3$i$i = 0, $version$off$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($input) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = HEAP32[$input>>2]|0;
 $4 = (($input) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 do {
  if ($2) {
   $20 = ($3>>>0)>(40);
   $21 = ($5>>>0)>(3);
   $or$cond3$i = $20 | $21;
   if ($or$cond3$i) {
    $22 = (___errno_location()|0);
    HEAP32[$22>>2] = 22;
    $$0 = 0;
    return ($$0|0);
   }
   $23 = (_malloc(28)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $25 = (($23) + 8|0);
    HEAP32[$25>>2] = 0;
    $26 = (($23) + 12|0);
    HEAP32[$26>>2] = 0;
    HEAP32[$23>>2] = $3;
    $27 = (($23) + 4|0);
    HEAP32[$27>>2] = $5;
    $28 = (($23) + 16|0);
    HEAP32[$28>>2] = 0;
    $29 = (($23) + 20|0);
    HEAP32[$29>>2] = 0;
    $n$0$in$ph = $23;
    break;
   }
  } else {
   $version$off$i = (($3) + -1)|0;
   $6 = ($version$off$i>>>0)>(3);
   if (!($6)) {
    $7 = (_MQRspec_getECCLength($3,$5)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = ($3>>>0)>(40);
     $10 = ($5>>>0)>(3);
     $or$cond3$i$i = $9 | $10;
     if ($or$cond3$i$i) {
      $11 = (___errno_location()|0);
      HEAP32[$11>>2] = 22;
      $$0 = 0;
      return ($$0|0);
     }
     $12 = (_malloc(28)|0);
     $13 = ($12|0)==(0|0);
     if ($13) {
      $$0 = 0;
      return ($$0|0);
     } else {
      $14 = (($12) + 8|0);
      HEAP32[$14>>2] = 0;
      $15 = (($12) + 12|0);
      HEAP32[$15>>2] = 0;
      HEAP32[$12>>2] = $3;
      $16 = (($12) + 4|0);
      HEAP32[$16>>2] = $5;
      $17 = (($12) + 16|0);
      $18 = (($12) + 20|0);
      HEAP32[$18>>2] = 0;
      HEAP32[$17>>2] = 1;
      $n$0$in$ph = $12;
      break;
     }
    }
   }
   $19 = (___errno_location()|0);
   HEAP32[$19>>2] = 22;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $30 = (($input) + 8|0);
 $list$04 = HEAP32[$30>>2]|0;
 $31 = ($list$04|0)==(0|0);
 if ($31) {
  $$0 = $n$0$in$ph;
  return ($$0|0);
 }
 $32 = (($n$0$in$ph) + 12|0);
 $33 = (($n$0$in$ph) + 8|0);
 $56 = 0;$list$05 = $list$04;
 while(1) {
  $34 = (_malloc(20)|0);
  $35 = ($34|0)==(0|0);
  if ($35) {
   label = 18;
   break;
  }
  $36 = HEAP32[$list$05>>2]|0;
  HEAP32[$34>>2] = $36;
  $37 = (($list$05) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($34) + 4|0);
  HEAP32[$39>>2] = $38;
  $40 = (_malloc($38)|0);
  $41 = (($34) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = ($40|0)==(0|0);
  if ($42) {
   $$lcssa11 = $34;
   label = 17;
   break;
  }
  $52 = (($list$05) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  _memcpy(($40|0),($53|0),($38|0))|0;
  $54 = (($34) + 12|0);
  HEAP32[$54>>2] = 0;
  $55 = (($34) + 16|0);
  HEAP32[$55>>2] = 0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   HEAP32[$33>>2] = $34;
  } else {
   $58 = (($56) + 16|0);
   HEAP32[$58>>2] = $34;
  }
  HEAP32[$32>>2] = $34;
  HEAP32[$55>>2] = 0;
  $59 = (($list$05) + 16|0);
  $list$0 = HEAP32[$59>>2]|0;
  $60 = ($list$0|0)==(0|0);
  if ($60) {
   label = 28;
   break;
  } else {
   $56 = $34;$list$05 = $list$0;
  }
 }
 if ((label|0) == 17) {
  _free($$lcssa11);
 }
 else if ((label|0) == 18) {
 }
 else if ((label|0) == 28) {
  $$0 = $n$0$in$ph;
  return ($$0|0);
 }
 $43 = HEAP32[$33>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $list$01$i = $43;
  while(1) {
   $45 = (($list$01$i) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($list$01$i) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   _free($48);
   $49 = (($list$01$i) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   _BitStream_free($50);
   _free($list$01$i);
   $51 = ($46|0)==(0|0);
   if ($51) {
    break;
   } else {
    $list$01$i = $46;
   }
  }
 }
 _free($n$0$in$ph);
 $$0 = 0;
 return ($$0|0);
}
function _QRinput_estimateBitsModeNum($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bits$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size|0) / 3)&-1;
 $1 = ($0*10)|0;
 $2 = Math_imul($0, -3)|0;
 $3 = (($2) + ($size))|0;
 if ((($3|0) == 1)) {
  $4 = (($1) + 4)|0;
  $bits$0 = $4;
 } else if ((($3|0) == 2)) {
  $5 = (($1) + 7)|0;
  $bits$0 = $5;
 } else {
  $bits$0 = $1;
 }
 return ($bits$0|0);
}
function _QRinput_estimateBitsModeAn($size) {
 $size = $size|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size|0) / 2)&-1;
 $1 = ($0*11)|0;
 $2 = $size & 1;
 $3 = ($2|0)==(0);
 $4 = (($1) + 6)|0;
 $$ = $3 ? $1 : $4;
 return ($$|0);
}
function _QRinput_estimateBitsMode8($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $size << 3;
 return ($0|0);
}
function _QRinput_check($mode,$size,$data) {
 $mode = $mode|0;
 $size = $size|0;
 $data = $data|0;
 var $$$i = 0, $$0 = 0, $$0$ph = 0, $$0$ph15 = 0, $$0$ph17 = 0, $$off$i = 0, $$off$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, $i$01$i7 = 0, $i$04$i = 0, $not$$i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mode|0)==(6);
 $1 = ($size|0)<(0);
 $or$cond = $0 & $1;
 $2 = ($size|0)<(1);
 $or$cond3 = $or$cond | $2;
 if ($or$cond3) {
  $$0 = -1;
  return ($$0|0);
 }
 switch ($mode|0) {
 case 6: case 5: case 4: case 2:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 7:  {
  $not$$i = ($size|0)!=(1);
  $$$i = $not$$i << 31 >> 31;
  $$0 = $$$i;
  return ($$0|0);
  break;
 }
 case 0:  {
  $3 = ($size|0)>(0);
  if (!($3)) {
   $$0 = 0;
   return ($$0|0);
  }
  $i$01$i = 0;
  while(1) {
   $6 = (($data) + ($i$01$i)|0);
   $7 = HEAP8[$6>>0]|0;
   $$off$i = (($7) + -48)<<24>>24;
   $8 = ($$off$i&255)>(9);
   $4 = (($i$01$i) + 1)|0;
   if ($8) {
    $$0$ph = -1;
    break;
   }
   $5 = ($4|0)<($size|0);
   if ($5) {
    $i$01$i = $4;
   } else {
    $$0$ph = 0;
    break;
   }
  }
  $$0 = $$0$ph;
  return ($$0|0);
  break;
 }
 case 1:  {
  $9 = ($size|0)>(0);
  if (!($9)) {
   $$0 = 0;
   return ($$0|0);
  }
  $i$01$i7 = 0;
  while(1) {
   $12 = (($data) + ($i$01$i7)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = $14 & 128;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$0$ph15 = -1;
    break;
   }
   $17 = (12536 + ($14)|0);
   $18 = HEAP8[$17>>0]|0;
   $phitmp$i = ($18<<24>>24)<(0);
   $10 = (($i$01$i7) + 1)|0;
   if ($phitmp$i) {
    $$0$ph15 = -1;
    break;
   }
   $11 = ($10|0)<($size|0);
   if ($11) {
    $i$01$i7 = $10;
   } else {
    $$0$ph15 = 0;
    break;
   }
  }
  $$0 = $$0$ph15;
  return ($$0|0);
  break;
 }
 case 3:  {
  $19 = $size & 1;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = -1;
   return ($$0|0);
  }
  $21 = ($size|0)>(0);
  if (!($21)) {
   $$0 = 0;
   return ($$0|0);
  }
  $i$04$i = 0;
  while(1) {
   $24 = (($data) + ($i$04$i)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $26 << 8;
   $28 = $i$04$i | 1;
   $29 = (($data) + ($28)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $27 | $31;
   $33 = ($32>>>0)<(33088);
   if ($33) {
    $$0$ph17 = -1;
    break;
   }
   $$off$i5 = (($32) + -40957)|0;
   $34 = ($$off$i5>>>0)<(16451);
   $35 = ($32>>>0)>(60351);
   $or$cond3$i = $34 | $35;
   $22 = (($i$04$i) + 2)|0;
   if ($or$cond3$i) {
    $$0$ph17 = -1;
    break;
   }
   $23 = ($22|0)<($size|0);
   if ($23) {
    $i$04$i = $22;
   } else {
    $$0$ph17 = 0;
    break;
   }
  }
  $$0 = $$0$ph17;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = -1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _QRinput_getByteStream($input) {
 $input = $input|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i28$i$i$i = 0, $$lcssa = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $$pre14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0$lcssa$i$i$i$i$i = 0, $bits$02$i$i$i$i$i = 0, $exitcond$i$i = 0, $exitcond$i6$i = 0, $i$01$i$i = 0, $i$01$i5$i = 0, $input$idx$val$i = 0, $input$idx1$i = 0, $input$idx1$val$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$i = 0, $list$0$i$i$i$i$i = 0;
 var $list$01$i$i$i = 0, $list$01$i$i$i$i = 0, $list$01$i$i$i$i$i = 0, $list$010$i$i = 0, $list$011$i$i = 0, $list$03$i$i$i$i = 0, $list$03$i$i$i$i$i = 0, $list$03$i$i20$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond3$i$i$i$i = 0, $or$cond3$i4$i$i$i = 0, $padding$0$i$i = 0, $padding$0$i10$i = 0, $phitmp$i$i$i$i = 0, $phitmp1$i$i$i$i = 0, $ret$0$i = 0, $ret$0$i$i = 0, $ret$0$i9$i = 0, $termbits$0$i$i = 0;
 var $total$02$i$i$i$i = 0, $total$02$i$i21$i = 0, $version$0$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($input) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $16 = (($input) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   do {
    if ((($17|0) == 0)) {
     $$pre14$i$i = (($input) + 8|0);
     $$pre$phi$i$iZ2D = $$pre14$i$i;
    } else if ((($17|0) == 2)) {
     $19 = (($input) + 24|0);
     $20 = (_malloc(20)|0);
     $21 = ($20|0)==(0|0);
     if ($21) {
      $$0 = 0;
      return ($$0|0);
     }
     HEAP32[$20>>2] = 7;
     $22 = (($20) + 4|0);
     HEAP32[$22>>2] = 1;
     $23 = (_malloc(1)|0);
     $24 = (($20) + 8|0);
     HEAP32[$24>>2] = $23;
     $25 = ($23|0)==(0|0);
     if (!($25)) {
      $26 = HEAP8[$19>>0]|0;
      HEAP8[$23>>0] = $26;
      $27 = (($20) + 12|0);
      HEAP32[$27>>2] = 0;
      $28 = (($20) + 16|0);
      $29 = (($input) + 8|0);
      $30 = HEAP32[$29>>2]|0;
      HEAP32[$28>>2] = $30;
      HEAP32[$29>>2] = $20;
      $$pre$phi$i$iZ2D = $29;
      break;
     }
     _free($20);
     $$0 = 0;
     return ($$0|0);
    } else if ((($17|0) == 1)) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 22;
     $$0 = 0;
     return ($$0|0);
    } else {
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   $31 = (($input) + 4|0);
   $version$0$i$i$i$i = 0;
   while(1) {
    $list$01$i$i$i$i$i = HEAP32[$$pre$phi$i$iZ2D>>2]|0;
    $32 = ($list$01$i$i$i$i$i|0)==(0|0);
    if ($32) {
     $bits$0$lcssa$i$i$i$i$i = 0;
    } else {
     $bits$02$i$i$i$i$i = 0;$list$03$i$i$i$i$i = $list$01$i$i$i$i$i;
     while(1) {
      $33 = HEAP32[$0>>2]|0;
      $34 = (_QRinput_estimateBitStreamSizeOfEntry($list$03$i$i$i$i$i,$version$0$i$i$i$i,$33)|0);
      $35 = (($34) + ($bits$02$i$i$i$i$i))|0;
      $36 = (($list$03$i$i$i$i$i) + 16|0);
      $list$0$i$i$i$i$i = HEAP32[$36>>2]|0;
      $37 = ($list$0$i$i$i$i$i|0)==(0|0);
      if ($37) {
       $$lcssa11 = $35;
       break;
      } else {
       $bits$02$i$i$i$i$i = $35;$list$03$i$i$i$i$i = $list$0$i$i$i$i$i;
      }
     }
     $phitmp$i$i$i$i = (($$lcssa11) + 7)|0;
     $phitmp1$i$i$i$i = (($phitmp$i$i$i$i|0) / 8)&-1;
     $bits$0$lcssa$i$i$i$i$i = $phitmp1$i$i$i$i;
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (_QRspec_getMinimumVersion($bits$0$lcssa$i$i$i$i$i,$38)|0);
    $40 = ($39|0)<(0);
    if ($40) {
     $$0$i$i$i$i = -1;
     break;
    }
    $41 = ($39|0)>($version$0$i$i$i$i|0);
    if ($41) {
     $version$0$i$i$i$i = $39;
    } else {
     $$0$i$i$i$i = $39;
     break;
    }
   }
   $42 = HEAP32[$input>>2]|0;
   $43 = ($$0$i$i$i$i|0)>($42|0);
   do {
    if ($43) {
     $44 = HEAP32[$0>>2]|0;
     $45 = ($44|0)!=(0);
     $46 = ($$0$i$i$i$i|0)<(0);
     $or$cond$i$i$i$i = $45 | $46;
     $47 = ($$0$i$i$i$i|0)>(40);
     $or$cond3$i$i$i$i = $or$cond$i$i$i$i | $47;
     if ($or$cond3$i$i$i$i) {
      $48 = (___errno_location()|0);
      HEAP32[$48>>2] = 22;
      break;
     } else {
      HEAP32[$input>>2] = $$0$i$i$i$i;
      break;
     }
    }
   } while(0);
   L46: while(1) {
    $list$01$i$i$i$i = HEAP32[$$pre$phi$i$iZ2D>>2]|0;
    $49 = ($list$01$i$i$i$i|0)==(0|0);
    if ($49) {
     $$0$i28$i$i$i = 0;
    } else {
     $list$03$i$i$i$i = $list$01$i$i$i$i;$total$02$i$i$i$i = 0;
     while(1) {
      $50 = HEAP32[$input>>2]|0;
      $51 = HEAP32[$0>>2]|0;
      $52 = (_QRinput_encodeBitStream($list$03$i$i$i$i,$50,$51)|0);
      $53 = ($52|0)<(0);
      if ($53) {
       label = 81;
       break L46;
      }
      $54 = (($52) + ($total$02$i$i$i$i))|0;
      $55 = (($list$03$i$i$i$i) + 16|0);
      $list$0$i$i$i$i = HEAP32[$55>>2]|0;
      $56 = ($list$0$i$i$i$i|0)==(0|0);
      if ($56) {
       $$lcssa = $54;
       break;
      } else {
       $list$03$i$i$i$i = $list$0$i$i$i$i;$total$02$i$i$i$i = $54;
      }
     }
     $57 = ($$lcssa|0)<(0);
     if ($57) {
      label = 82;
      break;
     } else {
      $$0$i28$i$i$i = $$lcssa;
     }
    }
    $58 = (($$0$i28$i$i$i) + 7)|0;
    $59 = (($58|0) / 8)&-1;
    $60 = HEAP32[$31>>2]|0;
    $61 = (_QRspec_getMinimumVersion($59,$60)|0);
    $62 = ($61|0)<(0);
    if ($62) {
     label = 33;
     break;
    }
    $64 = HEAP32[$input>>2]|0;
    $65 = ($61|0)>($64|0);
    if (!($65)) {
     label = 39;
     break;
    }
    $66 = HEAP32[$0>>2]|0;
    $67 = ($66|0)!=(0);
    $68 = ($61|0)>(40);
    $or$cond3$i4$i$i$i = $67 | $68;
    if ($or$cond3$i4$i$i$i) {
     $69 = (___errno_location()|0);
     HEAP32[$69>>2] = 22;
    } else {
     HEAP32[$input>>2] = $61;
    }
   }
   if ((label|0) == 33) {
    $63 = (___errno_location()|0);
    HEAP32[$63>>2] = 34;
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 39) {
    break;
   }
   else if ((label|0) == 81) {
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 82) {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $3 = (($input) + 8|0);
   $list$01$i$i$i = HEAP32[$3>>2]|0;
   $4 = ($list$01$i$i$i|0)==(0|0);
   if (!($4)) {
    $5 = HEAP32[$input>>2]|0;
    $6 = (_QRinput_encodeBitStream($list$01$i$i$i,$5,$1)|0);
    $7 = ($6|0)<(0);
    if ($7) {
     $$0 = 0;
     return ($$0|0);
    }
    $9 = $6;$list$03$i$i20$i = $list$01$i$i$i;$total$02$i$i21$i = 0;
    while(1) {
     $8 = (($total$02$i$i21$i) + ($9))|0;
     $10 = (($list$03$i$i20$i) + 16|0);
     $list$0$i$i$i = HEAP32[$10>>2]|0;
     $11 = ($list$0$i$i$i|0)==(0|0);
     if ($11) {
      $$lcssa12 = $8;
      label = 7;
      break;
     }
     $$pre$i$i = HEAP32[$0>>2]|0;
     $12 = HEAP32[$input>>2]|0;
     $13 = (_QRinput_encodeBitStream($list$0$i$i$i,$12,$$pre$i$i)|0);
     $14 = ($13|0)<(0);
     if ($14) {
      label = 83;
      break;
     } else {
      $9 = $13;$list$03$i$i20$i = $list$0$i$i$i;$total$02$i$i21$i = $8;
     }
    }
    if ((label|0) == 7) {
     $15 = ($$lcssa12|0)<(0);
     if ($15) {
      $$0 = 0;
     } else {
      break;
     }
     return ($$0|0);
    }
    else if ((label|0) == 83) {
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $70 = (_BitStream_new()|0);
 $71 = ($70|0)==(0|0);
 if ($71) {
  $$0 = 0;
  return ($$0|0);
 }
 $72 = (($input) + 8|0);
 $list$010$i$i = HEAP32[$72>>2]|0;
 $73 = ($list$010$i$i|0)==(0|0);
 do {
  if (!($73)) {
   $list$011$i$i = $list$010$i$i;
   while(1) {
    $76 = (($list$011$i$i) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_BitStream_append($70,$77)|0);
    $79 = ($78|0)<(0);
    if ($79) {
     break;
    }
    $74 = (($list$011$i$i) + 16|0);
    $list$0$i$i = HEAP32[$74>>2]|0;
    $75 = ($list$0$i$i|0)==(0|0);
    if ($75) {
     label = 46;
     break;
    } else {
     $list$011$i$i = $list$0$i$i;
    }
   }
   if ((label|0) == 46) {
    break;
   }
   _BitStream_free($70);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $80 = HEAP32[$0>>2]|0;
 $81 = ($80|0)==(0);
 L83: do {
  if ($81) {
   $input$idx$val$i = HEAP32[$input>>2]|0;
   $input$idx1$i = (($input) + 4|0);
   $input$idx1$val$i = HEAP32[$input$idx1$i>>2]|0;
   $127 = HEAP32[$70>>2]|0;
   $128 = (_QRspec_getDataLength($input$idx$val$i,$input$idx1$val$i)|0);
   $129 = $128 << 3;
   $130 = ($129|0)<($127|0);
   if ($130) {
    $131 = (___errno_location()|0);
    HEAP32[$131>>2] = 34;
    label = 79;
    break;
   }
   $132 = ($129|0)==($127|0);
   if ($132) {
    label = 80;
   } else {
    $133 = (($129) - ($127))|0;
    $134 = ($133|0)<(5);
    do {
     if ($134) {
      $135 = (_BitStream_appendNum($70,$133,0)|0);
      $padding$0$i10$i = 0;$ret$0$i9$i = $135;
     } else {
      $136 = (($127) + 11)|0;
      $137 = (($136|0) / 8)&-1;
      $138 = (_BitStream_new()|0);
      $139 = ($138|0)==(0|0);
      if ($139) {
       label = 79;
       break L83;
      }
      $140 = $137 << 3;
      $141 = (($140) - ($127))|0;
      $142 = (_BitStream_appendNum($138,$141,0)|0);
      $143 = ($142|0)<(0);
      if ($143) {
       $padding$0$i10$i = $138;$ret$0$i9$i = $142;
      } else {
       $144 = (($128) - ($137))|0;
       $145 = ($144|0)>(0);
       if ($145) {
        $146 = (_malloc($144)|0);
        $147 = ($146|0)==(0|0);
        if ($147) {
         $padding$0$i10$i = $138;$ret$0$i9$i = -1;
         break;
        }
        $i$01$i5$i = 0;
        while(1) {
         $148 = $i$01$i5$i & 1;
         $149 = ($148|0)!=(0);
         $150 = $149 ? 17 : -20;
         $151 = (($146) + ($i$01$i5$i)|0);
         HEAP8[$151>>0] = $150;
         $152 = (($i$01$i5$i) + 1)|0;
         $exitcond$i6$i = ($152|0)==($144|0);
         if ($exitcond$i6$i) {
          break;
         } else {
          $i$01$i5$i = $152;
         }
        }
        $153 = (_BitStream_appendBytes($138,$144,$146)|0);
        _free($146);
        $154 = ($153|0)<(0);
        if ($154) {
         $padding$0$i10$i = $138;$ret$0$i9$i = $153;
         break;
        }
       }
       $155 = (_BitStream_append($70,$138)|0);
       $padding$0$i10$i = $138;$ret$0$i9$i = $155;
      }
     }
    } while(0);
    _BitStream_free($padding$0$i10$i);
    $ret$0$i = $ret$0$i9$i;
    label = 78;
   }
  } else {
   $82 = HEAP32[$70>>2]|0;
   $83 = HEAP32[$input>>2]|0;
   $84 = (($input) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (_MQRspec_getDataLengthBit($83,$85)|0);
   $87 = (($86|0) / 8)&-1;
   $88 = ($86|0)<($82|0);
   if ($88) {
    $89 = (___errno_location()|0);
    HEAP32[$89>>2] = 34;
    label = 79;
    break;
   }
   $90 = ($86|0)==($82|0);
   if ($90) {
    label = 80;
   } else {
    $91 = HEAP32[$input>>2]|0;
    $92 = $91 << 1;
    $93 = $92 | 1;
    $94 = (($86) - ($82))|0;
    $95 = ($94|0)>($93|0);
    do {
     if ($95) {
      $97 = (($82) + 7)|0;
      $98 = (($97) + ($93))|0;
      $99 = (($98|0) / 8)&-1;
      $100 = $99 << 3;
      $101 = (($86) - ($100))|0;
      $102 = (_BitStream_new()|0);
      $103 = ($102|0)==(0|0);
      if ($103) {
       label = 79;
       break L83;
      }
      $104 = ($101|0)>(0);
      $105 = ($87|0)==($99|0);
      $or$cond$i$i = $104 & $105;
      $106 = $or$cond$i$i ? $101 : 0;
      $107 = (($100) - ($82))|0;
      $termbits$0$i$i = (($107) + ($106))|0;
      $108 = (_BitStream_appendNum($102,$termbits$0$i$i,0)|0);
      $109 = ($108|0)<(0);
      if ($109) {
       $padding$0$i$i = $102;$ret$0$i$i = $108;
      } else {
       $110 = (($87) - ($99))|0;
       $111 = ($110|0)>(0);
       if ($111) {
        $112 = (_malloc($110)|0);
        $113 = ($112|0)==(0|0);
        if ($113) {
         $padding$0$i$i = $102;$ret$0$i$i = -1;
         break;
        }
        $i$01$i$i = 0;
        while(1) {
         $114 = $i$01$i$i & 1;
         $115 = ($114|0)!=(0);
         $116 = $115 ? 17 : -20;
         $117 = (($112) + ($i$01$i$i)|0);
         HEAP8[$117>>0] = $116;
         $118 = (($i$01$i$i) + 1)|0;
         $exitcond$i$i = ($118|0)==($110|0);
         if ($exitcond$i$i) {
          break;
         } else {
          $i$01$i$i = $118;
         }
        }
        $119 = (_BitStream_appendBytes($102,$110,$112)|0);
        _free($112);
        $120 = ($119|0)<(0);
        if ($120) {
         $padding$0$i$i = $102;$ret$0$i$i = $119;
         break;
        }
        $121 = $87 << 3;
        $122 = (($86) - ($121))|0;
        $123 = ($122|0)>(0);
        if ($123) {
         $124 = (_BitStream_appendNum($102,$122,0)|0);
         $125 = ($124|0)<(0);
         if ($125) {
          $padding$0$i$i = $102;$ret$0$i$i = $124;
          break;
         }
        }
       }
       $126 = (_BitStream_append($70,$102)|0);
       $padding$0$i$i = $102;$ret$0$i$i = $126;
      }
     } else {
      $96 = (_BitStream_appendNum($70,$94,0)|0);
      $padding$0$i$i = 0;$ret$0$i$i = $96;
     }
    } while(0);
    _BitStream_free($padding$0$i$i);
    $ret$0$i = $ret$0$i$i;
    label = 78;
   }
  }
 } while(0);
 if ((label|0) == 78) {
  $156 = ($ret$0$i|0)<(0);
  if ($156) {
   label = 79;
  } else {
   label = 80;
  }
 }
 if ((label|0) == 79) {
  _BitStream_free($70);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 80) {
  $157 = (_BitStream_toByte($70)|0);
  _BitStream_free($70);
  $$0 = $157;
  return ($$0|0);
 }
 return (0)|0;
}
function _QRinput_Struct_free($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list$01 = 0;
 var $list$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($s) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $list$01 = $2;
  while(1) {
   $4 = (($list$01) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = HEAP32[$list$01>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = (($6) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if (!($10)) {
     $list$01$i$i = $9;
     while(1) {
      $11 = (($list$01$i$i) + 16|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($list$01$i$i) + 8|0);
      $14 = HEAP32[$13>>2]|0;
      _free($14);
      $15 = (($list$01$i$i) + 12|0);
      $16 = HEAP32[$15>>2]|0;
      _BitStream_free($16);
      _free($list$01$i$i);
      $17 = ($12|0)==(0|0);
      if ($17) {
       break;
      } else {
       $list$01$i$i = $12;
      }
     }
    }
    _free($6);
   }
   _free($list$01);
   $18 = ($5|0)==(0|0);
   if ($18) {
    break;
   } else {
    $list$01 = $5;
   }
  }
 }
 _free($s);
 return;
}
function _QRinput_splitQRinputToStruct($input) {
 $input = $input|0;
 var $$$i = 0, $$0 = 0, $$01$ph = 0, $$01$ph$lcssa = 0, $$01$ph$lcssa117 = 0, $$01$ph$lcssa118 = 0, $$01$ph$lcssa119 = 0, $$01$ph$lcssa120 = 0, $$01$ph$lcssa121 = 0, $$01$ph$lcssa122 = 0, $$01$ph$lcssa123 = 0, $$01$ph$lcssa124 = 0, $$01$ph$lcssa125 = 0, $$01$ph$lcssa126 = 0, $$01$ph127 = 0, $$01$ph128 = 0, $$01$ph129 = 0, $$01$ph130 = 0, $$1$i = 0, $$lcssa = 0;
 var $$lcssa131 = 0, $$lcssa140 = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa143 = 0, $$lcssa144 = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$lcssa147 = 0, $$lcssa148 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$size$0$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$066 = 0, $bits$066$lcssa = 0, $i$03$i = 0, $i$03$in$i = 0, $list$0$i = 0, $list$0$ph = 0, $list$01$i = 0, $list$01$i14 = 0;
 var $list$01$i2 = 0, $list$01$i9 = 0, $list$04$i = 0, $list$06$i = 0, $list$067 = 0, $list$067$lcssa = 0, $or$cond$i = 0, $or$cond3$i = 0, $parity$0$lcssa$i = 0, $parity$05$i = 0, $parity$12$i = 0, $parity$2$i = 0, $parity$2$i$lcssa = 0, $prev$0$ph = 0, $prev$068 = 0, $prev$068$lcssa = 0, $prev$068$phi = 0, $prev$1 = 0, $size$0$i = 0, $size$2$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($input) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_malloc(16)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$4>>2] = 0;
 $6 = (($4) + 4|0);
 HEAP32[$6>>2] = -1;
 $7 = (($4) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = (($4) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = (_QRinput_dup($input)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  _QRinput_Struct_free($4);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (($9) + 8|0);
 $list$04$i = HEAP32[$11>>2]|0;
 $12 = ($list$04$i|0)==(0|0);
 if ($12) {
  $parity$0$lcssa$i = 0;
 } else {
  $list$06$i = $list$04$i;$parity$05$i = 0;
  while(1) {
   $13 = HEAP32[$list$06$i>>2]|0;
   $14 = ($13|0)==(4);
   if ($14) {
    $parity$2$i = $parity$05$i;
   } else {
    $15 = (($list$06$i) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)>(0);
    if ($17) {
     $18 = (($list$06$i) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $i$03$in$i = $16;$parity$12$i = $parity$05$i;
     while(1) {
      $i$03$i = (($i$03$in$i) + -1)|0;
      $20 = (($19) + ($i$03$i)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = $21 ^ $parity$12$i;
      $23 = ($i$03$i|0)>(0);
      if ($23) {
       $i$03$in$i = $i$03$i;$parity$12$i = $22;
      } else {
       $$lcssa158 = $22;
       break;
      }
     }
     $parity$2$i = $$lcssa158;
    } else {
     $parity$2$i = $parity$05$i;
    }
   }
   $24 = (($list$06$i) + 16|0);
   $list$0$i = HEAP32[$24>>2]|0;
   $25 = ($list$0$i|0)==(0|0);
   if ($25) {
    $parity$2$i$lcssa = $parity$2$i;
    break;
   } else {
    $list$06$i = $list$0$i;$parity$05$i = $parity$2$i;
   }
  }
  $parity$0$lcssa$i = $parity$2$i$lcssa;
 }
 $26 = $parity$0$lcssa$i&255;
 HEAP32[$6>>2] = $26;
 $27 = HEAP32[$9>>2]|0;
 $28 = (($9) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_QRspec_getDataLength($27,$29)|0);
 $31 = $30 << 3;
 $32 = (($31) + -20)|0;
 $33 = ($32|0)<(1);
 if ($33) {
  _QRinput_Struct_free($4);
  $34 = HEAP32[$11>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   $list$01$i2 = $34;
   while(1) {
    $36 = (($list$01$i2) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($list$01$i2) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    _free($39);
    $40 = (($list$01$i2) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    _BitStream_free($41);
    _free($list$01$i2);
    $42 = ($37|0)==(0|0);
    if ($42) {
     break;
    } else {
     $list$01$i2 = $37;
    }
   }
  }
  _free($9);
  $$0 = 0;
  return ($$0|0);
 }
 $43 = HEAP32[$11>>2]|0;
 $44 = (($31) + -24)|0;
 $$01$ph = $9;$list$0$ph = $43;$prev$0$ph = 0;
 L35: while(1) {
  $45 = ($list$0$ph|0)==(0|0);
  if ($45) {
   $$01$ph$lcssa = $$01$ph;
   label = 69;
   break;
  }
  $46 = (($$01$ph) + 16|0);
  $bits$066 = 0;$list$067 = $list$0$ph;$prev$068 = $prev$0$ph;
  while(1) {
   $47 = HEAP32[$$01$ph>>2]|0;
   $48 = HEAP32[$46>>2]|0;
   $49 = (_QRinput_estimateBitStreamSizeOfEntry($list$067,$47,$48)|0);
   $50 = (($49) + ($bits$066))|0;
   $51 = ($50|0)>($32|0);
   if ($51) {
    $bits$066$lcssa = $bits$066;$list$067$lcssa = $list$067;$prev$068$lcssa = $prev$068;
    break;
   }
   $52 = HEAP32[$$01$ph>>2]|0;
   $53 = HEAP32[$46>>2]|0;
   $54 = (_QRinput_encodeBitStream($list$067,$52,$53)|0);
   $55 = ($54|0)<(0);
   if ($55) {
    $$01$ph$lcssa117 = $$01$ph;
    label = 82;
    break L35;
   }
   $56 = (($54) + ($bits$066))|0;
   $57 = (($list$067) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if ($59) {
    $$01$ph$lcssa118 = $$01$ph;$$lcssa131 = $46;
    label = 70;
    break L35;
   } else {
    $prev$068$phi = $list$067;$bits$066 = $56;$list$067 = $58;$prev$068 = $prev$068$phi;
   }
  }
  $60 = HEAP32[$list$067$lcssa>>2]|0;
  $61 = HEAP32[$$01$ph>>2]|0;
  $62 = (_QRspec_lengthIndicator($60,$61)|0);
  $63 = (($44) - ($bits$066$lcssa))|0;
  $64 = (($63) - ($62))|0;
  L43: do {
   switch ($60|0) {
   case 0:  {
    $65 = (($64|0) / 10)&-1;
    $66 = Math_imul($65, -10)|0;
    $67 = (($66) + ($64))|0;
    $68 = ($65*3)|0;
    $69 = ($67|0)>(6);
    if ($69) {
     $70 = (($68) + 2)|0;
     $size$0$i = $70;
     break L43;
    } else {
     $71 = ($67|0)>(3);
     $72 = $71&1;
     $$$i = (($72) + ($68))|0;
     $size$0$i = $$$i;
     break L43;
    }
    break;
   }
   case 3:  {
    $80 = (($64|0) / 13)&-1;
    $81 = $80 << 1;
    $size$0$i = $81;
    break;
   }
   case 2:  {
    $79 = (($64|0) / 8)&-1;
    $size$0$i = $79;
    break;
   }
   case 1:  {
    $73 = (($64|0) / 11)&-1;
    $74 = Math_imul($73, -11)|0;
    $75 = (($74) + ($64))|0;
    $76 = $73 << 1;
    $77 = ($75|0)>(5);
    $78 = $77&1;
    $$1$i = $78 | $76;
    $size$0$i = $$1$i;
    break;
   }
   case 4:  {
    $82 = (($64|0) / 8)&-1;
    $size$0$i = $82;
    break;
   }
   default: {
    $size$0$i = 0;
   }
   }
  } while(0);
  $83 = (_QRspec_maximumWords($60,$61)|0);
  $84 = ($size$0$i|0)<(0);
  $$size$0$i = $84 ? 0 : $size$0$i;
  $85 = ($83|0)>(0);
  $86 = ($$size$0$i|0)>($83|0);
  $or$cond$i = $85 & $86;
  $size$2$i = $or$cond$i ? $83 : $$size$0$i;
  $87 = HEAP32[$$01$ph>>2]|0;
  $88 = (($$01$ph) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($87>>>0)>(40);
  $91 = ($89>>>0)>(3);
  $or$cond3$i = $90 | $91;
  if ($or$cond3$i) {
   $$01$ph$lcssa119 = $$01$ph;
   label = 36;
   break;
  }
  $93 = (_malloc(28)|0);
  $94 = ($93|0)==(0|0);
  if ($94) {
   $$01$ph$lcssa120 = $$01$ph;
   label = 83;
   break;
  }
  $95 = (($93) + 8|0);
  HEAP32[$95>>2] = 0;
  $96 = (($93) + 12|0);
  HEAP32[$96>>2] = 0;
  HEAP32[$93>>2] = $87;
  $97 = (($93) + 4|0);
  HEAP32[$97>>2] = $89;
  $98 = (($93) + 16|0);
  HEAP32[$98>>2] = 0;
  $99 = (($93) + 20|0);
  HEAP32[$99>>2] = 0;
  $100 = ($size$2$i|0)>(0);
  if ($100) {
   $101 = HEAP32[$list$067$lcssa>>2]|0;
   $102 = (($list$067$lcssa) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) - ($size$2$i))|0;
   $105 = (($list$067$lcssa) + 8|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($size$2$i)|0);
   $108 = (_QRinput_check($101,$104,$107)|0);
   $109 = ($108|0)==(0);
   if (!($109)) {
    $$01$ph$lcssa121 = $$01$ph;$$lcssa = $95;$$lcssa140 = $93;
    label = 40;
    break;
   }
   $111 = (_malloc(20)|0);
   $112 = ($111|0)==(0|0);
   if ($112) {
    $$01$ph$lcssa122 = $$01$ph;$$lcssa141 = $93;$$lcssa146 = $95;
    label = 48;
    break;
   }
   HEAP32[$111>>2] = $101;
   $113 = (($111) + 4|0);
   HEAP32[$113>>2] = $104;
   $114 = ($104|0)>(0);
   if ($114) {
    $115 = (_malloc($104)|0);
    $116 = (($111) + 8|0);
    HEAP32[$116>>2] = $115;
    $117 = ($115|0)==(0|0);
    if ($117) {
     $$01$ph$lcssa123 = $$01$ph;$$lcssa142 = $93;$$lcssa147 = $95;$$lcssa152 = $111;
     label = 44;
     break;
    }
    _memcpy(($115|0),($107|0),($104|0))|0;
    $190 = $115;
   } else {
    $190 = 0;
   }
   $118 = (($111) + 12|0);
   HEAP32[$118>>2] = 0;
   $119 = (($111) + 16|0);
   HEAP32[$119>>2] = 0;
   $120 = (_malloc($size$2$i)|0);
   $121 = ($120|0)==(0|0);
   if ($121) {
    $$01$ph$lcssa124 = $$01$ph;$$lcssa143 = $93;$$lcssa148 = $95;$$lcssa153 = $111;$$lcssa154 = $190;$$lcssa155 = $118;
    label = 47;
    break;
   }
   _memcpy(($120|0),($106|0),($size$2$i|0))|0;
   _free($106);
   HEAP32[$105>>2] = $120;
   HEAP32[$102>>2] = $size$2$i;
   $134 = (($list$067$lcssa) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   HEAP32[$119>>2] = $135;
   HEAP32[$134>>2] = 0;
   HEAP32[$95>>2] = $111;
   $136 = (($$01$ph) + 12|0);
   $137 = HEAP32[$136>>2]|0;
   HEAP32[$96>>2] = $137;
   HEAP32[$136>>2] = $list$067$lcssa;
   $191 = $111;$prev$1 = $list$067$lcssa;
  } else {
   $138 = (($prev$068$lcssa) + 16|0);
   HEAP32[$138>>2] = 0;
   HEAP32[$95>>2] = $list$067$lcssa;
   $139 = (($$01$ph) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   HEAP32[$96>>2] = $140;
   HEAP32[$139>>2] = $prev$068$lcssa;
   $191 = $list$067$lcssa;$prev$1 = $prev$068$lcssa;
  }
  $141 = HEAP32[$46>>2]|0;
  $142 = ($141|0)==(0);
  if (!($142)) {
   $$01$ph$lcssa125 = $$01$ph;$$lcssa144 = $93;$$lcssa156 = $191;
   label = 57;
   break;
  }
  $144 = (_malloc(8)|0);
  $145 = ($144|0)==(0|0);
  if ($145) {
   $$01$ph$lcssa126 = $$01$ph;$$lcssa145 = $93;$$lcssa157 = $191;
   label = 63;
   break;
  }
  HEAP32[$144>>2] = $$01$ph;
  $146 = (($144) + 4|0);
  HEAP32[$146>>2] = 0;
  $147 = HEAP32[$4>>2]|0;
  $148 = (($147) + 1)|0;
  HEAP32[$4>>2] = $148;
  $149 = HEAP32[$8>>2]|0;
  $150 = ($149|0)==(0|0);
  if ($150) {
   HEAP32[$7>>2] = $144;
  } else {
   $151 = (($149) + 4|0);
   HEAP32[$151>>2] = $144;
  }
  HEAP32[$8>>2] = $144;
  $152 = ($148|0)<(0);
  if ($152) {
   $$01$ph$lcssa126 = $$01$ph;$$lcssa145 = $93;$$lcssa157 = $191;
   label = 63;
   break;
  } else {
   $$01$ph = $93;$list$0$ph = $191;$prev$0$ph = $prev$1;
  }
 }
 switch (label|0) {
  case 36: {
   $92 = (___errno_location()|0);
   HEAP32[$92>>2] = 22;
   $$01$ph127 = $$01$ph$lcssa119;
   break;
  }
  case 40: {
   $110 = (___errno_location()|0);
   HEAP32[$110>>2] = 22;
   $$01$ph128 = $$01$ph$lcssa121;$124 = $$lcssa;$133 = $$lcssa140;
   label = 49;
   break;
  }
  case 44: {
   _free($$lcssa152);
   $$01$ph128 = $$01$ph$lcssa123;$124 = $$lcssa147;$133 = $$lcssa142;
   label = 49;
   break;
  }
  case 47: {
   _free($$lcssa154);
   $122 = HEAP32[$$lcssa155>>2]|0;
   _BitStream_free($122);
   _free($$lcssa153);
   $$01$ph128 = $$01$ph$lcssa124;$124 = $$lcssa148;$133 = $$lcssa143;
   label = 49;
   break;
  }
  case 48: {
   $$01$ph128 = $$01$ph$lcssa122;$124 = $$lcssa146;$133 = $$lcssa141;
   label = 49;
   break;
  }
  case 57: {
   $143 = (___errno_location()|0);
   HEAP32[$143>>2] = 22;
   $$01$ph129 = $$01$ph$lcssa125;$153 = $$lcssa156;$162 = $$lcssa144;
   label = 64;
   break;
  }
  case 63: {
   $$01$ph129 = $$01$ph$lcssa126;$153 = $$lcssa157;$162 = $$lcssa145;
   label = 64;
   break;
  }
  case 69: {
   $$pre = (($$01$ph$lcssa) + 16|0);
   $$01$ph130 = $$01$ph$lcssa;$$pre$phiZ2D = $$pre;
   label = 71;
   break;
  }
  case 70: {
   $$01$ph130 = $$01$ph$lcssa118;$$pre$phiZ2D = $$lcssa131;
   label = 71;
   break;
  }
  case 82: {
   $$01$ph127 = $$01$ph$lcssa117;
   break;
  }
  case 83: {
   $$01$ph127 = $$01$ph$lcssa120;
   break;
  }
 }
 do {
  if ((label|0) == 49) {
   $123 = HEAP32[$124>>2]|0;
   $125 = ($123|0)==(0|0);
   if (!($125)) {
    $list$01$i9 = $123;
    while(1) {
     $126 = (($list$01$i9) + 16|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($list$01$i9) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     _free($129);
     $130 = (($list$01$i9) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     _BitStream_free($131);
     _free($list$01$i9);
     $132 = ($127|0)==(0|0);
     if ($132) {
      break;
     } else {
      $list$01$i9 = $127;
     }
    }
   }
   _free($133);
   $$01$ph127 = $$01$ph128;
  }
  else if ((label|0) == 64) {
   $154 = ($153|0)==(0|0);
   if (!($154)) {
    $list$01$i14 = $153;
    while(1) {
     $155 = (($list$01$i14) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($list$01$i14) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     _free($158);
     $159 = (($list$01$i14) + 12|0);
     $160 = HEAP32[$159>>2]|0;
     _BitStream_free($160);
     _free($list$01$i14);
     $161 = ($156|0)==(0|0);
     if ($161) {
      break;
     } else {
      $list$01$i14 = $156;
     }
    }
   }
   _free($162);
   $$01$ph127 = $$01$ph129;
  }
  else if ((label|0) == 71) {
   $163 = HEAP32[$$pre$phiZ2D>>2]|0;
   $164 = ($163|0)==(0);
   if (!($164)) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 22;
    $$01$ph127 = $$01$ph130;
    break;
   }
   $166 = (_malloc(8)|0);
   $167 = ($166|0)==(0|0);
   if ($167) {
    $$01$ph127 = $$01$ph130;
   } else {
    HEAP32[$166>>2] = $$01$ph130;
    $168 = (($166) + 4|0);
    HEAP32[$168>>2] = 0;
    $169 = HEAP32[$4>>2]|0;
    $170 = (($169) + 1)|0;
    HEAP32[$4>>2] = $170;
    $171 = HEAP32[$8>>2]|0;
    $172 = ($171|0)==(0|0);
    if ($172) {
     HEAP32[$7>>2] = $166;
    } else {
     $173 = (($171) + 4|0);
     HEAP32[$173>>2] = $166;
    }
    HEAP32[$8>>2] = $166;
    $174 = ($170|0)<(0);
    if ($174) {
     $$01$ph127 = $$01$ph130;
    } else {
     $175 = ($169|0)>(15);
     if ($175) {
      _QRinput_Struct_free($4);
      $176 = (___errno_location()|0);
      HEAP32[$176>>2] = 34;
      $$0 = 0;
      return ($$0|0);
     }
     $177 = (_QRinput_Struct_insertStructuredAppendHeaders($4)|0);
     $178 = ($177|0)<(0);
     if (!($178)) {
      $$0 = $4;
      return ($$0|0);
     }
     _QRinput_Struct_free($4);
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $179 = ($$01$ph127|0)==(0|0);
 if (!($179)) {
  $180 = (($$01$ph127) + 8|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)==(0|0);
  if (!($182)) {
   $list$01$i = $181;
   while(1) {
    $183 = (($list$01$i) + 16|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (($list$01$i) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    _free($186);
    $187 = (($list$01$i) + 12|0);
    $188 = HEAP32[$187>>2]|0;
    _BitStream_free($188);
    _free($list$01$i);
    $189 = ($184|0)==(0|0);
    if ($189) {
     break;
    } else {
     $list$01$i = $184;
    }
   }
  }
  _free($$01$ph127);
 }
 _QRinput_Struct_free($4);
 $$0 = 0;
 return ($$0|0);
}
function _QRinput_Struct_insertStructuredAppendHeaders($s) {
 $s = $s|0;
 var $$0 = 0, $$0$ph = 0, $$lcssa = 0, $$lcssa12 = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03$i$i = 0, $i$03$in$i$i = 0;
 var $i$04 = 0, $list$0 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$01$i = 0, $list$03$i = 0, $list$04$i$i = 0, $list$05 = 0, $list$06$i$i = 0, $or$cond$i = 0, $parity$0$lcssa$i = 0, $parity$0$lcssa$i$i = 0, $parity$02$i = 0, $parity$05$i$i = 0, $parity$12$i$i = 0, $parity$2$i$i = 0, $parity$2$i$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($s) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = (($s) + 8|0);
 $list$01$i = HEAP32[$5>>2]|0;
 if ($4) {
  $6 = ($list$01$i|0)==(0|0);
  if ($6) {
   $parity$0$lcssa$i = 0;
  } else {
   $list$03$i = $list$01$i;$parity$02$i = 0;
   while(1) {
    $7 = HEAP32[$list$03$i>>2]|0;
    $8 = (($7) + 8|0);
    $list$04$i$i = HEAP32[$8>>2]|0;
    $9 = ($list$04$i$i|0)==(0|0);
    if ($9) {
     $parity$0$lcssa$i$i = 0;
    } else {
     $list$06$i$i = $list$04$i$i;$parity$05$i$i = 0;
     while(1) {
      $10 = HEAP32[$list$06$i$i>>2]|0;
      $11 = ($10|0)==(4);
      if ($11) {
       $parity$2$i$i = $parity$05$i$i;
      } else {
       $12 = (($list$06$i$i) + 4|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($13|0)>(0);
       if ($14) {
        $15 = (($list$06$i$i) + 8|0);
        $16 = HEAP32[$15>>2]|0;
        $i$03$in$i$i = $13;$parity$12$i$i = $parity$05$i$i;
        while(1) {
         $i$03$i$i = (($i$03$in$i$i) + -1)|0;
         $17 = (($16) + ($i$03$i$i)|0);
         $18 = HEAP8[$17>>0]|0;
         $19 = $18 ^ $parity$12$i$i;
         $20 = ($i$03$i$i|0)>(0);
         if ($20) {
          $i$03$in$i$i = $i$03$i$i;$parity$12$i$i = $19;
         } else {
          $$lcssa = $19;
          break;
         }
        }
        $parity$2$i$i = $$lcssa;
       } else {
        $parity$2$i$i = $parity$05$i$i;
       }
      }
      $21 = (($list$06$i$i) + 16|0);
      $list$0$i$i = HEAP32[$21>>2]|0;
      $22 = ($list$0$i$i|0)==(0|0);
      if ($22) {
       $parity$2$i$i$lcssa = $parity$2$i$i;
       break;
      } else {
       $list$06$i$i = $list$0$i$i;$parity$05$i$i = $parity$2$i$i;
      }
     }
     $parity$0$lcssa$i$i = $parity$2$i$i$lcssa;
    }
    $23 = $parity$0$lcssa$i$i ^ $parity$02$i;
    $24 = (($list$03$i) + 4|0);
    $list$0$i = HEAP32[$24>>2]|0;
    $25 = ($list$0$i|0)==(0|0);
    if ($25) {
     $$lcssa13 = $23;
     break;
    } else {
     $list$03$i = $list$0$i;$parity$02$i = $23;
    }
   }
   $parity$0$lcssa$i = $$lcssa13;
  }
  $26 = $parity$0$lcssa$i&255;
  HEAP32[$2>>2] = $26;
  $30 = $26;
 } else {
  $30 = $3;
 }
 $27 = ($list$01$i|0)==(0|0);
 if ($27) {
  $$0 = 0;
  return ($$0|0);
 }
 $i$04 = 1;$list$05 = $list$01$i;
 while(1) {
  $28 = HEAP32[$list$05>>2]|0;
  $29 = $30&255;
  $31 = ($0|0)>(16);
  if ($31) {
   label = 20;
   break;
  }
  $33 = ($i$04|0)<(1);
  $34 = ($i$04|0)>($0|0);
  $or$cond$i = $33 | $34;
  if ($or$cond$i) {
   label = 22;
   break;
  }
  $36 = $0&255;
  $37 = $i$04&255;
  $38 = (_malloc(20)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$0$ph = -1;
   label = 27;
   break;
  }
  HEAP32[$38>>2] = 4;
  $40 = (($38) + 4|0);
  HEAP32[$40>>2] = 3;
  $41 = (_malloc(3)|0);
  $42 = (($38) + 8|0);
  HEAP32[$42>>2] = $41;
  $43 = ($41|0)==(0|0);
  if ($43) {
   $$lcssa12 = $38;
   label = 25;
   break;
  }
  HEAP8[$41>>0] = $36;
  $44 = (($41) + 1|0);
  HEAP8[$44>>0] = $37;
  $45 = (($41) + 2|0);
  HEAP8[$45>>0] = $29;
  $46 = (($38) + 12|0);
  HEAP32[$46>>2] = 0;
  $47 = (($38) + 16|0);
  $48 = (($28) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$47>>2] = $49;
  HEAP32[$48>>2] = $38;
  $50 = (($i$04) + 1)|0;
  $51 = (($list$05) + 4|0);
  $list$0 = HEAP32[$51>>2]|0;
  $52 = ($list$0|0)==(0|0);
  if ($52) {
   $$0$ph = 0;
   label = 27;
   break;
  } else {
   $i$04 = $50;$list$05 = $list$0;
  }
 }
 if ((label|0) == 20) {
  $32 = (___errno_location()|0);
  HEAP32[$32>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 22) {
  $35 = (___errno_location()|0);
  HEAP32[$35>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 25) {
  _free($$lcssa12);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 27) {
  $$0 = $$0$ph;
  return ($$0|0);
 }
 return (0)|0;
}
function _QRinput_encodeBitStream($entry,$version,$mqr) {
 $entry = $entry|0;
 $version = $version|0;
 $mqr = $mqr|0;
 var $$0 = 0, $$lcssa28 = 0, $$pre$i = 0, $$pre$i8 = 0, $$pre5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code$0$i = 0, $i$01$i = 0, $i$02$i = 0, $i$02$i14 = 0, $phitmp$i = 0, $ret$0$i = 0, $ret$1$lcssa$i = 0;
 var $st2$025 = 0, $val$0$i = 0, $val$0$v$i = 0, $words$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($entry) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BitStream_free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = HEAP32[$entry>>2]|0;
 $4 = (_QRspec_maximumWords($3,$version)|0);
 $5 = ($4|0)==(0);
 L4: do {
  if ($5) {
   label = 25;
  } else {
   $6 = (($entry) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($4|0);
   if ($8) {
    $9 = HEAP32[$entry>>2]|0;
    $10 = (($entry) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_QRinput_check($9,$4,$11)|0);
    $13 = ($12|0)==(0);
    if (!($13)) {
     $14 = (___errno_location()|0);
     HEAP32[$14>>2] = 22;
     $$0 = -1;
     return ($$0|0);
    }
    $15 = (_malloc(20)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$0 = -1;
     return ($$0|0);
    }
    HEAP32[$15>>2] = $9;
    $17 = (($15) + 4|0);
    HEAP32[$17>>2] = $4;
    $18 = ($4|0)>(0);
    do {
     if ($18) {
      $19 = (_malloc($4)|0);
      $20 = (($15) + 8|0);
      HEAP32[$20>>2] = $19;
      $21 = ($19|0)==(0|0);
      if (!($21)) {
       _memcpy(($19|0),($11|0),($4|0))|0;
       break;
      }
      _free($15);
      $$0 = -1;
      return ($$0|0);
     }
    } while(0);
    $22 = (($15) + 12|0);
    HEAP32[$22>>2] = 0;
    $23 = (($15) + 16|0);
    HEAP32[$23>>2] = 0;
    $24 = (($7) - ($4))|0;
    $25 = (($11) + ($4)|0);
    $26 = (_QRinput_check($9,$24,$25)|0);
    $27 = ($26|0)==(0);
    L21: do {
     if ($27) {
      $29 = (_malloc(20)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       $st2$025 = 0;
      } else {
       HEAP32[$29>>2] = $9;
       $31 = (($29) + 4|0);
       HEAP32[$31>>2] = $24;
       $32 = ($24|0)>(0);
       do {
        if ($32) {
         $33 = (_malloc($24)|0);
         $34 = (($29) + 8|0);
         HEAP32[$34>>2] = $33;
         $35 = ($33|0)==(0|0);
         if ($35) {
          _free($29);
          $st2$025 = 0;
          break L21;
         } else {
          _memcpy(($33|0),($25|0),($24|0))|0;
          break;
         }
        }
       } while(0);
       $36 = (($29) + 12|0);
       HEAP32[$36>>2] = 0;
       $37 = (($29) + 16|0);
       HEAP32[$37>>2] = 0;
       $38 = (_QRinput_encodeBitStream($15,$version,$mqr)|0);
       $39 = ($38|0)<(0);
       if ($39) {
        $st2$025 = $29;
       } else {
        $40 = (_QRinput_encodeBitStream($29,$version,$mqr)|0);
        $41 = ($40|0)<(0);
        if ($41) {
         $st2$025 = $29;
        } else {
         $42 = (_BitStream_new()|0);
         HEAP32[$0>>2] = $42;
         $43 = ($42|0)==(0|0);
         if ($43) {
          $st2$025 = $29;
         } else {
          $44 = HEAP32[$22>>2]|0;
          $45 = (_BitStream_append($42,$44)|0);
          $46 = ($45|0)<(0);
          if ($46) {
           $st2$025 = $29;
          } else {
           $47 = HEAP32[$0>>2]|0;
           $48 = HEAP32[$36>>2]|0;
           $49 = (_BitStream_append($47,$48)|0);
           $50 = ($49|0)<(0);
           if ($50) {
            $st2$025 = $29;
           } else {
            $51 = (($15) + 8|0);
            $52 = HEAP32[$51>>2]|0;
            _free($52);
            $53 = HEAP32[$22>>2]|0;
            _BitStream_free($53);
            _free($15);
            $54 = (($29) + 8|0);
            $55 = HEAP32[$54>>2]|0;
            _free($55);
            $56 = HEAP32[$36>>2]|0;
            _BitStream_free($56);
            _free($29);
            break L4;
           }
          }
         }
        }
       }
      }
     } else {
      $28 = (___errno_location()|0);
      HEAP32[$28>>2] = 22;
      $st2$025 = 0;
     }
    } while(0);
    $360 = (($15) + 8|0);
    $361 = HEAP32[$360>>2]|0;
    _free($361);
    $362 = HEAP32[$22>>2]|0;
    _BitStream_free($362);
    _free($15);
    $363 = ($st2$025|0)==(0|0);
    if ($363) {
     $$0 = -1;
     return ($$0|0);
    }
    $364 = (($st2$025) + 8|0);
    $365 = HEAP32[$364>>2]|0;
    _free($365);
    $366 = (($st2$025) + 12|0);
    $367 = HEAP32[$366>>2]|0;
    _BitStream_free($367);
    _free($st2$025);
    $$0 = -1;
    return ($$0|0);
   } else {
    label = 25;
   }
  }
 } while(0);
 L41: do {
  if ((label|0) == 25) {
   $57 = HEAP32[$entry>>2]|0;
   switch ($57|0) {
   case 0:  {
    $58 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $58;
    $59 = ($58|0)==(0|0);
    if ($59) {
     $$0 = -1;
     return ($$0|0);
    }
    $60 = ($mqr|0)==(0);
    do {
     if ($60) {
      $71 = (_BitStream_appendNum($58,4,1)|0);
      $72 = ($71|0)<(0);
      if (!($72)) {
       $73 = HEAP32[$0>>2]|0;
       $74 = (_QRspec_lengthIndicator(0,$version)|0);
       $75 = (($entry) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (_BitStream_appendNum($73,$74,$76)|0);
       $78 = ($77|0)<(0);
       if (!($78)) {
        $ret$0$i = $77;
        label = 34;
       }
      }
     } else {
      $61 = ($version|0)>(1);
      if ($61) {
       $62 = (($version) + -1)|0;
       $63 = (_BitStream_appendNum($58,$62,0)|0);
       $64 = ($63|0)<(0);
       if ($64) {
        break;
       }
       $$pre5$i = HEAP32[$0>>2]|0;
       $68 = $$pre5$i;
      } else {
       $68 = $58;
      }
      $65 = (_MQRspec_lengthIndicator(0,$version)|0);
      $66 = (($entry) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $69 = (_BitStream_appendNum($68,$65,$67)|0);
      $70 = ($69|0)<(0);
      if (!($70)) {
       $ret$0$i = $69;
       label = 34;
      }
     }
    } while(0);
    L56: do {
     if ((label|0) == 34) {
      $79 = (($entry) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($80|0) / 3)&-1;
      $82 = ($80|0)>(2);
      do {
       if ($82) {
        $83 = (($entry) + 8|0);
        $i$02$i = 0;
        while(1) {
         $86 = ($i$02$i*3)|0;
         $87 = HEAP32[$83>>2]|0;
         $88 = (($87) + ($86)|0);
         $89 = HEAP8[$88>>0]|0;
         $90 = $89&255;
         $91 = ($90*100)|0;
         $92 = (($86) + 1)|0;
         $93 = (($87) + ($92)|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94&255;
         $96 = ($95*10)|0;
         $97 = (($86) + 2)|0;
         $98 = (($87) + ($97)|0);
         $99 = HEAP8[$98>>0]|0;
         $100 = $99&255;
         $101 = (($91) + -5328)|0;
         $102 = (($101) + ($96))|0;
         $103 = (($102) + ($100))|0;
         $104 = HEAP32[$0>>2]|0;
         $105 = (_BitStream_appendNum($104,10,$103)|0);
         $106 = ($105|0)<(0);
         $84 = (($i$02$i) + 1)|0;
         if ($106) {
          label = 42;
          break;
         }
         $85 = ($84|0)<($81|0);
         if ($85) {
          $i$02$i = $84;
         } else {
          $$lcssa28 = $105;
          label = 38;
          break;
         }
        }
        if ((label|0) == 38) {
         $$pre$i = HEAP32[$79>>2]|0;
         $109 = $$pre$i;$ret$1$lcssa$i = $$lcssa28;
         break;
        }
        else if ((label|0) == 42) {
         break L56;
        }
       } else {
        $109 = $80;$ret$1$lcssa$i = $ret$0$i;
       }
      } while(0);
      $107 = ($81*3)|0;
      $108 = (($109) - ($107))|0;
      if ((($108|0) == 2)) {
       $119 = (($entry) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($120) + ($107)|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = $122&255;
       $124 = ($123*10)|0;
       $125 = (($107) + 1)|0;
       $126 = (($120) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127&255;
       $129 = (($128) + -528)|0;
       $130 = (($129) + ($124))|0;
       $131 = HEAP32[$0>>2]|0;
       (_BitStream_appendNum($131,7,$130)|0);
       $132 = ($ret$1$lcssa$i|0)<(0);
       if ($132) {
        break;
       } else {
        break L41;
       }
      } else if ((($108|0) == 1)) {
       $110 = (($entry) + 8|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = (($111) + ($107)|0);
       $113 = HEAP8[$112>>0]|0;
       $114 = $113&255;
       $115 = (($114) + -48)|0;
       $116 = HEAP32[$0>>2]|0;
       $117 = (_BitStream_appendNum($116,4,$115)|0);
       $118 = ($117|0)<(0);
       if ($118) {
        break;
       } else {
        break L41;
       }
      } else {
       break L41;
      }
     }
    } while(0);
    $133 = HEAP32[$0>>2]|0;
    _BitStream_free($133);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 2:  {
    $207 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $207;
    $208 = ($207|0)==(0|0);
    if ($208) {
     $$0 = -1;
     return ($$0|0);
    }
    $209 = ($mqr|0)==(0);
    do {
     if ($209) {
      $221 = (_BitStream_appendNum($207,4,4)|0);
      $222 = ($221|0)<(0);
      if (!($222)) {
       $223 = HEAP32[$0>>2]|0;
       $224 = (_QRspec_lengthIndicator(2,$version)|0);
       $225 = (($entry) + 4|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = (_BitStream_appendNum($223,$224,$226)|0);
       $228 = ($227|0)<(0);
       if (!($228)) {
        label = 75;
       }
      }
     } else {
      $210 = ($version|0)<(3);
      if ($210) {
       $211 = (___errno_location()|0);
       HEAP32[$211>>2] = 22;
       break;
      }
      $212 = (($version) + -1)|0;
      $213 = (_BitStream_appendNum($207,$212,2)|0);
      $214 = ($213|0)<(0);
      if (!($214)) {
       $215 = HEAP32[$0>>2]|0;
       $216 = (_MQRspec_lengthIndicator(2,$version)|0);
       $217 = (($entry) + 4|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (_BitStream_appendNum($215,$216,$218)|0);
       $220 = ($219|0)<(0);
       if (!($220)) {
        label = 75;
       }
      }
     }
    } while(0);
    if ((label|0) == 75) {
     $229 = HEAP32[$0>>2]|0;
     $230 = (($entry) + 4|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (($entry) + 8|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (_BitStream_appendBytes($229,$231,$233)|0);
     $235 = ($234|0)<(0);
     if (!($235)) {
      break L41;
     }
    }
    $236 = HEAP32[$0>>2]|0;
    _BitStream_free($236);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 3:  {
    $237 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $237;
    $238 = ($237|0)==(0|0);
    if ($238) {
     $$0 = -1;
     return ($$0|0);
    }
    $239 = ($mqr|0)==(0);
    do {
     if ($239) {
      $252 = (_BitStream_appendNum($237,4,8)|0);
      $253 = ($252|0)<(0);
      if (!($253)) {
       $254 = HEAP32[$0>>2]|0;
       $255 = (_QRspec_lengthIndicator(3,$version)|0);
       $256 = (($entry) + 4|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (($257|0) / 2)&-1;
       $259 = (_BitStream_appendNum($254,$255,$258)|0);
       $260 = ($259|0)<(0);
       if (!($260)) {
        label = 85;
       }
      }
     } else {
      $240 = ($version|0)<(2);
      if ($240) {
       $241 = (___errno_location()|0);
       HEAP32[$241>>2] = 22;
       break;
      }
      $242 = (($version) + -1)|0;
      $243 = (_BitStream_appendNum($237,$242,3)|0);
      $244 = ($243|0)<(0);
      if (!($244)) {
       $245 = HEAP32[$0>>2]|0;
       $246 = (_MQRspec_lengthIndicator(3,$version)|0);
       $247 = (($entry) + 4|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = (($248|0) / 2)&-1;
       $250 = (_BitStream_appendNum($245,$246,$249)|0);
       $251 = ($250|0)<(0);
       if (!($251)) {
        label = 85;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 85) {
      $261 = (($entry) + 4|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = ($262|0)>(0);
      if (!($263)) {
       break L41;
      }
      $264 = (($entry) + 8|0);
      $i$02$i14 = 0;
      while(1) {
       $268 = HEAP32[$264>>2]|0;
       $269 = (($268) + ($i$02$i14)|0);
       $270 = HEAP8[$269>>0]|0;
       $271 = $270&255;
       $272 = $271 << 8;
       $273 = $i$02$i14 | 1;
       $274 = (($268) + ($273)|0);
       $275 = HEAP8[$274>>0]|0;
       $276 = $275&255;
       $277 = $272 | $276;
       $278 = ($277>>>0)<(40957);
       $val$0$v$i = $278 ? -33088 : -49472;
       $val$0$i = (($val$0$v$i) + ($277))|0;
       $279 = $val$0$i >>> 8;
       $280 = ($279*192)|0;
       $281 = $val$0$i & 255;
       $282 = (($280) + ($281))|0;
       $283 = HEAP32[$0>>2]|0;
       $284 = (_BitStream_appendNum($283,13,$282)|0);
       $285 = ($284|0)<(0);
       $266 = (($i$02$i14) + 2)|0;
       if ($285) {
        label = 89;
        break;
       }
       $265 = HEAP32[$261>>2]|0;
       $267 = ($266|0)<($265|0);
       if ($267) {
        $i$02$i14 = $266;
       } else {
        label = 111;
        break;
       }
      }
      if ((label|0) == 89) {
       break;
      }
      else if ((label|0) == 111) {
       break L41;
      }
     }
    } while(0);
    $286 = HEAP32[$0>>2]|0;
    _BitStream_free($286);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 4:  {
    $287 = ($mqr|0)==(0);
    if (!($287)) {
     $288 = (___errno_location()|0);
     HEAP32[$288>>2] = 22;
     $$0 = -1;
     return ($$0|0);
    }
    $289 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $289;
    $290 = ($289|0)==(0|0);
    if ($290) {
     $$0 = -1;
     return ($$0|0);
    }
    $291 = (_BitStream_appendNum($289,4,3)|0);
    $292 = ($291|0)<(0);
    if (!($292)) {
     $293 = HEAP32[$0>>2]|0;
     $294 = (($entry) + 8|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = (($295) + 1|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = (($298) + -1)|0;
     $300 = (_BitStream_appendNum($293,4,$299)|0);
     $301 = ($300|0)<(0);
     if (!($301)) {
      $302 = HEAP32[$0>>2]|0;
      $303 = HEAP32[$294>>2]|0;
      $304 = HEAP8[$303>>0]|0;
      $305 = $304&255;
      $306 = (($305) + -1)|0;
      $307 = (_BitStream_appendNum($302,4,$306)|0);
      $308 = ($307|0)<(0);
      if (!($308)) {
       $309 = HEAP32[$0>>2]|0;
       $310 = HEAP32[$294>>2]|0;
       $311 = (($310) + 2|0);
       $312 = HEAP8[$311>>0]|0;
       $313 = $312&255;
       $314 = (_BitStream_appendNum($309,8,$313)|0);
       $315 = ($314|0)<(0);
       if (!($315)) {
        break L41;
       }
      }
     }
    }
    $316 = HEAP32[$0>>2]|0;
    _BitStream_free($316);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 1:  {
    $134 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $134;
    $135 = ($134|0)==(0|0);
    if ($135) {
     $$0 = -1;
     return ($$0|0);
    }
    $136 = ($mqr|0)==(0);
    do {
     if ($136) {
      $148 = (_BitStream_appendNum($134,4,2)|0);
      $149 = ($148|0)<(0);
      if (!($149)) {
       $150 = HEAP32[$0>>2]|0;
       $151 = (_QRspec_lengthIndicator(1,$version)|0);
       $152 = (($entry) + 4|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (_BitStream_appendNum($150,$151,$153)|0);
       $155 = ($154|0)<(0);
       if (!($155)) {
        label = 52;
       }
      }
     } else {
      $137 = ($version|0)<(2);
      if ($137) {
       $138 = (___errno_location()|0);
       HEAP32[$138>>2] = 22;
       break;
      }
      $139 = (($version) + -1)|0;
      $140 = (_BitStream_appendNum($134,$139,1)|0);
      $141 = ($140|0)<(0);
      if (!($141)) {
       $142 = HEAP32[$0>>2]|0;
       $143 = (_MQRspec_lengthIndicator(1,$version)|0);
       $144 = (($entry) + 4|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (_BitStream_appendNum($142,$143,$145)|0);
       $147 = ($146|0)<(0);
       if (!($147)) {
        label = 52;
       }
      }
     }
    } while(0);
    L137: do {
     if ((label|0) == 52) {
      $156 = (($entry) + 4|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (($157|0) / 2)&-1;
      $159 = ($157|0)>(1);
      do {
       if ($159) {
        $160 = (($entry) + 8|0);
        $i$01$i = 0;
        while(1) {
         $163 = $i$01$i << 1;
         $164 = HEAP32[$160>>2]|0;
         $165 = (($164) + ($163)|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = $166&255;
         $168 = $167 & 128;
         $169 = ($168|0)==(0);
         if ($169) {
          $170 = (12536 + ($167)|0);
          $171 = HEAP8[$170>>0]|0;
          $172 = $171 << 24 >> 24;
          $phitmp$i = ($172*45)|0;
          $183 = $phitmp$i;
         } else {
          $183 = -45;
         }
         $173 = $163 | 1;
         $174 = (($164) + ($173)|0);
         $175 = HEAP8[$174>>0]|0;
         $176 = $175&255;
         $177 = $176 & 128;
         $178 = ($177|0)==(0);
         if ($178) {
          $179 = (12536 + ($176)|0);
          $180 = HEAP8[$179>>0]|0;
          $181 = $180 << 24 >> 24;
          $184 = $181;
         } else {
          $184 = -1;
         }
         $182 = (($184) + ($183))|0;
         $185 = HEAP32[$0>>2]|0;
         $186 = (_BitStream_appendNum($185,11,$182)|0);
         $187 = ($186|0)<(0);
         $161 = (($i$01$i) + 1)|0;
         if ($187) {
          label = 65;
          break;
         }
         $162 = ($161|0)<($158|0);
         if ($162) {
          $i$01$i = $161;
         } else {
          label = 60;
          break;
         }
        }
        if ((label|0) == 60) {
         $$pre$i8 = HEAP32[$156>>2]|0;
         $189 = $$pre$i8;
         break;
        }
        else if ((label|0) == 65) {
         break L137;
        }
       } else {
        $189 = $157;
       }
      } while(0);
      $188 = $189 & 1;
      $190 = ($188|0)==(0);
      if ($190) {
       break L41;
      }
      $191 = $158 << 1;
      $192 = (($entry) + 8|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + ($191)|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = $195&255;
      $197 = $196 & 128;
      $198 = ($197|0)==(0);
      if ($198) {
       $199 = (12536 + ($196)|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = $200 << 24 >> 24;
       $203 = $201;
      } else {
       $203 = -1;
      }
      $202 = HEAP32[$0>>2]|0;
      $204 = (_BitStream_appendNum($202,6,$203)|0);
      $205 = ($204|0)<(0);
      if (!($205)) {
       break L41;
      }
     }
    } while(0);
    $206 = HEAP32[$0>>2]|0;
    _BitStream_free($206);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 5:  {
    $317 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $317;
    $318 = ($317|0)==(0|0);
    if ($318) {
     $$0 = -1;
     return ($$0|0);
    }
    $319 = (($entry) + 8|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (($320) + 3|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = $323 << 8;
    $325 = (($320) + 2|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $326&255;
    $328 = $327 | $324;
    $329 = $328 << 8;
    $330 = (($320) + 1|0);
    $331 = HEAP8[$330>>0]|0;
    $332 = $331&255;
    $333 = $329 | $332;
    $334 = $333 << 8;
    $335 = HEAP8[$320>>0]|0;
    $336 = $335&255;
    $337 = $334 | $336;
    $338 = ($337>>>0)<(128);
    do {
     if ($338) {
      $code$0$i = $337;$words$0$i = 8;
     } else {
      $339 = ($337>>>0)<(16384);
      if ($339) {
       $340 = (($337) + 32768)|0;
       $code$0$i = $340;$words$0$i = 16;
       break;
      } else {
       $341 = (($337) + 786432)|0;
       $code$0$i = $341;$words$0$i = 24;
       break;
      }
     }
    } while(0);
    $342 = (_BitStream_appendNum($317,4,7)|0);
    $343 = ($342|0)<(0);
    if (!($343)) {
     $344 = HEAP32[$0>>2]|0;
     $345 = (_BitStream_appendNum($344,$words$0$i,$code$0$i)|0);
     $346 = ($345|0)<(0);
     if (!($346)) {
      break L41;
     }
    }
    $347 = HEAP32[$0>>2]|0;
    _BitStream_free($347);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   case 7:  {
    $348 = (_BitStream_new()|0);
    HEAP32[$0>>2] = $348;
    $349 = ($348|0)==(0|0);
    if ($349) {
     $$0 = -1;
     return ($$0|0);
    }
    $350 = (_BitStream_appendNum($348,4,9)|0);
    $351 = ($350|0)<(0);
    if (!($351)) {
     $352 = HEAP32[$0>>2]|0;
     $353 = (($entry) + 8|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (_BitStream_appendBytes($352,1,$354)|0);
     $356 = ($355|0)<(0);
     if (!($356)) {
      break L41;
     }
    }
    $357 = HEAP32[$0>>2]|0;
    _BitStream_free($357);
    HEAP32[$0>>2] = 0;
    $$0 = -1;
    return ($$0|0);
    break;
   }
   default: {
    break L41;
   }
   }
  }
 } while(0);
 $358 = HEAP32[$0>>2]|0;
 $359 = HEAP32[$358>>2]|0;
 $$0 = $359;
 return ($$0|0);
}
function _QRinput_estimateBitStreamSizeOfEntry($entry,$version,$mqr) {
 $entry = $entry|0;
 $version = $version|0;
 $mqr = $mqr|0;
 var $$$i = 0, $$$i2 = 0, $$0 = 0, $$pn = 0, $$version = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bits$0 = 0, $bits$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0);
 $$version = $0 ? 1 : $version;
 $1 = HEAP32[$entry>>2]|0;
 L1: do {
  switch ($1|0) {
  case 1:  {
   $10 = (($entry) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11|0) / 2)&-1;
   $13 = ($12*11)|0;
   $14 = $11 & 1;
   $15 = ($14|0)==(0);
   $16 = (($13) + 6)|0;
   $$$i2 = $15 ? $13 : $16;
   $bits$0 = $$$i2;
   break;
  }
  case 0:  {
   $2 = (($entry) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3|0) / 3)&-1;
   $5 = ($4*10)|0;
   $6 = Math_imul($4, -3)|0;
   $7 = (($6) + ($3))|0;
   if ((($7|0) == 1)) {
    $8 = (($5) + 4)|0;
    $bits$0 = $8;
    break L1;
   } else if ((($7|0) == 2)) {
    $9 = (($5) + 7)|0;
    $bits$0 = $9;
    break L1;
   } else {
    $bits$0 = $5;
    break L1;
   }
   break;
  }
  case 2:  {
   $17 = (($entry) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 << 3;
   $bits$0 = $19;
   break;
  }
  case 4:  {
   $$0 = 20;
   return ($$0|0);
   break;
  }
  case 7:  {
   $$0 = 12;
   return ($$0|0);
   break;
  }
  case 6:  {
   $$0 = 4;
   return ($$0|0);
   break;
  }
  case 3:  {
   $20 = (($entry) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21|0) / 2)&-1;
   $23 = ($22*13)|0;
   $bits$0 = $23;
   break;
  }
  case 5:  {
   $24 = (($entry) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 3|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = (($25) + 2|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 | $29;
   $34 = $33 << 8;
   $35 = (($25) + 1|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $34 | $37;
   $39 = $38 << 8;
   $40 = HEAP8[$25>>0]|0;
   $41 = $40&255;
   $42 = $39 | $41;
   $43 = ($42>>>0)<(128);
   if ($43) {
    $bits$0 = 12;
   } else {
    $44 = ($42>>>0)<(16384);
    $$$i = $44 ? 20 : 28;
    $bits$0 = $$$i;
   }
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
 } while(0);
 $45 = ($mqr|0)==(0);
 $46 = (_QRspec_lengthIndicator($1,$$version)|0);
 if ($45) {
  $49 = 1 << $46;
  $50 = (($entry) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + -1)|0;
  $53 = (($52) + ($51))|0;
  $54 = (($53|0) / ($49|0))&-1;
  $55 = (($46) + 4)|0;
  $56 = Math_imul($54, $55)|0;
  $$pn = $56;
 } else {
  $47 = (($$version) + -1)|0;
  $48 = (($47) + ($46))|0;
  $$pn = $48;
 }
 $bits$1 = (($$pn) + ($bits$0))|0;
 $$0 = $bits$1;
 return ($$0|0);
}
function _BitStream_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 $$0 = $0;
 return ($$0|0);
}
function _BitStream_append($bstream,$arg) {
 $bstream = $bstream|0;
 $arg = $arg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($arg|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = HEAP32[$arg>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$bstream>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $14 = (($3) + ($1))|0;
  $15 = (_malloc($14)|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0 = -1;
   return ($$0|0);
  }
  $17 = (($bstream) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _memcpy(($15|0),($18|0),($3|0))|0;
  $19 = (($15) + ($3)|0);
  $20 = (($arg) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  _memcpy(($19|0),($21|0),($1|0))|0;
  _free($18);
  $22 = HEAP32[$arg>>2]|0;
  $23 = HEAP32[$bstream>>2]|0;
  $24 = (($23) + ($22))|0;
  HEAP32[$bstream>>2] = $24;
  HEAP32[$17>>2] = $15;
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($bstream|0)==(0|0);
 if ($5) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = (_malloc($1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = (($bstream) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _free($9);
 }
 HEAP32[$bstream>>2] = $1;
 HEAP32[$8>>2] = $6;
 $11 = (($arg) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$arg>>2]|0;
 _memcpy(($6|0),($12|0),($13|0))|0;
 $$0 = 0;
 return ($$0|0);
}
function _BitStream_appendNum($bstream,$bits,$num) {
 $bstream = $bstream|0;
 $bits = $bits|0;
 $num = $num|0;
 var $$$i = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$04$i = 0, $mask$03$i = 0;
 var $not$$i = 0, $p$05$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_malloc(8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$1>>2] = 0;
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = (_malloc($bits)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _free($1);
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$1>>2] = $bits;
 HEAP32[$3>>2] = $4;
 $6 = ($bits|0)>(0);
 if ($6) {
  $7 = (($bits) + -1)|0;
  $8 = 1 << $7;
  $i$04$i = 0;$mask$03$i = $8;$p$05$i = $4;
  while(1) {
   $9 = $mask$03$i & $num;
   $not$$i = ($9|0)!=(0);
   $$$i = $not$$i&1;
   HEAP8[$p$05$i>>0] = $$$i;
   $10 = (($p$05$i) + 1|0);
   $11 = $mask$03$i >>> 1;
   $12 = (($i$04$i) + 1)|0;
   $exitcond$i = ($12|0)==($bits|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$04$i = $12;$mask$03$i = $11;$p$05$i = $10;
   }
  }
 }
 $13 = (_BitStream_append($bstream,$1)|0);
 $14 = HEAP32[$3>>2]|0;
 _free($14);
 _free($1);
 $$0 = $13;
 return ($$0|0);
}
function _BitStream_free($bstream) {
 $bstream = $bstream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bstream|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($bstream) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 _free($bstream);
 return;
}
function _BitStream_appendBytes($bstream,$size,$data) {
 $bstream = $bstream|0;
 $size = $size|0;
 $data = $data|0;
 var $$0 = 0, $$lobit$i = 0, $$lobit10$i = 0, $$lobit11$i = 0, $$lobit12$i = 0, $$lobit13$i = 0, $$lobit8$i = 0, $$lobit9$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i = 0, $i$06$i = 0, $p$07$i = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_malloc(8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$1>>2] = 0;
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $size << 3;
 $5 = (_malloc($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _free($1);
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$1>>2] = $4;
 HEAP32[$3>>2] = $5;
 $7 = ($size|0)>(0);
 if ($7) {
  $i$06$i = 0;$p$07$i = $5;
  while(1) {
   $8 = (($data) + ($i$06$i)|0);
   $9 = HEAP8[$8>>0]|0;
   $$lobit$i = ($9&255) >>> 7;
   HEAP8[$p$07$i>>0] = $$lobit$i;
   $10 = (($p$07$i) + 1|0);
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11&255) >>> 6;
   $$lobit8$i = $12 & 1;
   HEAP8[$10>>0] = $$lobit8$i;
   $13 = (($p$07$i) + 2|0);
   $14 = HEAP8[$8>>0]|0;
   $15 = ($14&255) >>> 5;
   $$lobit9$i = $15 & 1;
   HEAP8[$13>>0] = $$lobit9$i;
   $16 = (($p$07$i) + 3|0);
   $17 = HEAP8[$8>>0]|0;
   $18 = ($17&255) >>> 4;
   $$lobit10$i = $18 & 1;
   HEAP8[$16>>0] = $$lobit10$i;
   $19 = (($p$07$i) + 4|0);
   $20 = HEAP8[$8>>0]|0;
   $21 = ($20&255) >>> 3;
   $$lobit11$i = $21 & 1;
   HEAP8[$19>>0] = $$lobit11$i;
   $22 = (($p$07$i) + 5|0);
   $23 = HEAP8[$8>>0]|0;
   $24 = ($23&255) >>> 2;
   $$lobit12$i = $24 & 1;
   HEAP8[$22>>0] = $$lobit12$i;
   $25 = (($p$07$i) + 6|0);
   $26 = HEAP8[$8>>0]|0;
   $27 = ($26&255) >>> 1;
   $$lobit13$i = $27 & 1;
   HEAP8[$25>>0] = $$lobit13$i;
   $28 = (($p$07$i) + 7|0);
   $29 = HEAP8[$8>>0]|0;
   $30 = $29 & 1;
   HEAP8[$28>>0] = $30;
   $scevgep$i = (($p$07$i) + 8|0);
   $31 = (($i$06$i) + 1)|0;
   $exitcond$i = ($31|0)==($size|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$06$i = $31;$p$07$i = $scevgep$i;
   }
  }
 }
 $32 = (_BitStream_append($bstream,$1)|0);
 $33 = HEAP32[$3>>2]|0;
 _free($33);
 _free($1);
 $$0 = $32;
 return ($$0|0);
}
function _BitStream_toByte($bstream) {
 $bstream = $bstream|0;
 var $$0 = 0, $$lcssa = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $j$12 = 0, $p$0$lcssa = 0, $p$09 = 0, $p$24 = 0, $scevgep = 0, $scevgep14 = 0;
 var $v$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$bstream>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($0) + 7)|0;
 $3 = (($2|0) / 8)&-1;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($0|0) / 8)&-1;
 $7 = (($bstream) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($0|0)>(7);
 if ($9) {
  $10 = ($0|0)>(15);
  $$op = $6 << 3;
  $11 = $10 ? $$op : 8;
  $i$08 = 0;$p$09 = $8;
  while(1) {
   $12 = HEAP8[$p$09>>0]|0;
   $13 = $12&255;
   $14 = (($p$09) + 1|0);
   $15 = $13 << 1;
   $16 = HEAP8[$14>>0]|0;
   $17 = $16&255;
   $18 = $17 | $15;
   $19 = (($p$09) + 2|0);
   $20 = $18 << 1;
   $21 = $20 & 6;
   $22 = HEAP8[$19>>0]|0;
   $23 = $22&255;
   $24 = $23 | $21;
   $25 = (($p$09) + 3|0);
   $26 = $24 << 1;
   $27 = $26 & 14;
   $28 = HEAP8[$25>>0]|0;
   $29 = $28&255;
   $30 = $29 | $27;
   $31 = (($p$09) + 4|0);
   $32 = $30 << 1;
   $33 = $32 & 30;
   $34 = HEAP8[$31>>0]|0;
   $35 = $34&255;
   $36 = $35 | $33;
   $37 = (($p$09) + 5|0);
   $38 = $36 << 1;
   $39 = $38 & 62;
   $40 = HEAP8[$37>>0]|0;
   $41 = $40&255;
   $42 = $41 | $39;
   $43 = (($p$09) + 6|0);
   $44 = $42 << 1;
   $45 = $44 & 126;
   $46 = HEAP8[$43>>0]|0;
   $47 = $46&255;
   $48 = $47 | $45;
   $49 = (($p$09) + 7|0);
   $50 = $48 << 1;
   $51 = HEAP8[$49>>0]|0;
   $52 = $51&255;
   $53 = $52 | $50;
   $scevgep = (($p$09) + 8|0);
   $54 = $53&255;
   $55 = (($4) + ($i$08)|0);
   HEAP8[$55>>0] = $54;
   $56 = (($i$08) + 1)|0;
   $57 = ($56|0)<($6|0);
   if ($57) {
    $i$08 = $56;$p$09 = $scevgep;
   } else {
    break;
   }
  }
  $scevgep14 = (($8) + ($11)|0);
  $p$0$lcssa = $scevgep14;
 } else {
  $p$0$lcssa = $8;
 }
 $58 = $0 & 7;
 $59 = ($58|0)==(0);
 if ($59) {
  $$0 = $4;
  return ($$0|0);
 }
 $j$12 = 0;$p$24 = $p$0$lcssa;$v$13 = 0;
 while(1) {
  $60 = $v$13 << 1;
  $61 = $60 & 510;
  $62 = HEAP8[$p$24>>0]|0;
  $63 = $62&255;
  $64 = $63 | $61;
  $65 = (($p$24) + 1|0);
  $66 = (($j$12) + 1)|0;
  $67 = ($66|0)<($58|0);
  if ($67) {
   $j$12 = $66;$p$24 = $65;$v$13 = $64;
  } else {
   $$lcssa = $64;
   break;
  }
 }
 $68 = $$lcssa&255;
 $69 = (($4) + ($6)|0);
 HEAP8[$69>>0] = $68;
 $$0 = $4;
 return ($$0|0);
}
function _QRspec_getDataLength($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((12664 + (($version*28)|0)|0) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((12664 + (($version*28)|0)|0) + ($level<<2)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _QRspec_getMinimumVersion($size,$level) {
 $size = $size|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 1;
 while(1) {
  $2 = ((12664 + (($i$01*28)|0)|0) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (((12664 + (($i$01*28)|0)|0) + ($level<<2)|0) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) - ($5))|0;
  $7 = ($6|0)<($size|0);
  $0 = (($i$01) + 1)|0;
  if (!($7)) {
   $$0 = $i$01;
   label = 4;
   break;
  }
  $1 = ($0|0)<(41);
  if ($1) {
   $i$01 = $0;
  } else {
   $$0 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _QRspec_getWidth($version) {
 $version = $version|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (12664 + (($version*28)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _QRspec_getRemainder($version) {
 $version = $version|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((12664 + (($version*28)|0)|0) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _QRspec_lengthIndicator($mode,$version) {
 $mode = $mode|0;
 $version = $version|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRinput_isSplittableMode($mode)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($version|0)<(10);
 if ($2) {
  $l$0 = 0;
 } else {
  $3 = ($version|0)<(27);
  $$ = $3 ? 1 : 2;
  $l$0 = $$;
 }
 $4 = ((13816 + (($mode*12)|0)|0) + ($l$0<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = $5;
 return ($$0|0);
}
function _QRspec_maximumWords($mode,$version) {
 $mode = $mode|0;
 $version = $version|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRinput_isSplittableMode($mode)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($version|0)<(10);
 if ($2) {
  $l$0 = 0;
 } else {
  $3 = ($version|0)<(27);
  $$ = $3 ? 1 : 2;
  $l$0 = $$;
 }
 $4 = ((13816 + (($mode*12)|0)|0) + ($l$0<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = 1 << $5;
 $7 = (($6) + -1)|0;
 $8 = ($mode|0)==(3);
 $9 = $8&1;
 $$1 = $7 << $9;
 $$0 = $$1;
 return ($$0|0);
}
function _QRspec_getEccSpec($version,$level,$spec) {
 $version = $version|0;
 $level = $level|0;
 $spec = $spec|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((13864 + ($version<<5)|0) + ($level<<3)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((13864 + ($version<<5)|0) + ($level<<3)|0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((12664 + (($version*28)|0)|0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((12664 + (($version*28)|0)|0) + ($level<<2)|0) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = ($3|0)==(0);
 HEAP32[$spec>>2] = $1;
 if ($9) {
  $10 = (($8|0) / ($1|0))&-1;
  $11 = (($spec) + 4|0);
  HEAP32[$11>>2] = $10;
  $12 = (($7|0) / ($1|0))&-1;
  $13 = (($spec) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = (($spec) + 12|0);
  HEAP32[$14>>2] = 0;
  $$sink = 0;
  $22 = (($spec) + 16|0);
  HEAP32[$22>>2] = $$sink;
  return;
 } else {
  $15 = (($3) + ($1))|0;
  $16 = (($8|0) / ($15|0))&-1;
  $17 = (($spec) + 4|0);
  HEAP32[$17>>2] = $16;
  $18 = (($7|0) / ($15|0))&-1;
  $19 = (($spec) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = (($spec) + 12|0);
  HEAP32[$20>>2] = $3;
  $21 = (($16) + 1)|0;
  $$sink = $21;
  $22 = (($spec) + 16|0);
  HEAP32[$22>>2] = $$sink;
  return;
 }
}
function _QRspec_getFormatInfo($mask,$level) {
 $mask = $mask|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mask>>>0)>(7);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((15312 + ($level<<5)|0) + ($mask<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _QRspec_newFrame($version) {
 $version = $version|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$pre$i$i = 0, $$sum$i = 0, $$sum$i$i$i = 0, $$sum$i1$us$i$i = 0, $$sum$i19$i$i = 0, $$sum$i37$i$i = 0, $$sum1$i = 0, $$sum10$i$i$i = 0, $$sum10$i21$i$i = 0, $$sum10$i3$us$i$i = 0, $$sum10$i39$i$i = 0, $$sum100$i = 0, $$sum11$i$i$i = 0, $$sum11$i22$i$i = 0, $$sum11$i4$us$i$i = 0, $$sum11$i40$i$i = 0, $$sum12$i$i$i = 0;
 var $$sum12$i23$i$i = 0, $$sum12$i41$i$i = 0, $$sum12$i5$us$i$i = 0, $$sum13$i$i$i = 0, $$sum13$i24$i$i = 0, $$sum13$i42$i$i = 0, $$sum13$i6$us$i$i = 0, $$sum14$i$i$i = 0, $$sum14$i25$i$i = 0, $$sum14$i43$i$i = 0, $$sum14$i7$us$i$i = 0, $$sum15$i$i$i = 0, $$sum15$i26$i$i = 0, $$sum15$i44$i$i = 0, $$sum15$i8$us$i$i = 0, $$sum16$i$i$i = 0, $$sum16$i27$i$i = 0, $$sum16$i45$i$i = 0, $$sum16$i9$us$i$i = 0, $$sum17$i$i$i = 0;
 var $$sum17$i10$us$i$i = 0, $$sum17$i28$i$i = 0, $$sum17$i46$i$i = 0, $$sum18$i$i$i = 0, $$sum18$i11$us$i$i = 0, $$sum18$i29$i$i = 0, $$sum18$i47$i$i = 0, $$sum19$i$i$i = 0, $$sum19$i12$us$i$i = 0, $$sum19$i30$i$i = 0, $$sum19$i48$i$i = 0, $$sum2$i = 0, $$sum20$i$i$i = 0, $$sum20$i13$us$i$i = 0, $$sum20$i31$i$i = 0, $$sum20$i49$i$i = 0, $$sum21$i$i$i = 0, $$sum21$i14$us$i$i = 0, $$sum21$i32$i$i = 0, $$sum21$i50$i$i = 0;
 var $$sum22$i$i$i = 0, $$sum22$i15$us$i$i = 0, $$sum22$i33$i$i = 0, $$sum22$i51$i$i = 0, $$sum23$i$i$i = 0, $$sum23$i16$us$i$i = 0, $$sum23$i34$i$i = 0, $$sum23$i52$i$i = 0, $$sum24$i$i$i = 0, $$sum24$i17$us$i$i = 0, $$sum24$i35$i$i = 0, $$sum24$i53$i$i = 0, $$sum25$i$i$i = 0, $$sum25$i18$us$i$i = 0, $$sum25$i36$i$i = 0, $$sum25$i54$i$i = 0, $$sum3$i = 0, $$sum40$i = 0, $$sum41$i = 0, $$sum42$i = 0;
 var $$sum43$i = 0, $$sum44$i = 0, $$sum45$i = 0, $$sum46$i = 0, $$sum47$i = 0, $$sum48$i = 0, $$sum49$i = 0, $$sum50$i = 0, $$sum51$i = 0, $$sum52$i = 0, $$sum53$i = 0, $$sum54$i = 0, $$sum55$i = 0, $$sum56$i = 0, $$sum57$i = 0, $$sum58$i = 0, $$sum59$i = 0, $$sum60$i = 0, $$sum61$i = 0, $$sum62$i = 0;
 var $$sum63$i = 0, $$sum64$i = 0, $$sum65$i = 0, $$sum66$i = 0, $$sum68$i = 0, $$sum69$i = 0, $$sum7$1$i$1 = 0, $$sum7$1$i$2 = 0, $$sum7$1$i$3 = 0, $$sum7$1$i$4 = 0, $$sum7$1$i$5 = 0, $$sum7$2$i$1 = 0, $$sum7$2$i$2 = 0, $$sum7$2$i$3 = 0, $$sum7$2$i$4 = 0, $$sum7$2$i$5 = 0, $$sum7$i$1 = 0, $$sum7$i$2 = 0, $$sum7$i$3 = 0, $$sum7$i$4 = 0;
 var $$sum7$i$5 = 0, $$sum70$i = 0, $$sum71$i = 0, $$sum72$i = 0, $$sum73$i = 0, $$sum74$i = 0, $$sum75$i = 0, $$sum76$i = 0, $$sum77$i = 0, $$sum78$i = 0, $$sum79$i = 0, $$sum80$i = 0, $$sum81$i = 0, $$sum82$i = 0, $$sum83$i = 0, $$sum86$i = 0, $$sum87$i = 0, $$sum88$i = 0, $$sum89$i = 0, $$sum9$i$i$i = 0;
 var $$sum9$i2$us$i$i = 0, $$sum9$i20$i$i = 0, $$sum9$i38$i$i = 0, $$sum90$i = 0, $$sum91$i = 0, $$sum92$i = 0, $$sum93$i = 0, $$sum94$i = 0, $$sum95$i = 0, $$sum96$i = 0, $$sum97$i = 0, $$sum98$i = 0, $$sum99$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cx$062$i$i = 0, $cx$156$us$i$i = 0, $cy$058$us$i$i = 0, $exitcond36$i = 0, $exitcond65$i$i = 0, $exitcond66$i$i = 0, $exitcond67$i$i = 0, $p$320$i = 0, $q$119$i = 0, $tmp$1$i = 0, $tmp$2$i = 0, $tmp8$1$i = 0, $tmp8$2$i = 0, $tmp8$i = 0, $version$off = 0, $version$off$i$i = 0, $w$0$i$i = 0;
 var $x$021$i = 0, $x$061$i$i = 0, $x$155$us$i$i = 0, $y$057$us$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $version$off = (($version) + -1)|0;
 $0 = ($version$off>>>0)>(39);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 (_pthread_mutex_lock((15440|0))|0);
 $1 = (15464 + ($version<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (12664 + (($version*28)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = Math_imul($5, $5)|0;
  $7 = (_malloc($6)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0$i = 0;
  } else {
   _memset(($7|0),0,($6|0))|0;
   _putFinderPattern($7,$5,0,0);
   $9 = (($5) + -7)|0;
   _putFinderPattern($7,$5,$9,0);
   _putFinderPattern($7,$5,0,$9);
   $10 = Math_imul($9, $5)|0;
   $11 = (($5) + -8)|0;
   $12 = (($7) + 7|0);
   HEAP8[$12>>0] = -64;
   $13 = (($7) + ($11)|0);
   HEAP8[$13>>0] = -64;
   $$sum40$i = (($10) + 7)|0;
   $14 = (($7) + ($$sum40$i)|0);
   HEAP8[$14>>0] = -64;
   $$sum41$i = (($10) + ($5))|0;
   $$sum42$i = (($5) + 7)|0;
   $15 = (($7) + ($$sum42$i)|0);
   HEAP8[$15>>0] = -64;
   $$sum43$i = (($11) + ($5))|0;
   $16 = (($7) + ($$sum43$i)|0);
   HEAP8[$16>>0] = -64;
   $$sum44$i = (($$sum41$i) + 7)|0;
   $17 = (($7) + ($$sum44$i)|0);
   HEAP8[$17>>0] = -64;
   $$sum46$i = $5 << 1;
   $$sum47$i = (($$sum41$i) + ($5))|0;
   $$sum48$i = (($$sum46$i) + 7)|0;
   $18 = (($7) + ($$sum48$i)|0);
   HEAP8[$18>>0] = -64;
   $$sum49$i = (($$sum46$i) + ($11))|0;
   $19 = (($7) + ($$sum49$i)|0);
   HEAP8[$19>>0] = -64;
   $$sum50$i = (($$sum47$i) + 7)|0;
   $20 = (($7) + ($$sum50$i)|0);
   HEAP8[$20>>0] = -64;
   $$sum51$i = ($5*3)|0;
   $$sum52$i = (($$sum47$i) + ($5))|0;
   $$sum53$i = (($$sum51$i) + 7)|0;
   $21 = (($7) + ($$sum53$i)|0);
   HEAP8[$21>>0] = -64;
   $$sum54$i = (($$sum51$i) + ($11))|0;
   $22 = (($7) + ($$sum54$i)|0);
   HEAP8[$22>>0] = -64;
   $$sum55$i = (($$sum52$i) + 7)|0;
   $23 = (($7) + ($$sum55$i)|0);
   HEAP8[$23>>0] = -64;
   $$sum56$i = $5 << 2;
   $$sum57$i = (($$sum52$i) + ($5))|0;
   $$sum58$i = (($$sum56$i) + 7)|0;
   $24 = (($7) + ($$sum58$i)|0);
   HEAP8[$24>>0] = -64;
   $$sum59$i = (($$sum56$i) + ($11))|0;
   $25 = (($7) + ($$sum59$i)|0);
   HEAP8[$25>>0] = -64;
   $$sum60$i = (($$sum57$i) + 7)|0;
   $26 = (($7) + ($$sum60$i)|0);
   HEAP8[$26>>0] = -64;
   $$sum61$i = ($5*5)|0;
   $$sum62$i = (($$sum57$i) + ($5))|0;
   $$sum63$i = (($$sum61$i) + 7)|0;
   $27 = (($7) + ($$sum63$i)|0);
   HEAP8[$27>>0] = -64;
   $$sum64$i = (($$sum61$i) + ($11))|0;
   $28 = (($7) + ($$sum64$i)|0);
   HEAP8[$28>>0] = -64;
   $$sum65$i = (($$sum62$i) + 7)|0;
   $29 = (($7) + ($$sum65$i)|0);
   HEAP8[$29>>0] = -64;
   $$sum66$i = ($5*6)|0;
   $$sum68$i = (($$sum66$i) + 7)|0;
   $30 = (($7) + ($$sum68$i)|0);
   HEAP8[$30>>0] = -64;
   $$sum69$i = (($$sum66$i) + ($11))|0;
   $31 = (($7) + ($$sum69$i)|0);
   HEAP8[$31>>0] = -64;
   $$sum70$i = (($$sum42$i) + ($$sum62$i))|0;
   $32 = (($7) + ($$sum70$i)|0);
   HEAP8[$32>>0] = -64;
   $33 = ($5*7)|0;
   $34 = (($7) + ($33)|0);
   $35 = $34;
   $36 = $35;
   HEAP8[$36>>0]=-1061109568&255;HEAP8[$36+1>>0]=(-1061109568>>8)&255;HEAP8[$36+2>>0]=(-1061109568>>16)&255;HEAP8[$36+3>>0]=-1061109568>>24;
   $37 = (($35) + 4)|0;
   $38 = $37;
   HEAP8[$38>>0]=-1061109568&255;HEAP8[$38+1>>0]=(-1061109568>>8)&255;HEAP8[$38+2>>0]=(-1061109568>>16)&255;HEAP8[$38+3>>0]=-1061109568>>24;
   $39 = $5 << 3;
   $40 = (($7) + ($39)|0);
   $$sum$i = (($39) + -8)|0;
   $41 = (($7) + ($$sum$i)|0);
   $42 = $41;
   $43 = $42;
   HEAP8[$43>>0]=-1061109568&255;HEAP8[$43+1>>0]=(-1061109568>>8)&255;HEAP8[$43+2>>0]=(-1061109568>>16)&255;HEAP8[$43+3>>0]=-1061109568>>24;
   $44 = (($42) + 4)|0;
   $45 = $44;
   HEAP8[$45>>0]=-1061109568&255;HEAP8[$45+1>>0]=(-1061109568>>8)&255;HEAP8[$45+2>>0]=(-1061109568>>16)&255;HEAP8[$45+3>>0]=-1061109568>>24;
   $46 = Math_imul($11, $5)|0;
   $47 = (($7) + ($46)|0);
   $48 = $47;
   $49 = $48;
   HEAP8[$49>>0]=-1061109568&255;HEAP8[$49+1>>0]=(-1061109568>>8)&255;HEAP8[$49+2>>0]=(-1061109568>>16)&255;HEAP8[$49+3>>0]=-1061109568>>24;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP8[$51>>0]=-1061109568&255;HEAP8[$51+1>>0]=(-1061109568>>8)&255;HEAP8[$51+2>>0]=(-1061109568>>16)&255;HEAP8[$51+3>>0]=-1061109568>>24;
   dest=$40+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=132|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $52 = ($5*9)|0;
   $$sum1$i = (($52) + -8)|0;
   $53 = (($7) + ($$sum1$i)|0);
   $54 = $53;
   $55 = $54;
   HEAP8[$55>>0]=-2071690108&255;HEAP8[$55+1>>0]=(-2071690108>>8)&255;HEAP8[$55+2>>0]=(-2071690108>>16)&255;HEAP8[$55+3>>0]=-2071690108>>24;
   $56 = (($54) + 4)|0;
   $57 = $56;
   HEAP8[$57>>0]=-2071690108&255;HEAP8[$57+1>>0]=(-2071690108>>8)&255;HEAP8[$57+2>>0]=(-2071690108>>16)&255;HEAP8[$57+3>>0]=-2071690108>>24;
   $58 = (($7) + 8|0);
   HEAP8[$58>>0] = -124;
   $$sum71$i = (($5) + 8)|0;
   $59 = (($7) + ($$sum71$i)|0);
   HEAP8[$59>>0] = -124;
   $$sum72$i = (($$sum71$i) + ($5))|0;
   $60 = (($7) + ($$sum72$i)|0);
   HEAP8[$60>>0] = -124;
   $$sum73$i = (($$sum72$i) + ($5))|0;
   $61 = (($7) + ($$sum73$i)|0);
   HEAP8[$61>>0] = -124;
   $$sum74$i = (($$sum73$i) + ($5))|0;
   $62 = (($7) + ($$sum74$i)|0);
   HEAP8[$62>>0] = -124;
   $$sum75$i = (($$sum74$i) + ($5))|0;
   $63 = (($7) + ($$sum75$i)|0);
   HEAP8[$63>>0] = -124;
   $$sum76$i = (($$sum75$i) + ($5))|0;
   $64 = (($7) + ($$sum76$i)|0);
   HEAP8[$64>>0] = -124;
   $$sum77$i = (($$sum76$i) + ($5))|0;
   $65 = (($7) + ($$sum77$i)|0);
   HEAP8[$65>>0] = -124;
   $$sum2$i = (($10) + 8)|0;
   $66 = (($7) + ($$sum2$i)|0);
   HEAP8[$66>>0] = -124;
   $$sum78$i = (($$sum2$i) + ($5))|0;
   $67 = (($7) + ($$sum78$i)|0);
   HEAP8[$67>>0] = -124;
   $$sum79$i = (($$sum78$i) + ($5))|0;
   $68 = (($7) + ($$sum79$i)|0);
   HEAP8[$68>>0] = -124;
   $$sum80$i = (($$sum79$i) + ($5))|0;
   $69 = (($7) + ($$sum80$i)|0);
   HEAP8[$69>>0] = -124;
   $$sum81$i = (($$sum80$i) + ($5))|0;
   $70 = (($7) + ($$sum81$i)|0);
   HEAP8[$70>>0] = -124;
   $$sum82$i = (($$sum81$i) + ($5))|0;
   $71 = (($7) + ($$sum82$i)|0);
   HEAP8[$71>>0] = -124;
   $$sum83$i = (($$sum82$i) + ($5))|0;
   $72 = (($7) + ($$sum83$i)|0);
   HEAP8[$72>>0] = -124;
   $73 = (($5) + -15)|0;
   $74 = ($73|0)>(1);
   if ($74) {
    $$sum45$i = $39 | 6;
    $75 = (($7) + ($$sum45$i)|0);
    $$sum3$i = (($$sum66$i) + 8)|0;
    $76 = (($7) + ($$sum3$i)|0);
    $p$320$i = $76;$q$119$i = $75;$x$021$i = 1;
    while(1) {
     $77 = $x$021$i & 1;
     $78 = $77 | 144;
     $79 = $78&255;
     HEAP8[$p$320$i>>0] = $79;
     HEAP8[$q$119$i>>0] = $79;
     $80 = (($p$320$i) + 1|0);
     $81 = (($q$119$i) + ($5)|0);
     $82 = (($x$021$i) + 1)|0;
     $exitcond36$i = ($82|0)==($73|0);
     if ($exitcond36$i) {
      break;
     } else {
      $p$320$i = $80;$q$119$i = $81;$x$021$i = $82;
     }
    }
   }
   $83 = ($version|0)<(2);
   if (!($83)) {
    $84 = ((15632 + ($version<<3)|0) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (15632 + ($version<<3)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($85) - ($87))|0;
    $89 = ($88|0)<(0);
    if ($89) {
     $w$0$i$i = 2;
    } else {
     $90 = (($5) - ($87))|0;
     $91 = (($90|0) / ($88|0))&-1;
     $92 = (($91) + 2)|0;
     $w$0$i$i = $92;
    }
    $93 = Math_imul($w$0$i$i, $w$0$i$i)|0;
    $94 = ($93|0)==(4);
    if ($94) {
     $98 = (($87) + -2)|0;
     $99 = Math_imul($98, $5)|0;
     $100 = (($99) + ($98))|0;
     $101 = (($7) + ($100)|0);
     HEAP8[$101>>0] = -95;
     $$sum$i$i$i = (($100) + 1)|0;
     $102 = (($7) + ($$sum$i$i$i)|0);
     $$sum9$i$i$i = (($100) + ($5))|0;
     $103 = (($7) + ($$sum9$i$i$i)|0);
     HEAP8[$102>>0]=-1583242847&255;HEAP8[$102+1>>0]=(-1583242847>>8)&255;HEAP8[$102+2>>0]=(-1583242847>>16)&255;HEAP8[$102+3>>0]=-1583242847>>24;
     HEAP8[$103>>0] = -95;
     $$sum10$i$i$i = (($$sum9$i$i$i) + 1)|0;
     $104 = (($7) + ($$sum10$i$i$i)|0);
     HEAP8[$104>>0] = -96;
     $$sum11$i$i$i = (($$sum9$i$i$i) + 2)|0;
     $105 = (($7) + ($$sum11$i$i$i)|0);
     HEAP8[$105>>0] = -96;
     $$sum12$i$i$i = (($$sum9$i$i$i) + 3)|0;
     $106 = (($7) + ($$sum12$i$i$i)|0);
     HEAP8[$106>>0] = -96;
     $$sum13$i$i$i = (($$sum9$i$i$i) + 4)|0;
     $107 = (($7) + ($$sum13$i$i$i)|0);
     HEAP8[$107>>0] = -95;
     $$sum14$i$i$i = (($$sum9$i$i$i) + ($5))|0;
     $108 = (($7) + ($$sum14$i$i$i)|0);
     HEAP8[$108>>0] = -95;
     $$sum15$i$i$i = (($$sum14$i$i$i) + 1)|0;
     $109 = (($7) + ($$sum15$i$i$i)|0);
     HEAP8[$109>>0] = -96;
     $$sum16$i$i$i = (($$sum14$i$i$i) + 2)|0;
     $110 = (($7) + ($$sum16$i$i$i)|0);
     HEAP8[$110>>0] = -95;
     $$sum17$i$i$i = (($$sum14$i$i$i) + 3)|0;
     $111 = (($7) + ($$sum17$i$i$i)|0);
     HEAP8[$111>>0] = -96;
     $$sum18$i$i$i = (($$sum14$i$i$i) + 4)|0;
     $112 = (($7) + ($$sum18$i$i$i)|0);
     HEAP8[$112>>0] = -95;
     $$sum19$i$i$i = (($$sum14$i$i$i) + ($5))|0;
     $113 = (($7) + ($$sum19$i$i$i)|0);
     HEAP8[$113>>0] = -95;
     $$sum20$i$i$i = (($$sum19$i$i$i) + 1)|0;
     $114 = (($7) + ($$sum20$i$i$i)|0);
     HEAP8[$114>>0] = -96;
     $$sum21$i$i$i = (($$sum19$i$i$i) + 2)|0;
     $115 = (($7) + ($$sum21$i$i$i)|0);
     HEAP8[$115>>0] = -96;
     $$sum22$i$i$i = (($$sum19$i$i$i) + 3)|0;
     $116 = (($7) + ($$sum22$i$i$i)|0);
     HEAP8[$116>>0] = -96;
     $$sum23$i$i$i = (($$sum19$i$i$i) + 4)|0;
     $117 = (($7) + ($$sum23$i$i$i)|0);
     HEAP8[$117>>0] = -95;
     $$sum24$i$i$i = (($$sum19$i$i$i) + ($5))|0;
     $118 = (($7) + ($$sum24$i$i$i)|0);
     HEAP8[$118>>0] = -95;
     $$sum25$i$i$i = (($$sum24$i$i$i) + 1)|0;
     $119 = (($7) + ($$sum25$i$i$i)|0);
     HEAP8[$119>>0]=-1583242847&255;HEAP8[$119+1>>0]=(-1583242847>>8)&255;HEAP8[$119+2>>0]=(-1583242847>>16)&255;HEAP8[$119+3>>0]=-1583242847>>24;
    } else {
     $95 = (($w$0$i$i) + -1)|0;
     $96 = ($95|0)>(1);
     if ($96) {
      $97 = (($$sum56$i) + -2)|0;
      $cx$062$i$i = $87;$x$061$i$i = 1;
      while(1) {
       $120 = (($cx$062$i$i) + -2)|0;
       $121 = Math_imul($120, $5)|0;
       $122 = (($121) + 4)|0;
       $123 = (($7) + ($122)|0);
       HEAP8[$123>>0] = -95;
       $$sum$i37$i$i = (($121) + 5)|0;
       $124 = (($7) + ($$sum$i37$i$i)|0);
       $$sum9$i38$i$i = (($122) + ($5))|0;
       $125 = (($7) + ($$sum9$i38$i$i)|0);
       HEAP8[$124>>0]=-1583242847&255;HEAP8[$124+1>>0]=(-1583242847>>8)&255;HEAP8[$124+2>>0]=(-1583242847>>16)&255;HEAP8[$124+3>>0]=-1583242847>>24;
       HEAP8[$125>>0] = -95;
       $$sum10$i39$i$i = (($$sum9$i38$i$i) + 1)|0;
       $126 = (($7) + ($$sum10$i39$i$i)|0);
       HEAP8[$126>>0] = -96;
       $$sum11$i40$i$i = (($$sum9$i38$i$i) + 2)|0;
       $127 = (($7) + ($$sum11$i40$i$i)|0);
       HEAP8[$127>>0] = -96;
       $$sum12$i41$i$i = (($$sum9$i38$i$i) + 3)|0;
       $128 = (($7) + ($$sum12$i41$i$i)|0);
       HEAP8[$128>>0] = -96;
       $$sum13$i42$i$i = (($$sum9$i38$i$i) + 4)|0;
       $129 = (($7) + ($$sum13$i42$i$i)|0);
       HEAP8[$129>>0] = -95;
       $$sum14$i43$i$i = (($$sum9$i38$i$i) + ($5))|0;
       $130 = (($7) + ($$sum14$i43$i$i)|0);
       HEAP8[$130>>0] = -95;
       $$sum15$i44$i$i = (($$sum14$i43$i$i) + 1)|0;
       $131 = (($7) + ($$sum15$i44$i$i)|0);
       HEAP8[$131>>0] = -96;
       $$sum16$i45$i$i = (($$sum14$i43$i$i) + 2)|0;
       $132 = (($7) + ($$sum16$i45$i$i)|0);
       HEAP8[$132>>0] = -95;
       $$sum17$i46$i$i = (($$sum14$i43$i$i) + 3)|0;
       $133 = (($7) + ($$sum17$i46$i$i)|0);
       HEAP8[$133>>0] = -96;
       $$sum18$i47$i$i = (($$sum14$i43$i$i) + 4)|0;
       $134 = (($7) + ($$sum18$i47$i$i)|0);
       HEAP8[$134>>0] = -95;
       $$sum19$i48$i$i = (($$sum14$i43$i$i) + ($5))|0;
       $135 = (($7) + ($$sum19$i48$i$i)|0);
       HEAP8[$135>>0] = -95;
       $$sum20$i49$i$i = (($$sum19$i48$i$i) + 1)|0;
       $136 = (($7) + ($$sum20$i49$i$i)|0);
       HEAP8[$136>>0] = -96;
       $$sum21$i50$i$i = (($$sum19$i48$i$i) + 2)|0;
       $137 = (($7) + ($$sum21$i50$i$i)|0);
       HEAP8[$137>>0] = -96;
       $$sum22$i51$i$i = (($$sum19$i48$i$i) + 3)|0;
       $138 = (($7) + ($$sum22$i51$i$i)|0);
       HEAP8[$138>>0] = -96;
       $$sum23$i52$i$i = (($$sum19$i48$i$i) + 4)|0;
       $139 = (($7) + ($$sum23$i52$i$i)|0);
       HEAP8[$139>>0] = -95;
       $$sum24$i53$i$i = (($$sum19$i48$i$i) + ($5))|0;
       $140 = (($7) + ($$sum24$i53$i$i)|0);
       HEAP8[$140>>0] = -95;
       $$sum25$i54$i$i = (($$sum24$i53$i$i) + 1)|0;
       $141 = (($7) + ($$sum25$i54$i$i)|0);
       HEAP8[$141>>0]=-1583242847&255;HEAP8[$141+1>>0]=(-1583242847>>8)&255;HEAP8[$141+2>>0]=(-1583242847>>16)&255;HEAP8[$141+3>>0]=-1583242847>>24;
       $142 = (($97) + ($cx$062$i$i))|0;
       $143 = (($7) + ($142)|0);
       HEAP8[$143>>0] = -95;
       $$sum$i19$i$i = (($142) + 1)|0;
       $144 = (($7) + ($$sum$i19$i$i)|0);
       $$sum9$i20$i$i = (($142) + ($5))|0;
       $145 = (($7) + ($$sum9$i20$i$i)|0);
       HEAP8[$144>>0]=-1583242847&255;HEAP8[$144+1>>0]=(-1583242847>>8)&255;HEAP8[$144+2>>0]=(-1583242847>>16)&255;HEAP8[$144+3>>0]=-1583242847>>24;
       HEAP8[$145>>0] = -95;
       $$sum10$i21$i$i = (($$sum9$i20$i$i) + 1)|0;
       $146 = (($7) + ($$sum10$i21$i$i)|0);
       HEAP8[$146>>0] = -96;
       $$sum11$i22$i$i = (($$sum9$i20$i$i) + 2)|0;
       $147 = (($7) + ($$sum11$i22$i$i)|0);
       HEAP8[$147>>0] = -96;
       $$sum12$i23$i$i = (($$sum9$i20$i$i) + 3)|0;
       $148 = (($7) + ($$sum12$i23$i$i)|0);
       HEAP8[$148>>0] = -96;
       $$sum13$i24$i$i = (($$sum9$i20$i$i) + 4)|0;
       $149 = (($7) + ($$sum13$i24$i$i)|0);
       HEAP8[$149>>0] = -95;
       $$sum14$i25$i$i = (($$sum9$i20$i$i) + ($5))|0;
       $150 = (($7) + ($$sum14$i25$i$i)|0);
       HEAP8[$150>>0] = -95;
       $$sum15$i26$i$i = (($$sum14$i25$i$i) + 1)|0;
       $151 = (($7) + ($$sum15$i26$i$i)|0);
       HEAP8[$151>>0] = -96;
       $$sum16$i27$i$i = (($$sum14$i25$i$i) + 2)|0;
       $152 = (($7) + ($$sum16$i27$i$i)|0);
       HEAP8[$152>>0] = -95;
       $$sum17$i28$i$i = (($$sum14$i25$i$i) + 3)|0;
       $153 = (($7) + ($$sum17$i28$i$i)|0);
       HEAP8[$153>>0] = -96;
       $$sum18$i29$i$i = (($$sum14$i25$i$i) + 4)|0;
       $154 = (($7) + ($$sum18$i29$i$i)|0);
       HEAP8[$154>>0] = -95;
       $$sum19$i30$i$i = (($$sum14$i25$i$i) + ($5))|0;
       $155 = (($7) + ($$sum19$i30$i$i)|0);
       HEAP8[$155>>0] = -95;
       $$sum20$i31$i$i = (($$sum19$i30$i$i) + 1)|0;
       $156 = (($7) + ($$sum20$i31$i$i)|0);
       HEAP8[$156>>0] = -96;
       $$sum21$i32$i$i = (($$sum19$i30$i$i) + 2)|0;
       $157 = (($7) + ($$sum21$i32$i$i)|0);
       HEAP8[$157>>0] = -96;
       $$sum22$i33$i$i = (($$sum19$i30$i$i) + 3)|0;
       $158 = (($7) + ($$sum22$i33$i$i)|0);
       HEAP8[$158>>0] = -96;
       $$sum23$i34$i$i = (($$sum19$i30$i$i) + 4)|0;
       $159 = (($7) + ($$sum23$i34$i$i)|0);
       HEAP8[$159>>0] = -95;
       $$sum24$i35$i$i = (($$sum19$i30$i$i) + ($5))|0;
       $160 = (($7) + ($$sum24$i35$i$i)|0);
       HEAP8[$160>>0] = -95;
       $$sum25$i36$i$i = (($$sum24$i35$i$i) + 1)|0;
       $161 = (($7) + ($$sum25$i36$i$i)|0);
       HEAP8[$161>>0]=-1583242847&255;HEAP8[$161+1>>0]=(-1583242847>>8)&255;HEAP8[$161+2>>0]=(-1583242847>>16)&255;HEAP8[$161+3>>0]=-1583242847>>24;
       $162 = (($cx$062$i$i) + ($88))|0;
       $163 = (($x$061$i$i) + 1)|0;
       $exitcond65$i$i = ($163|0)==($95|0);
       if ($exitcond65$i$i) {
        break;
       } else {
        $cx$062$i$i = $162;$x$061$i$i = $163;
       }
      }
      $$pre$i$i = HEAP32[$86>>2]|0;
      $369 = $$pre$i$i;
     } else {
      $369 = $87;
     }
     $164 = ($95|0)>(0);
     if ($164) {
      $cy$058$us$i$i = $369;$y$057$us$i$i = 0;
      while(1) {
       $190 = (($cy$058$us$i$i) + -2)|0;
       $191 = Math_imul($190, $5)|0;
       $168 = (($191) + -2)|0;
       $cx$156$us$i$i = $369;$x$155$us$i$i = 0;
       while(1) {
        $167 = (($168) + ($cx$156$us$i$i))|0;
        $169 = (($7) + ($167)|0);
        HEAP8[$169>>0] = -95;
        $$sum$i1$us$i$i = (($167) + 1)|0;
        $170 = (($7) + ($$sum$i1$us$i$i)|0);
        $$sum9$i2$us$i$i = (($167) + ($5))|0;
        $171 = (($7) + ($$sum9$i2$us$i$i)|0);
        HEAP8[$170>>0]=-1583242847&255;HEAP8[$170+1>>0]=(-1583242847>>8)&255;HEAP8[$170+2>>0]=(-1583242847>>16)&255;HEAP8[$170+3>>0]=-1583242847>>24;
        HEAP8[$171>>0] = -95;
        $$sum10$i3$us$i$i = (($$sum9$i2$us$i$i) + 1)|0;
        $172 = (($7) + ($$sum10$i3$us$i$i)|0);
        HEAP8[$172>>0] = -96;
        $$sum11$i4$us$i$i = (($$sum9$i2$us$i$i) + 2)|0;
        $173 = (($7) + ($$sum11$i4$us$i$i)|0);
        HEAP8[$173>>0] = -96;
        $$sum12$i5$us$i$i = (($$sum9$i2$us$i$i) + 3)|0;
        $174 = (($7) + ($$sum12$i5$us$i$i)|0);
        HEAP8[$174>>0] = -96;
        $$sum13$i6$us$i$i = (($$sum9$i2$us$i$i) + 4)|0;
        $175 = (($7) + ($$sum13$i6$us$i$i)|0);
        HEAP8[$175>>0] = -95;
        $$sum14$i7$us$i$i = (($$sum9$i2$us$i$i) + ($5))|0;
        $176 = (($7) + ($$sum14$i7$us$i$i)|0);
        HEAP8[$176>>0] = -95;
        $$sum15$i8$us$i$i = (($$sum14$i7$us$i$i) + 1)|0;
        $177 = (($7) + ($$sum15$i8$us$i$i)|0);
        HEAP8[$177>>0] = -96;
        $$sum16$i9$us$i$i = (($$sum14$i7$us$i$i) + 2)|0;
        $178 = (($7) + ($$sum16$i9$us$i$i)|0);
        HEAP8[$178>>0] = -95;
        $$sum17$i10$us$i$i = (($$sum14$i7$us$i$i) + 3)|0;
        $179 = (($7) + ($$sum17$i10$us$i$i)|0);
        HEAP8[$179>>0] = -96;
        $$sum18$i11$us$i$i = (($$sum14$i7$us$i$i) + 4)|0;
        $180 = (($7) + ($$sum18$i11$us$i$i)|0);
        HEAP8[$180>>0] = -95;
        $$sum19$i12$us$i$i = (($$sum14$i7$us$i$i) + ($5))|0;
        $181 = (($7) + ($$sum19$i12$us$i$i)|0);
        HEAP8[$181>>0] = -95;
        $$sum20$i13$us$i$i = (($$sum19$i12$us$i$i) + 1)|0;
        $182 = (($7) + ($$sum20$i13$us$i$i)|0);
        HEAP8[$182>>0] = -96;
        $$sum21$i14$us$i$i = (($$sum19$i12$us$i$i) + 2)|0;
        $183 = (($7) + ($$sum21$i14$us$i$i)|0);
        HEAP8[$183>>0] = -96;
        $$sum22$i15$us$i$i = (($$sum19$i12$us$i$i) + 3)|0;
        $184 = (($7) + ($$sum22$i15$us$i$i)|0);
        HEAP8[$184>>0] = -96;
        $$sum23$i16$us$i$i = (($$sum19$i12$us$i$i) + 4)|0;
        $185 = (($7) + ($$sum23$i16$us$i$i)|0);
        HEAP8[$185>>0] = -95;
        $$sum24$i17$us$i$i = (($$sum19$i12$us$i$i) + ($5))|0;
        $186 = (($7) + ($$sum24$i17$us$i$i)|0);
        HEAP8[$186>>0] = -95;
        $$sum25$i18$us$i$i = (($$sum24$i17$us$i$i) + 1)|0;
        $187 = (($7) + ($$sum25$i18$us$i$i)|0);
        HEAP8[$187>>0]=-1583242847&255;HEAP8[$187+1>>0]=(-1583242847>>8)&255;HEAP8[$187+2>>0]=(-1583242847>>16)&255;HEAP8[$187+3>>0]=-1583242847>>24;
        $188 = (($cx$156$us$i$i) + ($88))|0;
        $189 = (($x$155$us$i$i) + 1)|0;
        $exitcond66$i$i = ($189|0)==($95|0);
        if ($exitcond66$i$i) {
         break;
        } else {
         $cx$156$us$i$i = $188;$x$155$us$i$i = $189;
        }
       }
       $165 = (($cy$058$us$i$i) + ($88))|0;
       $166 = (($y$057$us$i$i) + 1)|0;
       $exitcond67$i$i = ($166|0)==($95|0);
       if ($exitcond67$i$i) {
        break;
       } else {
        $cy$058$us$i$i = $165;$y$057$us$i$i = $166;
       }
      }
     }
    }
    $192 = ($version|0)>(6);
    if ($192) {
     $version$off$i$i = (($version) + -7)|0;
     $193 = ($version$off$i$i>>>0)>(33);
     if ($193) {
      $$0$i$i = 0;
     } else {
      $194 = (15176 + ($version$off$i$i<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $$0$i$i = $195;
     }
     $196 = (($5) + -11)|0;
     $tmp8$i = Math_imul($196, $5)|0;
     $tmp$1$i = (($5) + -10)|0;
     $tmp8$1$i = Math_imul($tmp$1$i, $5)|0;
     $tmp$2$i = (($5) + -9)|0;
     $tmp8$2$i = Math_imul($tmp$2$i, $5)|0;
     $197 = $$0$i$i & 1;
     $198 = $197 | 136;
     $199 = $198&255;
     $200 = (($7) + ($tmp8$i)|0);
     HEAP8[$200>>0] = $199;
     $201 = $$0$i$i >>> 1;
     $202 = $201 & 1;
     $203 = $202 | 136;
     $204 = $203&255;
     $205 = (($7) + ($tmp8$1$i)|0);
     HEAP8[$205>>0] = $204;
     $206 = $$0$i$i >>> 2;
     $207 = $206 & 1;
     $208 = $207 | 136;
     $209 = $208&255;
     $210 = (($7) + ($tmp8$2$i)|0);
     HEAP8[$210>>0] = $209;
     $211 = $$0$i$i >>> 3;
     $212 = $211 & 1;
     $213 = $212 | 136;
     $214 = $213&255;
     $$sum7$i$1 = (($tmp8$i) + 1)|0;
     $215 = (($7) + ($$sum7$i$1)|0);
     HEAP8[$215>>0] = $214;
     $216 = $$0$i$i >>> 4;
     $217 = $216 & 1;
     $218 = $217 | 136;
     $219 = $218&255;
     $$sum7$1$i$1 = (($tmp8$1$i) + 1)|0;
     $220 = (($7) + ($$sum7$1$i$1)|0);
     HEAP8[$220>>0] = $219;
     $221 = $$0$i$i >>> 5;
     $222 = $221 & 1;
     $223 = $222 | 136;
     $224 = $223&255;
     $$sum7$2$i$1 = (($tmp8$2$i) + 1)|0;
     $225 = (($7) + ($$sum7$2$i$1)|0);
     HEAP8[$225>>0] = $224;
     $226 = $$0$i$i >>> 6;
     $227 = $226 & 1;
     $228 = $227 | 136;
     $229 = $228&255;
     $$sum7$i$2 = (($tmp8$i) + 2)|0;
     $230 = (($7) + ($$sum7$i$2)|0);
     HEAP8[$230>>0] = $229;
     $231 = $$0$i$i >>> 7;
     $232 = $231 & 1;
     $233 = $232 | 136;
     $234 = $233&255;
     $$sum7$1$i$2 = (($tmp8$1$i) + 2)|0;
     $235 = (($7) + ($$sum7$1$i$2)|0);
     HEAP8[$235>>0] = $234;
     $236 = $$0$i$i >>> 8;
     $237 = $236 & 1;
     $238 = $237 | 136;
     $239 = $238&255;
     $$sum7$2$i$2 = (($tmp8$2$i) + 2)|0;
     $240 = (($7) + ($$sum7$2$i$2)|0);
     HEAP8[$240>>0] = $239;
     $241 = $$0$i$i >>> 9;
     $242 = $241 & 1;
     $243 = $242 | 136;
     $244 = $243&255;
     $$sum7$i$3 = (($tmp8$i) + 3)|0;
     $245 = (($7) + ($$sum7$i$3)|0);
     HEAP8[$245>>0] = $244;
     $246 = $$0$i$i >>> 10;
     $247 = $246 & 1;
     $248 = $247 | 136;
     $249 = $248&255;
     $$sum7$1$i$3 = (($tmp8$1$i) + 3)|0;
     $250 = (($7) + ($$sum7$1$i$3)|0);
     HEAP8[$250>>0] = $249;
     $251 = $$0$i$i >>> 11;
     $252 = $251 & 1;
     $253 = $252 | 136;
     $254 = $253&255;
     $$sum7$2$i$3 = (($tmp8$2$i) + 3)|0;
     $255 = (($7) + ($$sum7$2$i$3)|0);
     HEAP8[$255>>0] = $254;
     $256 = $$0$i$i >>> 12;
     $257 = $256 & 1;
     $258 = $257 | 136;
     $259 = $258&255;
     $$sum7$i$4 = (($tmp8$i) + 4)|0;
     $260 = (($7) + ($$sum7$i$4)|0);
     HEAP8[$260>>0] = $259;
     $261 = $$0$i$i >>> 13;
     $262 = $261 & 1;
     $263 = $262 | 136;
     $264 = $263&255;
     $$sum7$1$i$4 = (($tmp8$1$i) + 4)|0;
     $265 = (($7) + ($$sum7$1$i$4)|0);
     HEAP8[$265>>0] = $264;
     $266 = $$0$i$i >>> 14;
     $267 = $266 & 1;
     $268 = $267 | 136;
     $269 = $268&255;
     $$sum7$2$i$4 = (($tmp8$2$i) + 4)|0;
     $270 = (($7) + ($$sum7$2$i$4)|0);
     HEAP8[$270>>0] = $269;
     $271 = $$0$i$i >>> 15;
     $272 = $271 & 1;
     $273 = $272 | 136;
     $274 = $273&255;
     $$sum7$i$5 = (($tmp8$i) + 5)|0;
     $275 = (($7) + ($$sum7$i$5)|0);
     HEAP8[$275>>0] = $274;
     $276 = $$0$i$i >>> 16;
     $277 = $276 & 1;
     $278 = $277 | 136;
     $279 = $278&255;
     $$sum7$1$i$5 = (($tmp8$1$i) + 5)|0;
     $280 = (($7) + ($$sum7$1$i$5)|0);
     HEAP8[$280>>0] = $279;
     $281 = $$0$i$i >>> 17;
     $282 = $281 & 1;
     $283 = $282 | 136;
     $284 = $283&255;
     $$sum7$2$i$5 = (($tmp8$2$i) + 5)|0;
     $285 = (($7) + ($$sum7$2$i$5)|0);
     HEAP8[$285>>0] = $284;
     $286 = (($7) + ($196)|0);
     HEAP8[$286>>0] = $199;
     $287 = (($7) + ($tmp$1$i)|0);
     HEAP8[$287>>0] = $204;
     $288 = (($7) + ($tmp$2$i)|0);
     HEAP8[$288>>0] = $209;
     $$sum86$i = (($196) + ($5))|0;
     $289 = (($7) + ($$sum86$i)|0);
     HEAP8[$289>>0] = $214;
     $290 = $$0$i$i >>> 4;
     $291 = $290 & 1;
     $292 = $291 | 136;
     $293 = $292&255;
     $$sum87$i = (($$sum86$i) + 1)|0;
     $294 = (($7) + ($$sum87$i)|0);
     HEAP8[$294>>0] = $293;
     $295 = $$0$i$i >>> 5;
     $296 = $295 & 1;
     $297 = $296 | 136;
     $298 = $297&255;
     $$sum88$i = (($$sum86$i) + 2)|0;
     $299 = (($7) + ($$sum88$i)|0);
     HEAP8[$299>>0] = $298;
     $300 = $$0$i$i >>> 6;
     $$sum89$i = (($$sum86$i) + ($5))|0;
     $301 = (($7) + ($$sum89$i)|0);
     $302 = $300 & 1;
     $303 = $302 | 136;
     $304 = $303&255;
     HEAP8[$301>>0] = $304;
     $305 = $$0$i$i >>> 7;
     $306 = $305 & 1;
     $307 = $306 | 136;
     $308 = $307&255;
     $$sum90$i = (($$sum89$i) + 1)|0;
     $309 = (($7) + ($$sum90$i)|0);
     HEAP8[$309>>0] = $308;
     $310 = $$0$i$i >>> 8;
     $311 = $310 & 1;
     $312 = $311 | 136;
     $313 = $312&255;
     $$sum91$i = (($$sum89$i) + 2)|0;
     $314 = (($7) + ($$sum91$i)|0);
     HEAP8[$314>>0] = $313;
     $315 = $$0$i$i >>> 9;
     $$sum92$i = (($$sum89$i) + ($5))|0;
     $316 = (($7) + ($$sum92$i)|0);
     $317 = $315 & 1;
     $318 = $317 | 136;
     $319 = $318&255;
     HEAP8[$316>>0] = $319;
     $320 = $$0$i$i >>> 10;
     $321 = $320 & 1;
     $322 = $321 | 136;
     $323 = $322&255;
     $$sum93$i = (($$sum92$i) + 1)|0;
     $324 = (($7) + ($$sum93$i)|0);
     HEAP8[$324>>0] = $323;
     $325 = $$0$i$i >>> 11;
     $326 = $325 & 1;
     $327 = $326 | 136;
     $328 = $327&255;
     $$sum94$i = (($$sum92$i) + 2)|0;
     $329 = (($7) + ($$sum94$i)|0);
     HEAP8[$329>>0] = $328;
     $330 = $$0$i$i >>> 12;
     $$sum95$i = (($$sum92$i) + ($5))|0;
     $331 = (($7) + ($$sum95$i)|0);
     $332 = $330 & 1;
     $333 = $332 | 136;
     $334 = $333&255;
     HEAP8[$331>>0] = $334;
     $335 = $$0$i$i >>> 13;
     $336 = $335 & 1;
     $337 = $336 | 136;
     $338 = $337&255;
     $$sum96$i = (($$sum95$i) + 1)|0;
     $339 = (($7) + ($$sum96$i)|0);
     HEAP8[$339>>0] = $338;
     $340 = $$0$i$i >>> 14;
     $341 = $340 & 1;
     $342 = $341 | 136;
     $343 = $342&255;
     $$sum97$i = (($$sum95$i) + 2)|0;
     $344 = (($7) + ($$sum97$i)|0);
     HEAP8[$344>>0] = $343;
     $345 = $$0$i$i >>> 15;
     $$sum98$i = (($$sum95$i) + ($5))|0;
     $346 = (($7) + ($$sum98$i)|0);
     $347 = $345 & 1;
     $348 = $347 | 136;
     $349 = $348&255;
     HEAP8[$346>>0] = $349;
     $350 = $$0$i$i >>> 16;
     $351 = $350 & 1;
     $352 = $351 | 136;
     $353 = $352&255;
     $$sum99$i = (($$sum98$i) + 1)|0;
     $354 = (($7) + ($$sum99$i)|0);
     HEAP8[$354>>0] = $353;
     $355 = $$0$i$i >>> 17;
     $356 = $355 & 1;
     $357 = $356 | 136;
     $358 = $357&255;
     $$sum100$i = (($$sum98$i) + 2)|0;
     $359 = (($7) + ($$sum100$i)|0);
     HEAP8[$359>>0] = $358;
    }
   }
   $360 = (($46) + 8)|0;
   $361 = (($7) + ($360)|0);
   HEAP8[$361>>0] = -127;
   $$0$i = $7;
  }
  HEAP32[$1>>2] = $$0$i;
 }
 (_pthread_mutex_unlock((15440|0))|0);
 $362 = HEAP32[$1>>2]|0;
 $363 = ($362|0)==(0|0);
 if ($363) {
  $$0 = 0;
  return ($$0|0);
 }
 $364 = (12664 + (($version*28)|0)|0);
 $365 = HEAP32[$364>>2]|0;
 $366 = Math_imul($365, $365)|0;
 $367 = (_malloc($366)|0);
 $368 = ($367|0)==(0|0);
 if ($368) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($367|0),($362|0),($366|0))|0;
 $$0 = $367;
 return ($$0|0);
}
function _putFinderPattern($frame,$width,$ox,$oy) {
 $frame = $frame|0;
 $width = $width|0;
 $ox = $ox|0;
 $oy = $oy|0;
 var $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($oy, $width)|0;
 $1 = (($0) + ($ox))|0;
 $2 = (($frame) + ($1)|0);
 HEAP8[$2>>0] = -63;
 $$sum = (($1) + 1)|0;
 $3 = (($frame) + ($$sum)|0);
 $$sum11 = (($1) + ($width))|0;
 $4 = (($frame) + ($$sum11)|0);
 ;HEAP8[$3+0>>0]=193|0;HEAP8[$3+1>>0]=193|0;HEAP8[$3+2>>0]=193|0;HEAP8[$3+3>>0]=193|0;HEAP8[$3+4>>0]=193|0;HEAP8[$3+5>>0]=193|0;
 HEAP8[$4>>0] = -63;
 $$sum12 = (($$sum11) + 1)|0;
 $5 = (($frame) + ($$sum12)|0);
 $$sum13 = (($$sum11) + 6)|0;
 $6 = (($frame) + ($$sum13)|0);
 ;HEAP8[$5+0>>0]=192|0;HEAP8[$5+1>>0]=192|0;HEAP8[$5+2>>0]=192|0;HEAP8[$5+3>>0]=192|0;HEAP8[$5+4>>0]=192|0;
 HEAP8[$6>>0] = -63;
 $$sum14 = (($$sum11) + ($width))|0;
 $7 = (($frame) + ($$sum14)|0);
 HEAP8[$7>>0] = -63;
 $$sum15 = (($$sum14) + 1)|0;
 $8 = (($frame) + ($$sum15)|0);
 HEAP8[$8>>0] = -64;
 $$sum16 = (($$sum14) + 2)|0;
 $9 = (($frame) + ($$sum16)|0);
 HEAP8[$9>>0] = -63;
 $$sum17 = (($$sum14) + 3)|0;
 $10 = (($frame) + ($$sum17)|0);
 HEAP8[$10>>0] = -63;
 $$sum18 = (($$sum14) + 4)|0;
 $11 = (($frame) + ($$sum18)|0);
 HEAP8[$11>>0] = -63;
 $$sum19 = (($$sum14) + 5)|0;
 $12 = (($frame) + ($$sum19)|0);
 HEAP8[$12>>0] = -64;
 $$sum20 = (($$sum14) + 6)|0;
 $13 = (($frame) + ($$sum20)|0);
 HEAP8[$13>>0] = -63;
 $$sum21 = (($$sum14) + ($width))|0;
 $14 = (($frame) + ($$sum21)|0);
 HEAP8[$14>>0] = -63;
 $$sum22 = (($$sum21) + 1)|0;
 $15 = (($frame) + ($$sum22)|0);
 HEAP8[$15>>0] = -64;
 $$sum23 = (($$sum21) + 2)|0;
 $16 = (($frame) + ($$sum23)|0);
 HEAP8[$16>>0] = -63;
 $$sum24 = (($$sum21) + 3)|0;
 $17 = (($frame) + ($$sum24)|0);
 HEAP8[$17>>0] = -63;
 $$sum25 = (($$sum21) + 4)|0;
 $18 = (($frame) + ($$sum25)|0);
 HEAP8[$18>>0] = -63;
 $$sum26 = (($$sum21) + 5)|0;
 $19 = (($frame) + ($$sum26)|0);
 HEAP8[$19>>0] = -64;
 $$sum27 = (($$sum21) + 6)|0;
 $20 = (($frame) + ($$sum27)|0);
 HEAP8[$20>>0] = -63;
 $$sum28 = (($$sum21) + ($width))|0;
 $21 = (($frame) + ($$sum28)|0);
 HEAP8[$21>>0] = -63;
 $$sum29 = (($$sum28) + 1)|0;
 $22 = (($frame) + ($$sum29)|0);
 HEAP8[$22>>0] = -64;
 $$sum30 = (($$sum28) + 2)|0;
 $23 = (($frame) + ($$sum30)|0);
 HEAP8[$23>>0] = -63;
 $$sum31 = (($$sum28) + 3)|0;
 $24 = (($frame) + ($$sum31)|0);
 HEAP8[$24>>0] = -63;
 $$sum32 = (($$sum28) + 4)|0;
 $25 = (($frame) + ($$sum32)|0);
 HEAP8[$25>>0] = -63;
 $$sum33 = (($$sum28) + 5)|0;
 $26 = (($frame) + ($$sum33)|0);
 HEAP8[$26>>0] = -64;
 $$sum34 = (($$sum28) + 6)|0;
 $27 = (($frame) + ($$sum34)|0);
 HEAP8[$27>>0] = -63;
 $$sum35 = (($$sum28) + ($width))|0;
 $28 = (($frame) + ($$sum35)|0);
 HEAP8[$28>>0] = -63;
 $$sum36 = (($$sum35) + 1)|0;
 $29 = (($frame) + ($$sum36)|0);
 $$sum37 = (($$sum35) + 6)|0;
 $30 = (($frame) + ($$sum37)|0);
 ;HEAP8[$29+0>>0]=192|0;HEAP8[$29+1>>0]=192|0;HEAP8[$29+2>>0]=192|0;HEAP8[$29+3>>0]=192|0;HEAP8[$29+4>>0]=192|0;
 HEAP8[$30>>0] = -63;
 $$sum38 = (($$sum35) + ($width))|0;
 $31 = (($frame) + ($$sum38)|0);
 HEAP8[$31>>0] = -63;
 $$sum39 = (($$sum38) + 1)|0;
 $32 = (($frame) + ($$sum39)|0);
 ;HEAP8[$32+0>>0]=193|0;HEAP8[$32+1>>0]=193|0;HEAP8[$32+2>>0]=193|0;HEAP8[$32+3>>0]=193|0;HEAP8[$32+4>>0]=193|0;HEAP8[$32+5>>0]=193|0;
 return;
}
function _init_rs($symsize,$gfpoly,$fcr,$prim,$nroots,$pad) {
 $symsize = $symsize|0;
 $gfpoly = $gfpoly|0;
 $fcr = $fcr|0;
 $prim = $prim|0;
 $nroots = $nroots|0;
 $pad = $pad|0;
 var $$$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i12$i = 0, $$01$i$i = 0, $$01$i11$i = 0, $$lcssa = 0, $$lcssa20 = 0, $$lcssa21 = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre40$i = 0, $$pre41$i = 0, $$pre42$i = 0, $$pre44$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond$i = 0, $exitcond$i9 = 0, $exitcond38$i = 0, $i$028$i = 0, $i$119$i = 0, $iprim$0$lcssa$i = 0, $iprim$023$i = 0, $j$017$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond9$i = 0, $phitmp$i = 0, $root$020$i = 0, $rs$0 = 0;
 var $rs$010 = 0, $rs$011 = 0, $rs$011$lcssa = 0, $rs$1 = 0, $sr$029$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((15960|0))|0);
 $rs$010 = HEAP32[15984>>2]|0;
 $0 = ($rs$010|0)==(0|0);
 do {
  if (!($0)) {
   $rs$011 = $rs$010;
   while(1) {
    $1 = (($rs$011) + 36|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = ($2|0)==($pad|0);
    if ($3) {
     $4 = (($rs$011) + 20|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ($5|0)==($nroots|0);
     if ($6) {
      $7 = HEAP32[$rs$011>>2]|0;
      $8 = ($7|0)==($symsize|0);
      if ($8) {
       $9 = (($rs$011) + 40|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ($10|0)==($gfpoly|0);
       if ($11) {
        $12 = (($rs$011) + 24|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = ($13|0)==($fcr|0);
        if ($14) {
         $15 = (($rs$011) + 28|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = ($16|0)==($prim|0);
         if ($17) {
          $rs$011$lcssa = $rs$011;
          break;
         }
        }
       }
      }
     }
    }
    $18 = (($rs$011) + 44|0);
    $rs$0 = HEAP32[$18>>2]|0;
    $19 = ($rs$0|0)==(0|0);
    if ($19) {
     label = 10;
     break;
    } else {
     $rs$011 = $rs$0;
    }
   }
   if ((label|0) == 10) {
    break;
   }
   $rs$1 = $rs$011$lcssa;
   (_pthread_mutex_unlock((15960|0))|0);
   return ($rs$1|0);
  }
 } while(0);
 $20 = ($symsize>>>0)>(8);
 $21 = ($fcr|0)<(0);
 $or$cond3$i = $20 | $21;
 if ($or$cond3$i) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $22 = 1 << $symsize;
 $23 = ($22|0)<=($fcr|0);
 $24 = ($prim|0)<(1);
 $or$cond5$i = $23 | $24;
 if ($or$cond5$i) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $25 = ($22|0)<=($prim|0);
 $26 = ($nroots|0)<(0);
 $or$cond7$i = $25 | $26;
 if ($or$cond7$i) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $27 = ($22|0)<=($nroots|0);
 $28 = ($pad|0)<(0);
 $or$cond9$i = $27 | $28;
 if ($or$cond9$i) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $29 = (($22) + -1)|0;
 $30 = (($29) - ($nroots))|0;
 $31 = ($30|0)>($pad|0);
 if (!($31)) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $32 = (_calloc(1,48)|0);
 $cond = ($32|0)==(0|0);
 if ($cond) {
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 HEAP32[$32>>2] = $symsize;
 $33 = (($32) + 4|0);
 HEAP32[$33>>2] = $29;
 $34 = (($32) + 36|0);
 HEAP32[$34>>2] = $pad;
 $35 = (_malloc($22)|0);
 $36 = (($32) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = ($35|0)==(0|0);
 if ($37) {
  _free($32);
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $38 = (_malloc($22)|0);
 $39 = (($32) + 12|0);
 HEAP32[$39>>2] = $38;
 $40 = ($38|0)==(0|0);
 if ($40) {
  _free($35);
  _free($32);
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $41 = $29&255;
 HEAP8[$38>>0] = $41;
 $42 = (($35) + ($29)|0);
 HEAP8[$42>>0] = 0;
 $43 = ($29|0)>(0);
 if ($43) {
  $48 = $35;$i$028$i = 0;$sr$029$i = 1;
  while(1) {
   $44 = $i$028$i&255;
   $45 = (($38) + ($sr$029$i)|0);
   HEAP8[$45>>0] = $44;
   $46 = $sr$029$i&255;
   $47 = (($48) + ($i$028$i)|0);
   HEAP8[$47>>0] = $46;
   $49 = $sr$029$i << 1;
   $50 = $49 & $22;
   $51 = ($50|0)==(0);
   $52 = $51 ? 0 : $gfpoly;
   $$$i = $52 ^ $49;
   $53 = HEAP32[$33>>2]|0;
   $54 = $$$i & $53;
   $55 = (($i$028$i) + 1)|0;
   $56 = ($55|0)<($53|0);
   if (!($56)) {
    $$lcssa25 = $53;$$lcssa26 = $54;
    break;
   }
   $$pre = HEAP32[$36>>2]|0;
   $48 = $$pre;$i$028$i = $55;$sr$029$i = $54;
  }
  $phitmp$i = ($$lcssa26|0)==(1);
  if ($phitmp$i) {
   $71 = $$lcssa25;
  } else {
   $57 = HEAP32[$36>>2]|0;
   _free($57);
   _free($38);
   _free($32);
   $rs$1 = 0;
   (_pthread_mutex_unlock((15960|0))|0);
   return ($rs$1|0);
  }
 } else {
  $71 = $29;
 }
 $58 = (($nroots) + 1)|0;
 $59 = (_malloc($58)|0);
 $60 = (($32) + 16|0);
 HEAP32[$60>>2] = $59;
 $61 = ($59|0)==(0|0);
 if ($61) {
  $62 = HEAP32[$36>>2]|0;
  _free($62);
  $63 = HEAP32[$39>>2]|0;
  _free($63);
  _free($32);
  $rs$1 = 0;
  (_pthread_mutex_unlock((15960|0))|0);
  return ($rs$1|0);
 }
 $64 = (($32) + 24|0);
 HEAP32[$64>>2] = $fcr;
 $65 = (($32) + 28|0);
 HEAP32[$65>>2] = $prim;
 $66 = (($32) + 20|0);
 HEAP32[$66>>2] = $nroots;
 $67 = (($32) + 40|0);
 HEAP32[$67>>2] = $gfpoly;
 $68 = (1 % ($prim|0))&-1;
 $69 = ($68|0)==(0);
 if ($69) {
  $iprim$0$lcssa$i = 1;
 } else {
  $iprim$023$i = 1;
  while(1) {
   $70 = (($iprim$023$i) + ($71))|0;
   $72 = (($70|0) % ($prim|0))&-1;
   $73 = ($72|0)==(0);
   if ($73) {
    $$lcssa24 = $70;
    break;
   } else {
    $iprim$023$i = $70;
   }
  }
  $iprim$0$lcssa$i = $$lcssa24;
 }
 $74 = (($iprim$0$lcssa$i|0) / ($prim|0))&-1;
 $75 = (($32) + 32|0);
 HEAP32[$75>>2] = $74;
 HEAP8[$59>>0] = 1;
 $76 = ($nroots|0)>(0);
 if ($76) {
  $77 = Math_imul($prim, $fcr)|0;
  $142 = $71;$143 = $38;$86 = $59;$i$119$i = 0;$root$020$i = $77;
  while(1) {
   $84 = (($i$119$i) + 1)|0;
   $85 = (($86) + ($84)|0);
   HEAP8[$85>>0] = 1;
   $87 = ($i$119$i|0)>(0);
   if ($87) {
    $89 = $86;$j$017$i = $i$119$i;
    while(1) {
     $88 = (($89) + ($j$017$i)|0);
     $90 = HEAP8[$88>>0]|0;
     $91 = ($90<<24>>24)==(0);
     $92 = (($j$017$i) + -1)|0;
     $93 = (($89) + ($92)|0);
     $94 = HEAP8[$93>>0]|0;
     if ($91) {
      HEAP8[$88>>0] = $94;
      $$pre40$i = HEAP32[$60>>2]|0;
      $144 = $$pre40$i;
     } else {
      $95 = $90&255;
      $96 = HEAP32[$39>>2]|0;
      $97 = (($96) + ($95)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98&255;
      $100 = (($99) + ($root$020$i))|0;
      $101 = HEAP32[$33>>2]|0;
      $102 = ($101|0)>($100|0);
      if ($102) {
       $$0$lcssa$i$i = $100;
      } else {
       $103 = HEAP32[$32>>2]|0;
       $$01$i$i = $100;
       while(1) {
        $104 = (($$01$i$i) - ($101))|0;
        $105 = $104 >> $103;
        $106 = $104 & $101;
        $107 = (($105) + ($106))|0;
        $108 = ($107|0)<($101|0);
        if ($108) {
         $$lcssa = $107;
         break;
        } else {
         $$01$i$i = $107;
        }
       }
       $$0$lcssa$i$i = $$lcssa;
      }
      $109 = HEAP32[$36>>2]|0;
      $110 = (($109) + ($$0$lcssa$i$i)|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111 ^ $94;
      HEAP8[$88>>0] = $112;
      $144 = $89;
     }
     $113 = ($92|0)>(0);
     if ($113) {
      $89 = $144;$j$017$i = $92;
     } else {
      $$lcssa20 = $144;
      break;
     }
    }
    $$pre41$i = HEAP32[$39>>2]|0;
    $$pre42$i = HEAP32[$33>>2]|0;
    $115 = $$lcssa20;$118 = $$pre41$i;$122 = $$pre42$i;
   } else {
    $115 = $86;$118 = $143;$122 = $142;
   }
   $114 = HEAP8[$115>>0]|0;
   $116 = $114&255;
   $117 = (($118) + ($116)|0);
   $119 = HEAP8[$117>>0]|0;
   $120 = $119&255;
   $121 = (($120) + ($root$020$i))|0;
   $123 = ($122|0)>($121|0);
   if ($123) {
    $$0$lcssa$i12$i = $121;
   } else {
    $124 = HEAP32[$32>>2]|0;
    $$01$i11$i = $121;
    while(1) {
     $125 = (($$01$i11$i) - ($122))|0;
     $126 = $125 >> $124;
     $127 = $125 & $122;
     $128 = (($126) + ($127))|0;
     $129 = ($128|0)<($122|0);
     if ($129) {
      $$lcssa21 = $128;
      break;
     } else {
      $$01$i11$i = $128;
     }
    }
    $$0$lcssa$i12$i = $$lcssa21;
   }
   $130 = HEAP32[$36>>2]|0;
   $131 = (($130) + ($$0$lcssa$i12$i)|0);
   $132 = HEAP8[$131>>0]|0;
   HEAP8[$115>>0] = $132;
   $133 = (($root$020$i) + ($prim))|0;
   $exitcond38$i = ($84|0)==($nroots|0);
   if ($exitcond38$i) {
    $$lcssa22 = $115;$$lcssa23 = $132;
    break;
   } else {
    $142 = $122;$143 = $118;$86 = $115;$i$119$i = $84;$root$020$i = $133;
   }
  }
  $79 = $$lcssa23;$83 = $$lcssa22;
 } else {
  $79 = 1;$83 = $59;
 }
 $78 = $79&255;
 $80 = HEAP32[$39>>2]|0;
 $81 = (($80) + ($78)|0);
 $82 = HEAP8[$81>>0]|0;
 HEAP8[$83>>0] = $82;
 $exitcond$i9 = ($nroots|0)==(0);
 if (!($exitcond$i9)) {
  $134 = 1;
  while(1) {
   $$phi$trans$insert$i = (($83) + ($134)|0);
   $$pre44$i = HEAP8[$$phi$trans$insert$i>>0]|0;
   $135 = $$pre44$i&255;
   $136 = HEAP32[$39>>2]|0;
   $137 = (($136) + ($135)|0);
   $138 = HEAP8[$137>>0]|0;
   HEAP8[$$phi$trans$insert$i>>0] = $138;
   $139 = (($134) + 1)|0;
   $exitcond$i = ($139|0)==($58|0);
   if ($exitcond$i) {
    break;
   } else {
    $134 = $139;
   }
  }
 }
 $140 = HEAP32[15984>>2]|0;
 $141 = (($32) + 44|0);
 HEAP32[$141>>2] = $140;
 HEAP32[15984>>2] = $32;
 $rs$1 = $32;
 (_pthread_mutex_unlock((15960|0))|0);
 return ($rs$1|0);
}
function _encode_rs_char($rs,$data,$parity) {
 $rs = $rs|0;
 $data = $data|0;
 $parity = $parity|0;
 var $$0$lcssa$i = 0, $$0$lcssa$i3 = 0, $$01$i = 0, $$01$i2 = 0, $$lcssa = 0, $$lcssa13 = 0, $$lcssa14 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $i$010 = 0, $j$07 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($rs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _memset(($parity|0),0,($1|0))|0;
 $2 = (($rs) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($rs) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = ($8|0)>(0);
 if (!($9)) {
  return;
 }
 $10 = (($rs) + 12|0);
 $11 = (($parity) + 1|0);
 $12 = (($rs) + 16|0);
 $13 = (($rs) + 8|0);
 $24 = $3;$25 = $4;$i$010 = 0;
 while(1) {
  $14 = (($data) + ($i$010)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = HEAP8[$parity>>0]|0;
  $17 = $16 ^ $15;
  $18 = $17&255;
  $19 = HEAP32[$10>>2]|0;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)!=($24|0);
  $26 = ($25|0)>(1);
  $or$cond = $23 & $26;
  if ($or$cond) {
   $28 = $25;$34 = $24;$j$07 = 1;
   while(1) {
    $27 = (($28) - ($j$07))|0;
    $29 = HEAP32[$12>>2]|0;
    $30 = (($29) + ($27)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($32) + ($22))|0;
    $35 = ($34|0)>($33|0);
    if ($35) {
     $$0$lcssa$i = $33;
    } else {
     $36 = HEAP32[$rs>>2]|0;
     $$01$i = $33;
     while(1) {
      $37 = (($$01$i) - ($34))|0;
      $38 = $37 >> $36;
      $39 = $37 & $34;
      $40 = (($38) + ($39))|0;
      $41 = ($40|0)<($34|0);
      if ($41) {
       $$lcssa = $40;
       break;
      } else {
       $$01$i = $40;
      }
     }
     $$0$lcssa$i = $$lcssa;
    }
    $42 = HEAP32[$13>>2]|0;
    $43 = (($42) + ($$0$lcssa$i)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = (($parity) + ($j$07)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 ^ $44;
    HEAP8[$45>>0] = $47;
    $48 = (($j$07) + 1)|0;
    $49 = HEAP32[$0>>2]|0;
    $50 = ($49|0)>($48|0);
    if (!($50)) {
     $$lcssa13 = $49;
     break;
    }
    $$pre = HEAP32[$2>>2]|0;
    $28 = $49;$34 = $$pre;$j$07 = $48;
   }
   $52 = $$lcssa13;
  } else {
   $52 = $25;
  }
  $51 = (($52) + -1)|0;
  _memmove(($parity|0),($11|0),($51|0))|0;
  $53 = HEAP32[$2>>2]|0;
  $54 = ($22|0)==($53|0);
  if ($54) {
   $72 = HEAP32[$0>>2]|0;
   $73 = (($72) + -1)|0;
   $74 = (($parity) + ($73)|0);
   HEAP8[$74>>0] = 0;
  } else {
   $55 = HEAP32[$12>>2]|0;
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = (($57) + ($22))|0;
   $59 = ($53|0)>($58|0);
   if ($59) {
    $$0$lcssa$i3 = $58;
   } else {
    $60 = HEAP32[$rs>>2]|0;
    $$01$i2 = $58;
    while(1) {
     $61 = (($$01$i2) - ($53))|0;
     $62 = $61 >> $60;
     $63 = $61 & $53;
     $64 = (($62) + ($63))|0;
     $65 = ($64|0)<($53|0);
     if ($65) {
      $$lcssa14 = $64;
      break;
     } else {
      $$01$i2 = $64;
     }
    }
    $$0$lcssa$i3 = $$lcssa14;
   }
   $66 = HEAP32[$13>>2]|0;
   $67 = (($66) + ($$0$lcssa$i3)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = HEAP32[$0>>2]|0;
   $70 = (($69) + -1)|0;
   $71 = (($parity) + ($70)|0);
   HEAP8[$71>>0] = $68;
  }
  $75 = (($i$010) + 1)|0;
  $76 = HEAP32[$2>>2]|0;
  $77 = HEAP32[$0>>2]|0;
  $78 = (($76) - ($77))|0;
  $79 = HEAP32[$6>>2]|0;
  $80 = (($78) - ($79))|0;
  $81 = ($75|0)<($80|0);
  if ($81) {
   $24 = $76;$25 = $77;$i$010 = $75;
  } else {
   break;
  }
 }
 return;
}
function _Split_splitStringToQRinput($string,$input,$hint,$casesensitive) {
 $string = $string|0;
 $input = $input|0;
 $hint = $hint|0;
 $casesensitive = $casesensitive|0;
 var $$0 = 0, $$off$i = 0, $$off$i$us$i = 0, $$off$us$i = 0, $$off4$i$us$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$us$i = 0, $p$0$be$us$i = 0, $p$02$i = 0, $p$02$us$i = 0, $phitmp$i$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($string|0)==(0|0);
 if (!($0)) {
  $1 = HEAP8[$string>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if (!($2)) {
   $4 = ($casesensitive|0)==(0);
   if (!($4)) {
    $42 = (_Split_splitString($string,$input,$hint)|0);
    $$0 = $42;
    return ($$0|0);
   }
   $5 = (___strdup($string)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = -1;
    return ($$0|0);
   }
   $7 = HEAP8[$5>>0]|0;
   $8 = ($7<<24>>24)==(0);
   do {
    if (!($8)) {
     $9 = ($hint|0)==(3);
     if (!($9)) {
      $34 = $7;$p$02$i = $5;
      while(1) {
       $$off$i = (($34) + -97)<<24>>24;
       $35 = ($$off$i&255)<(26);
       if ($35) {
        $36 = $34&255;
        $37 = (($36) + 224)|0;
        $38 = $37&255;
        HEAP8[$p$02$i>>0] = $38;
       }
       $39 = (($p$02$i) + 1|0);
       $$pre$i = HEAP8[$39>>0]|0;
       $40 = ($$pre$i<<24>>24)==(0);
       if ($40) {
        break;
       } else {
        $34 = $$pre$i;$p$02$i = $39;
       }
      }
      break;
     }
     $11 = $7;$p$02$us$i = $5;
     while(1) {
      $10 = $11&255;
      $12 = (($10) + 208)|0;
      $13 = $12 & 254;
      $14 = ($13>>>0)<(10);
      do {
       if ($14) {
        label = 16;
       } else {
        $15 = $10 & 128;
        $16 = ($15|0)==(0);
        if ($16) {
         $17 = (12536 + ($10)|0);
         $18 = HEAP8[$17>>0]|0;
         $phitmp$i$us$i = ($18<<24>>24)<(0);
         if (!($phitmp$i$us$i)) {
          label = 16;
          break;
         }
        }
        $19 = (($p$02$us$i) + 1|0);
        $20 = HEAP8[$19>>0]|0;
        $21 = ($20<<24>>24)==(0);
        if ($21) {
         label = 16;
        } else {
         $22 = $20&255;
         $23 = $10 << 8;
         $24 = $22 | $23;
         $$off$i$us$i = (($24) + -33088)|0;
         $25 = ($$off$i$us$i>>>0)<(7869);
         $$off4$i$us$i = (($24) + -57408)|0;
         $26 = ($$off4$i$us$i>>>0)<(2944);
         $or$cond$i$us$i = $25 | $26;
         if ($or$cond$i$us$i) {
          $27 = (($p$02$us$i) + 2|0);
          $p$0$be$us$i = $27;
         } else {
          label = 16;
         }
        }
       }
      } while(0);
      if ((label|0) == 16) {
       label = 0;
       $$off$us$i = (($11) + -97)<<24>>24;
       $28 = ($$off$us$i&255)<(26);
       if ($28) {
        $29 = (($10) + 224)|0;
        $30 = $29&255;
        HEAP8[$p$02$us$i>>0] = $30;
       }
       $31 = (($p$02$us$i) + 1|0);
       $p$0$be$us$i = $31;
      }
      $32 = HEAP8[$p$0$be$us$i>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if ($33) {
       break;
      } else {
       $11 = $32;$p$02$us$i = $p$0$be$us$i;
      }
     }
    }
   } while(0);
   $41 = (_Split_splitString($5,$input,$hint)|0);
   _free($5);
   $$0 = $41;
   return ($$0|0);
  }
 }
 $3 = (___errno_location()|0);
 HEAP32[$3>>2] = 22;
 $$0 = -1;
 return ($$0|0);
}
function _Split_splitString($string,$input,$hint) {
 $string = $string|0;
 $input = $input|0;
 $hint = $hint|0;
 var $$0 = 0, $$0$ph = 0, $$lcssa = 0, $$lcssa27 = 0, $$lcssa28 = 0, $$off$i = 0, $$off$i$i = 0, $$off$i$i6 = 0, $$off4$i = 0, $$off4$i$i = 0, $$off4$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $length$0 = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i8 = 0, $p$0$i = 0, $p$0$i$lcssa = 0, $p$0$lcssa$i = 0, $p$0$lcssa$i$ph = 0, $p$02$i = 0, $phitmp$i = 0, $phitmp$i$i = 0;
 var $phitmp$i$i3 = 0, $string$tr20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$string>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($hint|0)==(3);
 $4 = $0;$string$tr20 = $string;
 L4: while(1) {
  $3 = $4&255;
  $5 = (($3) + 208)|0;
  $6 = $5 & 254;
  $7 = ($6>>>0)<(10);
  L6: do {
   if ($7) {
    $20 = HEAP32[$input>>2]|0;
    $21 = (_QRspec_lengthIndicator(0,$20)|0);
    $p$0$i = $string$tr20;
    while(1) {
     $22 = HEAP8[$p$0$i>>0]|0;
     $23 = $22&255;
     $24 = (($23) + 208)|0;
     $25 = $24 & 254;
     $26 = ($25>>>0)<(10);
     $27 = (($p$0$i) + 1|0);
     if ($26) {
      $p$0$i = $27;
     } else {
      $$lcssa = $22;$$lcssa27 = $23;$$lcssa28 = $27;$p$0$i$lcssa = $p$0$i;
      break;
     }
    }
    $28 = $p$0$i$lcssa;
    $29 = $string$tr20;
    $30 = (($28) - ($29))|0;
    $31 = ($$lcssa<<24>>24)==(0);
    do {
     if (!($31)) {
      $32 = $$lcssa27 & 128;
      $33 = ($32|0)==(0);
      if ($33) {
       $34 = (12536 + ($$lcssa27)|0);
       $35 = HEAP8[$34>>0]|0;
       $phitmp$i$i = ($35<<24>>24)>(-1);
       if ($phitmp$i$i) {
        $53 = (_QRinput_estimateBitsModeNum($30)|0);
        $54 = (_QRinput_estimateBitsModeAn(1)|0);
        $55 = (($30) + 1)|0;
        $56 = (_QRinput_estimateBitsModeAn($55)|0);
        $57 = (($21) + 4)|0;
        $58 = (($57) + ($53))|0;
        $59 = (($58) + ($54))|0;
        $60 = (($59) - ($56))|0;
        $61 = ($60|0)>(0);
        if (!($61)) {
         break;
        }
        $62 = (_Split_eatAn($string$tr20,$input,$hint)|0);
        $length$0 = $62;
        break L6;
       }
      }
      if ($2) {
       $36 = HEAP8[$$lcssa28>>0]|0;
       $37 = ($36<<24>>24)==(0);
       if (!($37)) {
        $38 = $36&255;
        $39 = $$lcssa27 << 8;
        $40 = $38 | $39;
        $$off$i$i = (($40) + -33088)|0;
        $41 = ($$off$i$i>>>0)<(7869);
        $$off4$i$i = (($40) + -57408)|0;
        $42 = ($$off4$i$i>>>0)<(2944);
        $or$cond$i$i = $41 | $42;
        if ($or$cond$i$i) {
         break;
        }
       }
      }
      $43 = (_QRinput_estimateBitsModeNum($30)|0);
      $44 = (_QRinput_estimateBitsMode8(1)|0);
      $45 = (($30) + 1)|0;
      $46 = (_QRinput_estimateBitsMode8($45)|0);
      $47 = (($21) + 4)|0;
      $48 = (($47) + ($43))|0;
      $49 = (($48) + ($44))|0;
      $50 = (($49) - ($46))|0;
      $51 = ($50|0)>(0);
      if ($51) {
       $52 = (_Split_eat8($string$tr20,$input,$hint)|0);
       $length$0 = $52;
       break L6;
      }
     }
    } while(0);
    $63 = (_QRinput_append($input,0,$30,$string$tr20)|0);
    $64 = ($63|0)<(0);
    if ($64) {
     $$0$ph = -1;
     break L4;
    } else {
     $length$0 = $30;
    }
   } else {
    $8 = $3 & 128;
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = (12536 + ($3)|0);
     $11 = HEAP8[$10>>0]|0;
     $phitmp$i = ($11<<24>>24)>(-1);
     if ($phitmp$i) {
      $65 = (_Split_eatAn($string$tr20,$input,$hint)|0);
      $length$0 = $65;
      break;
     }
    }
    if ($2) {
     $12 = (($string$tr20) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if (!($14)) {
      $15 = $13&255;
      $16 = $3 << 8;
      $17 = $15 | $16;
      $$off$i = (($17) + -33088)|0;
      $18 = ($$off$i>>>0)<(7869);
      $$off4$i = (($17) + -57408)|0;
      $19 = ($$off4$i>>>0)<(2944);
      $or$cond$i = $18 | $19;
      if ($or$cond$i) {
       $66 = ($4<<24>>24)==(0);
       if ($66) {
        $p$0$lcssa$i = $string$tr20;
       } else {
        $72 = $3;$p$02$i = $string$tr20;
        while(1) {
         $71 = (($72) + 208)|0;
         $73 = $71 & 254;
         $74 = ($73>>>0)<(10);
         if ($74) {
          $p$0$lcssa$i$ph = $p$02$i;
          break;
         }
         $75 = $72 & 128;
         $76 = ($75|0)==(0);
         if ($76) {
          $77 = (12536 + ($72)|0);
          $78 = HEAP8[$77>>0]|0;
          $phitmp$i$i3 = ($78<<24>>24)<(0);
          if (!($phitmp$i$i3)) {
           $p$0$lcssa$i$ph = $p$02$i;
           break;
          }
         }
         $79 = (($p$02$i) + 1|0);
         $80 = HEAP8[$79>>0]|0;
         $81 = ($80<<24>>24)==(0);
         if ($81) {
          $p$0$lcssa$i$ph = $p$02$i;
          break;
         }
         $82 = $80&255;
         $83 = $72 << 8;
         $84 = $82 | $83;
         $$off$i$i6 = (($84) + -33088)|0;
         $85 = ($$off$i$i6>>>0)<(7869);
         $$off4$i$i7 = (($84) + -57408)|0;
         $86 = ($$off4$i$i7>>>0)<(2944);
         $or$cond$i$i8 = $85 | $86;
         $68 = (($p$02$i) + 2|0);
         if (!($or$cond$i$i8)) {
          $p$0$lcssa$i$ph = $p$02$i;
          break;
         }
         $67 = HEAP8[$68>>0]|0;
         $69 = $67&255;
         $70 = ($67<<24>>24)==(0);
         if ($70) {
          $p$0$lcssa$i$ph = $68;
          break;
         } else {
          $72 = $69;$p$02$i = $68;
         }
        }
        $p$0$lcssa$i = $p$0$lcssa$i$ph;
       }
       $87 = $p$0$lcssa$i;
       $88 = $string$tr20;
       $89 = (($87) - ($88))|0;
       $90 = (_QRinput_append($input,3,$89,$string$tr20)|0);
       $91 = ($90|0)<(0);
       if ($91) {
        $$0$ph = -1;
        break L4;
       } else {
        $length$0 = $89;
        break;
       }
      }
     }
    }
    $92 = (_Split_eat8($string$tr20,$input,$hint)|0);
    $length$0 = $92;
   }
  } while(0);
  $93 = ($length$0|0)==(0);
  if ($93) {
   $$0$ph = 0;
   break;
  }
  $94 = ($length$0|0)<(0);
  if ($94) {
   $$0$ph = -1;
   break;
  }
  $95 = (($string$tr20) + ($length$0)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if ($97) {
   $$0$ph = 0;
   break;
  } else {
   $4 = $96;$string$tr20 = $95;
  }
 }
 $$0 = $$0$ph;
 return ($$0|0);
}
function _Split_eat8($string,$input,$hint) {
 $string = $string|0;
 $input = $input|0;
 $hint = $hint|0;
 var $$ = 0, $$0$i13 = 0, $$0$i6 = 0, $$lcssa = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$off$i = 0, $$off$i10 = 0, $$off$i3 = 0, $$off4$i = 0, $$off4$i11 = 0, $$off4$i4 = 0, $$ph = 0, $$pr = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond$i5 = 0, $p$0$be = 0, $p$0$lcssa = 0, $p$0$lcssa$ph = 0, $p$025 = 0, $phitmp = 0, $phitmp$i = 0, $phitmp$i1 = 0, $phitmp$i8 = 0, $q$0 = 0, $q$0$lcssa = 0;
 var $q$119 = 0, $q$119$ph = 0, $q$123 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$input>>2]|0;
 $1 = (_QRspec_lengthIndicator(1,$0)|0);
 $2 = HEAP32[$input>>2]|0;
 $3 = (_QRspec_lengthIndicator(0,$2)|0);
 $4 = HEAP32[$input>>2]|0;
 $5 = (_QRspec_lengthIndicator(2,$4)|0);
 $6 = (($string) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $$pre43 = $string;
  $$pre$phiZ2D = $$pre43;$p$0$lcssa = $6;
  $106 = $p$0$lcssa;
  $107 = (($106) - ($$pre$phiZ2D))|0;
  $108 = (_QRinput_append($input,2,$107,$string)|0);
  $109 = ($108|0)<(0);
  $$ = $109 ? -1 : $107;
  return ($$|0);
 }
 $9 = (($5) + 4)|0;
 $10 = $string;
 $11 = (($1) + 4)|0;
 $12 = ($hint|0)==(3);
 $13 = (($3) + 4)|0;
 $15 = $7;$p$025 = $6;
 L5: while(1) {
  $14 = $15&255;
  $16 = (($14) + 208)|0;
  $17 = $16 & 254;
  $18 = ($17>>>0)<(10);
  do {
   if ($18) {
    $35 = $15;$q$0 = $p$025;
    while(1) {
     $34 = $35&255;
     $36 = (($34) + 208)|0;
     $37 = $36 & 254;
     $38 = ($37>>>0)<(10);
     $39 = (($q$0) + 1|0);
     if (!($38)) {
      $$lcssa = $35;$$lcssa46 = $34;$$lcssa47 = $39;$q$0$lcssa = $q$0;
      break;
     }
     $$pre = HEAP8[$39>>0]|0;
     $35 = $$pre;$q$0 = $39;
    }
    $40 = ($$lcssa<<24>>24)==(0);
    do {
     if ($40) {
      $$0$i13 = 0;
     } else {
      $41 = $$lcssa46 & 128;
      $42 = ($41|0)==(0);
      if ($42) {
       $43 = (12536 + ($$lcssa46)|0);
       $44 = HEAP8[$43>>0]|0;
       $phitmp$i8 = ($44<<24>>24)>(-1);
       if ($phitmp$i8) {
        $$0$i13 = 0;
        break;
       }
      }
      if ($12) {
       $45 = HEAP8[$$lcssa47>>0]|0;
       $46 = ($45<<24>>24)==(0);
       if (!($46)) {
        $47 = $45&255;
        $48 = $$lcssa46 << 8;
        $49 = $47 | $48;
        $$off$i10 = (($49) + -33088)|0;
        $50 = ($$off$i10>>>0)<(7869);
        $$off4$i11 = (($49) + -57408)|0;
        $51 = ($$off4$i11>>>0)<(2944);
        $or$cond$i12 = $50 | $51;
        if ($or$cond$i12) {
         $$0$i13 = 0;
         break;
        }
       }
      }
      $$0$i13 = $9;
     }
    } while(0);
    $52 = $p$025;
    $53 = (($52) - ($10))|0;
    $54 = (_QRinput_estimateBitsMode8($53)|0);
    $55 = $q$0$lcssa;
    $56 = (($55) - ($52))|0;
    $57 = (_QRinput_estimateBitsModeNum($56)|0);
    $58 = (($55) - ($10))|0;
    $59 = (_QRinput_estimateBitsMode8($58)|0);
    $60 = (($13) + ($54))|0;
    $61 = (($60) + ($$0$i13))|0;
    $62 = (($61) + ($57))|0;
    $63 = (($62) - ($59))|0;
    $64 = ($63|0)<(0);
    if ($64) {
     $p$0$lcssa$ph = $p$025;
     break L5;
    } else {
     $p$0$be = $q$0$lcssa;
    }
   } else {
    $19 = $14 & 128;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = (12536 + ($14)|0);
     $22 = HEAP8[$21>>0]|0;
     $phitmp$i = ($22<<24>>24)>(-1);
     if ($phitmp$i) {
      $23 = $15 << 24 >> 24;
      $24 = $23 & 128;
      $25 = ($24|0)==(0);
      if ($25) {
       $$pr = $15;$71 = $23;$q$123 = $p$025;
       while(1) {
        $70 = (12536 + ($71)|0);
        $72 = HEAP8[$70>>0]|0;
        $phitmp = ($72<<24>>24)>(-1);
        $66 = (($q$123) + 1|0);
        if (!($phitmp)) {
         $$ph = $$pr;$q$119$ph = $q$123;
         break;
        }
        $65 = HEAP8[$66>>0]|0;
        $67 = $65 << 24 >> 24;
        $68 = $67 & 128;
        $69 = ($68|0)==(0);
        if ($69) {
         $$pr = $65;$71 = $67;$q$123 = $66;
        } else {
         $$ph = $65;$q$119$ph = $66;
         break;
        }
       }
       $74 = $$ph;$q$119 = $q$119$ph;
      } else {
       $74 = $15;$q$119 = $p$025;
      }
      $73 = $74&255;
      $75 = ($74<<24>>24)==(0);
      do {
       if ($75) {
        $$0$i6 = 0;
       } else {
        $76 = (($73) + 208)|0;
        $77 = $76 & 254;
        $78 = ($77>>>0)<(10);
        if ($78) {
         $$0$i6 = 0;
        } else {
         $79 = $73 & 128;
         $80 = ($79|0)==(0);
         if ($80) {
          $81 = (12536 + ($73)|0);
          $82 = HEAP8[$81>>0]|0;
          $phitmp$i1 = ($82<<24>>24)>(-1);
          if ($phitmp$i1) {
           $$0$i6 = 0;
           break;
          }
         }
         if ($12) {
          $83 = (($q$119) + 1|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = ($84<<24>>24)==(0);
          if (!($85)) {
           $86 = $84&255;
           $87 = $73 << 8;
           $88 = $86 | $87;
           $$off$i3 = (($88) + -33088)|0;
           $89 = ($$off$i3>>>0)<(7869);
           $$off4$i4 = (($88) + -57408)|0;
           $90 = ($$off4$i4>>>0)<(2944);
           $or$cond$i5 = $89 | $90;
           if ($or$cond$i5) {
            $$0$i6 = 0;
            break;
           }
          }
         }
         $$0$i6 = $9;
        }
       }
      } while(0);
      $91 = $p$025;
      $92 = (($91) - ($10))|0;
      $93 = (_QRinput_estimateBitsMode8($92)|0);
      $94 = $q$119;
      $95 = (($94) - ($91))|0;
      $96 = (_QRinput_estimateBitsModeAn($95)|0);
      $97 = (($94) - ($10))|0;
      $98 = (_QRinput_estimateBitsMode8($97)|0);
      $99 = (($11) + ($93))|0;
      $100 = (($99) + ($$0$i6))|0;
      $101 = (($100) + ($96))|0;
      $102 = (($101) - ($98))|0;
      $103 = ($102|0)<(0);
      if ($103) {
       $p$0$lcssa$ph = $p$025;
       break L5;
      } else {
       $p$0$be = $q$119;
       break;
      }
     }
    }
    $26 = (($p$025) + 1|0);
    if ($12) {
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $p$0$be = $26;
     } else {
      $29 = $27&255;
      $30 = $14 << 8;
      $31 = $29 | $30;
      $$off$i = (($31) + -33088)|0;
      $32 = ($$off$i>>>0)<(7869);
      $$off4$i = (($31) + -57408)|0;
      $33 = ($$off4$i>>>0)<(2944);
      $or$cond$i = $32 | $33;
      if ($or$cond$i) {
       $p$0$lcssa$ph = $p$025;
       break L5;
      } else {
       $p$0$be = $26;
      }
     }
    } else {
     $p$0$be = $26;
    }
   }
  } while(0);
  $104 = HEAP8[$p$0$be>>0]|0;
  $105 = ($104<<24>>24)==(0);
  if ($105) {
   $p$0$lcssa$ph = $p$0$be;
   break;
  } else {
   $15 = $104;$p$025 = $p$0$be;
  }
 }
 $$pre$phiZ2D = $10;$p$0$lcssa = $p$0$lcssa$ph;
 $106 = $p$0$lcssa;
 $107 = (($106) - ($$pre$phiZ2D))|0;
 $108 = (_QRinput_append($input,2,$107,$string)|0);
 $109 = ($108|0)<(0);
 $$ = $109 ? -1 : $107;
 return ($$|0);
}
function _Split_eatAn($string,$input,$hint) {
 $string = $string|0;
 $input = $input|0;
 $hint = $hint|0;
 var $$0 = 0, $$4 = 0, $$ph = 0, $$pr$pre = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$be = 0, $p$07 = 0, $p$07$ph = 0, $p$09 = 0, $p$09$lcssa17 = 0;
 var $phitmp = 0, $phitmp1 = 0, $phitmp11 = 0, $phitmp2 = 0, $q$0 = 0, $q$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$input>>2]|0;
 $1 = (_QRspec_lengthIndicator(1,$0)|0);
 $2 = HEAP32[$input>>2]|0;
 $3 = (_QRspec_lengthIndicator(0,$2)|0);
 $4 = HEAP8[$string>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = $string;
 do {
  if ($7) {
   $9 = (($3) + 4)|0;
   $11 = $5;$14 = $4;$p$09 = $string;
   while(1) {
    $10 = (12536 + ($11)|0);
    $12 = HEAP8[$10>>0]|0;
    $phitmp = ($12<<24>>24)>(-1);
    if (!($phitmp)) {
     $$ph = $14;$p$07$ph = $p$09;
     label = 14;
     break;
    }
    $13 = $14&255;
    $15 = (($13) + 208)|0;
    $16 = $15 & 254;
    $17 = ($16>>>0)<(10);
    if ($17) {
     $19 = $14;$q$0 = $p$09;
     while(1) {
      $18 = $19&255;
      $20 = (($18) + 208)|0;
      $21 = $20 & 254;
      $22 = ($21>>>0)<(10);
      $23 = (($q$0) + 1|0);
      if (!($22)) {
       $q$0$lcssa = $q$0;
       break;
      }
      $$pre = HEAP8[$23>>0]|0;
      $19 = $$pre;$q$0 = $23;
     }
     $24 = $p$09;
     $25 = (($24) - ($8))|0;
     $26 = (_QRinput_estimateBitsModeAn($25)|0);
     $27 = $q$0$lcssa;
     $28 = (($27) - ($24))|0;
     $29 = (_QRinput_estimateBitsModeNum($28)|0);
     $30 = HEAP8[$q$0$lcssa>>0]|0;
     $31 = $30 << 24 >> 24;
     $32 = $31 & 128;
     $33 = ($32|0)==(0);
     if ($33) {
      $34 = (12536 + ($31)|0);
      $35 = HEAP8[$34>>0]|0;
      $phitmp2 = ($35<<24>>24)>(-1);
      $phitmp11 = $phitmp2 ? $9 : 0;
      $41 = $phitmp11;
     } else {
      $41 = 0;
     }
     $36 = (($27) - ($8))|0;
     $37 = (_QRinput_estimateBitsModeAn($36)|0);
     $38 = (($9) + ($26))|0;
     $39 = (($38) + ($29))|0;
     $40 = (($39) + ($41))|0;
     $42 = (($40) - ($37))|0;
     $43 = ($42|0)<(0);
     if ($43) {
      $p$09$lcssa17 = $p$09;
      label = 11;
      break;
     } else {
      $p$0$be = $q$0$lcssa;
     }
    } else {
     $44 = (($p$09) + 1|0);
     $p$0$be = $44;
    }
    $45 = HEAP8[$p$0$be>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = $46 & 128;
    $48 = ($47|0)==(0);
    if ($48) {
     $11 = $46;$14 = $45;$p$09 = $p$0$be;
    } else {
     $$ph = $45;$p$07$ph = $p$0$be;
     label = 14;
     break;
    }
   }
   if ((label|0) == 11) {
    $$pr$pre = HEAP8[$p$09$lcssa17>>0]|0;
    $52 = $$pr$pre;$p$07 = $p$09$lcssa17;
    break;
   }
   else if ((label|0) == 14) {
    $52 = $$ph;$p$07 = $p$07$ph;
    break;
   }
  } else {
   $52 = $4;$p$07 = $string;
  }
 } while(0);
 $49 = $p$07;
 $50 = (($49) - ($8))|0;
 $51 = $52 << 24 >> 24;
 $53 = ($52<<24>>24)==(0);
 do {
  if (!($53)) {
   $54 = $51 & 128;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (12536 + ($51)|0);
    $57 = HEAP8[$56>>0]|0;
    $phitmp1 = ($57<<24>>24)>(-1);
    if ($phitmp1) {
     break;
    }
   }
   $58 = (_QRinput_estimateBitsModeAn($50)|0);
   $59 = (_QRinput_estimateBitsMode8(1)|0);
   $60 = (($50) + 1)|0;
   $61 = (_QRinput_estimateBitsMode8($60)|0);
   $62 = (($1) + 4)|0;
   $63 = (($62) + ($58))|0;
   $64 = (($63) + ($59))|0;
   $65 = (($64) - ($61))|0;
   $66 = ($65|0)>(0);
   if ($66) {
    $67 = (_Split_eat8($string,$input,$hint)|0);
    $$0 = $67;
    return ($$0|0);
   }
  }
 } while(0);
 $68 = (_QRinput_append($input,1,$50,$string)|0);
 $69 = ($68|0)<(0);
 $$4 = $69 ? -1 : $50;
 $$0 = $$4;
 return ($$0|0);
}
function _Mask_mask($width,$frame,$level) {
 $width = $width|0;
 $frame = $frame|0;
 $level = $level|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$pre$i = 0, $$pre21$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $bestMask$04 = 0, $bestMask$1 = 0, $bestMask$2 = 0, $demerit$0$ph$i = 0, $demerit$014$i = 0, $demerit$07$us$i$i = 0, $demerit$1$$us$i$i = 0, $demerit$1$$us$i$i$lcssa = 0, $demerit$1$$us$i$i$lcssa$lcssa = 0, $demerit$1$lcssa$i = 0, $demerit$111$i = 0, $demerit$111$us$i = 0, $demerit$13$us$i$i = 0, $exitcond$i = 0;
 var $exitcond$i$i = 0, $exitcond$i8$us$i = 0, $exitcond10$i$i = 0, $exitcond11$i$i = 0, $exitcond19$i = 0, $exitcond20$i = 0, $frame$pn$i$i = 0, $frame$pn$i2$us$i = 0, $head$0$i$i = 0, $head$0$i1$i = 0, $head$0$i1$us$i = 0, $head$1$lcssa$i$i = 0, $head$14$i$i = 0, $head$14$i3$us$i = 0, $head$2$i$i = 0, $head$2$i$i$lcssa = 0, $head$2$i7$us$i = 0, $head$2$i7$us$i$lcssa = 0, $i$02$i$i = 0, $i$02$i4$us$i = 0;
 var $i$07 = 0, $ispos = 0, $mask$06 = 0, $mask$1 = 0, $mask$2 = 0, $minDemerit$05 = 0, $minDemerit$1 = 0, $neg = 0, $p$05$i$i = 0, $p$05$i5$us$i = 0, $p$05$us$i$i = 0, $p$11$us$i$i = 0, $phitmp$i = 0, $phitmp22$i = 0, $runLength$i = 0, $x$012$i = 0, $x$012$us$i = 0, $x$02$us$i$i = 0, $y$013$i = 0, $y$06$us$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $runLength$i = sp;
 $0 = Math_imul($width, $width)|0;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($width|0)>(1);
 $$sum$i$i = (($width) + 1)|0;
 $4 = (0 - ($width))|0;
 $5 = $width ^ -1;
 $6 = ($width|0)>(0);
 $bestMask$04 = 0;$i$07 = 0;$mask$06 = $1;$minDemerit$05 = 2147483647;
 while(1) {
  $7 = (15992 + ($i$07<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 63]($width,$frame,$mask$06)|0);
  $10 = (_Mask_writeFormatInformation($width,$mask$06,$i$07,$level)|0);
  $11 = (($10) + ($9))|0;
  $12 = ($11*200)|0;
  $13 = (($12) + ($0))|0;
  $14 = (($13|0) / ($0|0))&-1;
  $15 = (($14|0) / 2)&-1;
  $16 = (($15) + -50)|0;
  $ispos = ($16|0)>(-1);
  $neg = (50 - ($15))|0;
  $17 = $ispos ? $16 : $neg;
  $18 = (($17|0) / 5)&-1;
  $19 = ($18*10)|0;
  if ($3) {
   $20 = (($mask$06) + ($$sum$i$i)|0);
   $demerit$07$us$i$i = 0;$p$05$us$i$i = $20;$y$06$us$i$i = 1;
   while(1) {
    $demerit$13$us$i$i = $demerit$07$us$i$i;$p$11$us$i$i = $p$05$us$i$i;$x$02$us$i$i = 1;
    while(1) {
     $23 = HEAP8[$p$11$us$i$i>>0]|0;
     $24 = (($p$11$us$i$i) + -1|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 & $23;
     $27 = (($p$11$us$i$i) + ($4)|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $26 & $28;
     $30 = (($p$11$us$i$i) + ($5)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $29 & $31;
     $33 = $25 | $23;
     $34 = $33 | $28;
     $35 = $34 | $31;
     $36 = $32&255;
     $37 = $35&255;
     $38 = $37 ^ 1;
     $39 = $38 | $36;
     $40 = $39 & 1;
     $41 = ($40|0)==(0);
     $42 = (($demerit$13$us$i$i) + 3)|0;
     $demerit$1$$us$i$i = $41 ? $demerit$13$us$i$i : $42;
     $43 = (($p$11$us$i$i) + 1|0);
     $44 = (($x$02$us$i$i) + 1)|0;
     $exitcond10$i$i = ($44|0)==($width|0);
     if ($exitcond10$i$i) {
      $demerit$1$$us$i$i$lcssa = $demerit$1$$us$i$i;
      break;
     } else {
      $demerit$13$us$i$i = $demerit$1$$us$i$i;$p$11$us$i$i = $43;$x$02$us$i$i = $44;
     }
    }
    $21 = (($p$05$us$i$i) + ($width)|0);
    $22 = (($y$06$us$i$i) + 1)|0;
    $exitcond11$i$i = ($22|0)==($width|0);
    if ($exitcond11$i$i) {
     $demerit$1$$us$i$i$lcssa$lcssa = $demerit$1$$us$i$i$lcssa;
     break;
    } else {
     $demerit$07$us$i$i = $demerit$1$$us$i$i$lcssa;$p$05$us$i$i = $21;$y$06$us$i$i = $22;
    }
   }
   $demerit$0$ph$i = $demerit$1$$us$i$i$lcssa$lcssa;
  } else {
   $demerit$0$ph$i = 0;
  }
  do {
   if ($6) {
    $demerit$014$i = $demerit$0$ph$i;$y$013$i = 0;
    while(1) {
     $64 = Math_imul($y$013$i, $width)|0;
     $65 = (($mask$06) + ($64)|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     if ($68) {
      $head$0$i$i = 0;
     } else {
      HEAP32[$runLength$i>>2] = -1;
      $head$0$i$i = 1;
     }
     $69 = (($runLength$i) + ($head$0$i$i<<2)|0);
     HEAP32[$69>>2] = 1;
     if ($3) {
      $72 = $66;$frame$pn$i$i = $65;$head$14$i$i = $head$0$i$i;$i$02$i$i = 2;
      while(1) {
       $p$05$i$i = (($frame$pn$i$i) + 1|0);
       $70 = HEAP8[$p$05$i$i>>0]|0;
       $71 = $70 ^ $72;
       $73 = $71 & 1;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $77 = (($runLength$i) + ($head$14$i$i<<2)|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = (($78) + 1)|0;
        HEAP32[$77>>2] = $79;
        $head$2$i$i = $head$14$i$i;
       } else {
        $75 = (($head$14$i$i) + 1)|0;
        $76 = (($runLength$i) + ($75<<2)|0);
        HEAP32[$76>>2] = 1;
        $head$2$i$i = $75;
       }
       $exitcond$i$i = ($i$02$i$i|0)==($width|0);
       if ($exitcond$i$i) {
        $head$2$i$i$lcssa = $head$2$i$i;
        break;
       }
       $$pre$i = HEAP8[$p$05$i$i>>0]|0;
       $phitmp22$i = (($i$02$i$i) + 1)|0;
       $72 = $$pre$i;$frame$pn$i$i = $p$05$i$i;$head$14$i$i = $head$2$i$i;$i$02$i$i = $phitmp22$i;
      }
      $head$1$lcssa$i$i = $head$2$i$i$lcssa;
     } else {
      $head$1$lcssa$i$i = $head$0$i$i;
     }
     $80 = (($head$1$lcssa$i$i) + 1)|0;
     $81 = (_Mask_calcN1N3($80,$runLength$i)|0);
     $82 = (($81) + ($demerit$014$i))|0;
     $83 = (($y$013$i) + 1)|0;
     $exitcond19$i = ($83|0)==($width|0);
     if ($exitcond19$i) {
      $$lcssa = $82;
      break;
     } else {
      $demerit$014$i = $82;$y$013$i = $83;
     }
    }
    if (!($3)) {
     $demerit$111$i = $$lcssa;$x$012$i = 0;
     while(1) {
      $84 = (($mask$06) + ($x$012$i)|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85 & 1;
      $87 = ($86<<24>>24)==(0);
      if ($87) {
       $head$0$i1$i = 0;
      } else {
       HEAP32[$runLength$i>>2] = -1;
       $head$0$i1$i = 1;
      }
      $88 = (($runLength$i) + ($head$0$i1$i<<2)|0);
      HEAP32[$88>>2] = 1;
      $89 = (($head$0$i1$i) + 1)|0;
      $90 = (_Mask_calcN1N3($89,$runLength$i)|0);
      $91 = (($90) + ($demerit$111$i))|0;
      $92 = (($x$012$i) + 1)|0;
      $exitcond$i = ($92|0)==($width|0);
      if ($exitcond$i) {
       $$lcssa11 = $91;
       break;
      } else {
       $demerit$111$i = $91;$x$012$i = $92;
      }
     }
     $demerit$1$lcssa$i = $$lcssa11;
     break;
    }
    $demerit$111$us$i = $$lcssa;$x$012$us$i = 0;
    while(1) {
     $45 = (($mask$06) + ($x$012$us$i)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     if ($48) {
      $head$0$i1$us$i = 0;
     } else {
      HEAP32[$runLength$i>>2] = -1;
      $head$0$i1$us$i = 1;
     }
     $63 = (($runLength$i) + ($head$0$i1$us$i<<2)|0);
     HEAP32[$63>>2] = 1;
     $51 = $46;$frame$pn$i2$us$i = $45;$head$14$i3$us$i = $head$0$i1$us$i;$i$02$i4$us$i = 2;
     while(1) {
      $p$05$i5$us$i = (($frame$pn$i2$us$i) + ($width)|0);
      $49 = HEAP8[$p$05$i5$us$i>>0]|0;
      $50 = $49 ^ $51;
      $52 = $50 & 1;
      $53 = ($52<<24>>24)==(0);
      if ($53) {
       $56 = (($runLength$i) + ($head$14$i3$us$i<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[$56>>2] = $58;
       $head$2$i7$us$i = $head$14$i3$us$i;
      } else {
       $54 = (($head$14$i3$us$i) + 1)|0;
       $55 = (($runLength$i) + ($54<<2)|0);
       HEAP32[$55>>2] = 1;
       $head$2$i7$us$i = $54;
      }
      $exitcond$i8$us$i = ($i$02$i4$us$i|0)==($width|0);
      if ($exitcond$i8$us$i) {
       $head$2$i7$us$i$lcssa = $head$2$i7$us$i;
       break;
      }
      $$pre21$i = HEAP8[$p$05$i5$us$i>>0]|0;
      $phitmp$i = (($i$02$i4$us$i) + 1)|0;
      $51 = $$pre21$i;$frame$pn$i2$us$i = $p$05$i5$us$i;$head$14$i3$us$i = $head$2$i7$us$i;$i$02$i4$us$i = $phitmp$i;
     }
     $59 = (($head$2$i7$us$i$lcssa) + 1)|0;
     $60 = (_Mask_calcN1N3($59,$runLength$i)|0);
     $61 = (($60) + ($demerit$111$us$i))|0;
     $62 = (($x$012$us$i) + 1)|0;
     $exitcond20$i = ($62|0)==($width|0);
     if ($exitcond20$i) {
      $$lcssa12 = $61;
      break;
     } else {
      $demerit$111$us$i = $61;$x$012$us$i = $62;
     }
    }
    $demerit$1$lcssa$i = $$lcssa12;
   } else {
    $demerit$1$lcssa$i = $demerit$0$ph$i;
   }
  } while(0);
  $93 = (($demerit$1$lcssa$i) + ($19))|0;
  $94 = ($93|0)<($minDemerit$05|0);
  if ($94) {
   _free($bestMask$04);
   $95 = (_malloc($0)|0);
   $96 = ($95|0)==(0|0);
   if ($96) {
    $bestMask$2 = $mask$06;$mask$2 = 0;
    break;
   } else {
    $bestMask$1 = $mask$06;$mask$1 = $95;$minDemerit$1 = $93;
   }
  } else {
   $bestMask$1 = $bestMask$04;$mask$1 = $mask$06;$minDemerit$1 = $minDemerit$05;
  }
  $97 = (($i$07) + 1)|0;
  $98 = ($97|0)<(8);
  if ($98) {
   $bestMask$04 = $bestMask$1;$i$07 = $97;$mask$06 = $mask$1;$minDemerit$05 = $minDemerit$1;
  } else {
   $bestMask$2 = $bestMask$1;$mask$2 = $mask$1;
   break;
  }
 }
 _free($mask$2);
 $$0 = $bestMask$2;
 STACKTOP = sp;return ($$0|0);
}
function _Mask_writeFormatInformation($width,$frame,$mask,$level) {
 $width = $width|0;
 $frame = $frame|0;
 $mask = $mask|0;
 $level = $level|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $blacks$06 = 0, $blacks$1 = 0, $blacks$1$lcssa = 0, $blacks$23 = 0, $blacks$3 = 0, $blacks$3$lcssa = 0, $exitcond = 0, $exitcond7 = 0, $format$04 = 0, $format$11 = 0, $format$11$be = 0, $i$05 = 0, $i$12 = 0, $i$12$be = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_QRspec_getFormatInfo($mask,$level)|0);
 $1 = ($width*9)|0;
 $2 = (($1) + -1)|0;
 $blacks$06 = 0;$format$04 = $0;$i$05 = 0;
 while(1) {
  $8 = $format$04 & 1;
  $9 = ($8|0)==(0);
  $10 = (($blacks$06) + 2)|0;
  $11 = $8&255;
  $12 = $11 | -124;
  $blacks$1 = $9 ? $blacks$06 : $10;
  $13 = (($2) - ($i$05))|0;
  $14 = (($frame) + ($13)|0);
  HEAP8[$14>>0] = $12;
  $15 = ($i$05|0)<(6);
  if ($15) {
   $16 = Math_imul($i$05, $width)|0;
   $17 = (($16) + 8)|0;
   $18 = (($frame) + ($17)|0);
   HEAP8[$18>>0] = $12;
   $$pre = (($i$05) + 1)|0;
   $$pre$phiZ2D = $$pre;
  } else {
   $19 = (($i$05) + 1)|0;
   $20 = Math_imul($19, $width)|0;
   $21 = (($20) + 8)|0;
   $22 = (($frame) + ($21)|0);
   HEAP8[$22>>0] = $12;
   $$pre$phiZ2D = $19;
  }
  $23 = $format$04 >>> 1;
  $exitcond7 = ($$pre$phiZ2D|0)==(8);
  if ($exitcond7) {
   $$lcssa = $23;$blacks$1$lcssa = $blacks$1;
   break;
  } else {
   $blacks$06 = $blacks$1;$format$04 = $23;$i$05 = $$pre$phiZ2D;
  }
 }
 $3 = (($width) + -7)|0;
 $4 = $width << 3;
 $5 = $4 | 7;
 $6 = (($frame) + ($5)|0);
 $7 = $4 | 6;
 $blacks$23 = $blacks$1$lcssa;$format$11 = $$lcssa;$i$12 = 0;
 while(1) {
  $24 = $format$11 & 1;
  $25 = ($24|0)==(0);
  $26 = (($blacks$23) + 2)|0;
  $27 = $24&255;
  $28 = $27 | -124;
  $blacks$3 = $25 ? $blacks$23 : $26;
  $29 = (($3) + ($i$12))|0;
  $30 = Math_imul($29, $width)|0;
  $31 = (($30) + 8)|0;
  $32 = (($frame) + ($31)|0);
  HEAP8[$32>>0] = $28;
  $33 = ($i$12|0)==(0);
  if ($33) {
   HEAP8[$6>>0] = $28;
   $34 = $format$11 >>> 1;
   $35 = (($i$12) + 1)|0;
   $format$11$be = $34;$i$12$be = $35;
  } else {
   $36 = (($7) - ($i$12))|0;
   $37 = (($frame) + ($36)|0);
   HEAP8[$37>>0] = $28;
   $38 = $format$11 >>> 1;
   $39 = (($i$12) + 1)|0;
   $exitcond = ($39|0)==(7);
   if ($exitcond) {
    $blacks$3$lcssa = $blacks$3;
    break;
   } else {
    $format$11$be = $38;$i$12$be = $39;
   }
  }
  $blacks$23 = $blacks$3;$format$11 = $format$11$be;$i$12 = $i$12$be;
 }
 return ($blacks$3$lcssa|0);
}
function _Mask_calcN1N3($length,$runLength) {
 $length = $length|0;
 $runLength = $runLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $demerit$0$lcssa = 0, $demerit$04 = 0, $demerit$1 = 0, $demerit$2 = 0, $demerit$2$lcssa = 0, $exitcond = 0, $i$05 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($length|0)>(0);
 if (!($0)) {
  $demerit$0$lcssa = 0;
  return ($demerit$0$lcssa|0);
 }
 $1 = (($length) + -2)|0;
 $demerit$04 = 0;$i$05 = 0;
 while(1) {
  $2 = (($runLength) + ($i$05<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(4);
  if ($4) {
   $5 = (($demerit$04) + -2)|0;
   $6 = (($5) + ($3))|0;
   $demerit$1 = $6;
  } else {
   $demerit$1 = $demerit$04;
  }
  $7 = $i$05 & 1;
  $8 = ($7|0)!=(0);
  $9 = ($i$05|0)>(2);
  $or$cond = $8 & $9;
  $10 = ($i$05|0)<($1|0);
  $or$cond3 = $or$cond & $10;
  $11 = (($3|0) % 3)&-1;
  $12 = ($11|0)==(0);
  $or$cond7 = $or$cond3 & $12;
  do {
   if ($or$cond7) {
    $13 = (($3|0) / 3)&-1;
    $14 = (($i$05) + -2)|0;
    $15 = (($runLength) + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($13|0);
    if ($17) {
     $18 = (($i$05) + -1)|0;
     $19 = (($runLength) + ($18<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($13|0);
     if ($21) {
      $22 = (($i$05) + 1)|0;
      $23 = (($runLength) + ($22<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==($13|0);
      if ($25) {
       $26 = (($i$05) + 2)|0;
       $27 = (($runLength) + ($26<<2)|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==($13|0);
       if ($29) {
        $30 = ($i$05|0)==(3);
        if (!($30)) {
         $31 = (($i$05) + -3)|0;
         $32 = (($runLength) + ($31<<2)|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = $13 << 2;
         $35 = ($33|0)<($34|0);
         if ($35) {
          $37 = (($i$05) + 4)|0;
          $38 = ($37|0)<($length|0);
          if ($38) {
           $39 = (($i$05) + 3)|0;
           $40 = (($runLength) + ($39<<2)|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)<($34|0);
           if ($42) {
            $demerit$2 = $demerit$1;
            break;
           }
          }
          $43 = (($demerit$1) + 40)|0;
          $demerit$2 = $43;
          break;
         }
        }
        $36 = (($demerit$1) + 40)|0;
        $demerit$2 = $36;
       } else {
        $demerit$2 = $demerit$1;
       }
      } else {
       $demerit$2 = $demerit$1;
      }
     } else {
      $demerit$2 = $demerit$1;
     }
    } else {
     $demerit$2 = $demerit$1;
    }
   } else {
    $demerit$2 = $demerit$1;
   }
  } while(0);
  $44 = (($i$05) + 1)|0;
  $exitcond = ($44|0)==($length|0);
  if ($exitcond) {
   $demerit$2$lcssa = $demerit$2;
   break;
  } else {
   $demerit$04 = $demerit$2;$i$05 = $44;
  }
 }
 $demerit$0$lcssa = $demerit$2$lcssa;
 return ($demerit$0$lcssa|0);
}
function _Mask_mask7($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = Math_imul($x$05, $y$011)|0;
    $6 = (($5|0) % 3)&-1;
    $7 = (($x$05) + ($y$011))|0;
    $8 = (($7) + ($6))|0;
    $9 = $8 & 1;
    $10 = $2 ^ 1;
    $11 = $10 ^ $9;
    $12 = $11&255;
    $storemerge = $12;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $13 = $storemerge&255;
   $14 = $13 & 1;
   $15 = (($14) + ($b$16))|0;
   $16 = (($$123) + 1|0);
   $17 = (($$14) + 1|0);
   $18 = (($x$05) + 1)|0;
   $exitcond = ($18|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $15;
    break;
   } else {
    $$123 = $16;$$14 = $17;$b$16 = $15;$x$05 = $18;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $19 = (($y$011) + 1)|0;
  $exitcond18 = ($19|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $19;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask6($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = Math_imul($x$05, $y$011)|0;
    $6 = (($5|0) % 3)&-1;
    $7 = (($6) + ($5))|0;
    $8 = $7 & 1;
    $9 = $2 ^ 1;
    $10 = $9 ^ $8;
    $11 = $10&255;
    $storemerge = $11;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $12 = $storemerge&255;
   $13 = $12 & 1;
   $14 = (($13) + ($b$16))|0;
   $15 = (($$123) + 1|0);
   $16 = (($$14) + 1|0);
   $17 = (($x$05) + 1)|0;
   $exitcond = ($17|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $14;
    break;
   } else {
    $$123 = $15;$$14 = $16;$b$16 = $14;$x$05 = $17;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $18 = (($y$011) + 1)|0;
  $exitcond18 = ($18|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $18;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask5($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = Math_imul($x$05, $y$011)|0;
    $6 = $5 & 1;
    $7 = (($5|0) % 3)&-1;
    $8 = (0 - ($7))|0;
    $9 = ($6|0)==($8|0);
    $10 = $9&1;
    $11 = $10 ^ $2;
    $12 = $11&255;
    $storemerge = $12;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $13 = $storemerge&255;
   $14 = $13 & 1;
   $15 = (($14) + ($b$16))|0;
   $16 = (($$123) + 1|0);
   $17 = (($$14) + 1|0);
   $18 = (($x$05) + 1)|0;
   $exitcond = ($18|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $15;
    break;
   } else {
    $$123 = $16;$$14 = $17;$b$16 = $15;$x$05 = $18;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $19 = (($y$011) + 1)|0;
  $exitcond18 = ($19|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $19;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask4($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $1 = (($y$011|0) / 2)&-1;
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $2 = HEAP8[$$123>>0]|0;
   $3 = $2&255;
   $4 = $3 & 128;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (($x$05|0) / 3)&-1;
    $7 = (($6) + ($1))|0;
    $8 = $7 & 1;
    $9 = $3 ^ 1;
    $10 = $9 ^ $8;
    $11 = $10&255;
    $storemerge = $11;
   } else {
    $storemerge = $2;
   }
   HEAP8[$$14>>0] = $storemerge;
   $12 = $storemerge&255;
   $13 = $12 & 1;
   $14 = (($13) + ($b$16))|0;
   $15 = (($$123) + 1|0);
   $16 = (($$14) + 1|0);
   $17 = (($x$05) + 1)|0;
   $exitcond = ($17|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $14;
    break;
   } else {
    $$123 = $15;$$14 = $16;$b$16 = $14;$x$05 = $17;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $18 = (($y$011) + 1)|0;
  $exitcond18 = ($18|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $18;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask3($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (($x$05) + ($y$011))|0;
    $6 = (($5|0) % 3)&-1;
    $7 = ($6|0)==(0);
    $8 = $7&1;
    $9 = $8 ^ $2;
    $10 = $9&255;
    $storemerge = $10;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $11 = $storemerge&255;
   $12 = $11 & 1;
   $13 = (($12) + ($b$16))|0;
   $14 = (($$123) + 1|0);
   $15 = (($$14) + 1|0);
   $16 = (($x$05) + 1)|0;
   $exitcond = ($16|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $13;
    break;
   } else {
    $$123 = $14;$$14 = $15;$b$16 = $13;$x$05 = $16;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $17 = (($y$011) + 1)|0;
  $exitcond18 = ($17|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $17;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask2($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (($x$05|0) % 3)&-1;
    $6 = ($5|0)==(0);
    $7 = $6&1;
    $8 = $7 ^ $2;
    $9 = $8&255;
    $storemerge = $9;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $10 = $storemerge&255;
   $11 = $10 & 1;
   $12 = (($11) + ($b$16))|0;
   $13 = (($$123) + 1|0);
   $14 = (($$14) + 1|0);
   $15 = (($x$05) + 1)|0;
   $exitcond = ($15|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $12;
    break;
   } else {
    $$123 = $13;$$14 = $14;$b$16 = $12;$x$05 = $15;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $16 = (($y$011) + 1)|0;
  $exitcond18 = ($16|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $16;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask1($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010 = 0, $$019 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012 = 0, $b$16 = 0, $exitcond = 0, $exitcond18 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge = 0, $x$05 = 0, $y$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010 = $d;$$019 = $s;$b$012 = 0;$y$011 = 0;
 while(1) {
  $1 = $y$011 & 1;
  $2 = $1 ^ 1;
  $scevgep = (($$010) + ($width)|0);
  $$123 = $$019;$$14 = $$010;$b$16 = $b$012;$x$05 = 0;
  while(1) {
   $3 = HEAP8[$$123>>0]|0;
   $4 = $3&255;
   $5 = $4 & 128;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = $2 ^ $4;
    $8 = $7&255;
    $storemerge = $8;
   } else {
    $storemerge = $3;
   }
   HEAP8[$$14>>0] = $storemerge;
   $9 = $storemerge&255;
   $10 = $9 & 1;
   $11 = (($10) + ($b$16))|0;
   $12 = (($$123) + 1|0);
   $13 = (($$14) + 1|0);
   $14 = (($x$05) + 1)|0;
   $exitcond = ($14|0)==($width|0);
   if ($exitcond) {
    $$lcssa = $11;
    break;
   } else {
    $$123 = $12;$$14 = $13;$b$16 = $11;$x$05 = $14;
   }
  }
  $scevgep17 = (($$019) + ($width)|0);
  $15 = (($y$011) + 1)|0;
  $exitcond18 = ($15|0)==($width|0);
  if ($exitcond18) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010 = $scevgep;$$019 = $scevgep17;$b$012 = $$lcssa;$y$011 = $15;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _Mask_mask0($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$010$us = 0, $$019$us = 0, $$123$us = 0, $$14$us = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$012$us = 0, $b$16$us = 0, $exitcond18 = 0, $exitcond19 = 0, $scevgep = 0, $scevgep17 = 0, $storemerge$us = 0, $x$05$us = 0, $y$011$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  $b$0$lcssa = 0;
  return ($b$0$lcssa|0);
 }
 $$010$us = $d;$$019$us = $s;$b$012$us = 0;$y$011$us = 0;
 while(1) {
  $scevgep = (($$010$us) + ($width)|0);
  $$123$us = $$019$us;$$14$us = $$010$us;$b$16$us = $b$012$us;$x$05$us = 0;
  while(1) {
   $2 = HEAP8[$$123$us>>0]|0;
   $3 = $2&255;
   $4 = $3 & 128;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (($x$05$us) + ($y$011$us))|0;
    $7 = $6 & 1;
    $8 = $7 ^ 1;
    $9 = $8 ^ $3;
    $10 = $9&255;
    $storemerge$us = $10;
   } else {
    $storemerge$us = $2;
   }
   HEAP8[$$14$us>>0] = $storemerge$us;
   $11 = $storemerge$us&255;
   $12 = $11 & 1;
   $13 = (($12) + ($b$16$us))|0;
   $14 = (($$123$us) + 1|0);
   $15 = (($$14$us) + 1|0);
   $16 = (($x$05$us) + 1)|0;
   $exitcond18 = ($16|0)==($width|0);
   if ($exitcond18) {
    $$lcssa = $13;
    break;
   } else {
    $$123$us = $14;$$14$us = $15;$b$16$us = $13;$x$05$us = $16;
   }
  }
  $scevgep17 = (($$019$us) + ($width)|0);
  $1 = (($y$011$us) + 1)|0;
  $exitcond19 = ($1|0)==($width|0);
  if ($exitcond19) {
   $$lcssa$lcssa = $$lcssa;
   break;
  } else {
   $$010$us = $scevgep;$$019$us = $scevgep17;$b$012$us = $$lcssa;$y$011$us = $1;
  }
 }
 $b$0$lcssa = $$lcssa$lcssa;
 return ($b$0$lcssa|0);
}
function _MQRspec_getDataLengthBit($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (16024 + (($version*20)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (((16024 + (($version*20)|0)|0) + ($level<<2)|0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = Math_imul($2, $2)|0;
 $7 = (($6) + -64)|0;
 $8 = $4 << 3;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 return ($$0|0);
}
function _MQRspec_getDataLength($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (16024 + (($version*20)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (((16024 + (($version*20)|0)|0) + ($level<<2)|0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $6 = Math_imul($2, $2)|0;
 $7 = $4 << 3;
 $8 = (($6) + -60)|0;
 $phitmp = (($8) - ($7))|0;
 $phitmp1 = (($phitmp|0) / 8)&-1;
 $$0$i = $phitmp1;
 return ($$0$i|0);
}
function _MQRspec_getECCLength($version,$level) {
 $version = $version|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((16024 + (($version*20)|0)|0) + ($level<<2)|0) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _MQRspec_getWidth($version) {
 $version = $version|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (16024 + (($version*20)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _MQRspec_lengthIndicator($mode,$version) {
 $mode = $mode|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($version) + -1)|0;
 $1 = ((16128 + ($mode<<4)|0) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _MQRspec_getFormatInfo($mask,$version,$level) {
 $mask = $mask|0;
 $version = $version|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond5 = 0, $version$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $version$off = (($version) + -1)|0;
 $0 = $version$off | $mask;
 $1 = ($0>>>0)>(3);
 $2 = ($level|0)==(3);
 $or$cond5 = $1 | $2;
 if ($or$cond5) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((16192 + (($version*12)|0)|0) + ($level<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((16256 + ($mask<<5)|0) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $$0 = $7;
 return ($$0|0);
}
function _MQRspec_newFrame($version) {
 $version = $version|0;
 var $$0 = 0, $$0$i = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum1314$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i$i = 0, $$sum19$i = 0, $$sum19$i$i = 0, $$sum20$i$i = 0, $$sum21$i = 0;
 var $$sum21$i$i = 0, $$sum22$i = 0, $$sum22$i$i = 0, $$sum23$i = 0, $$sum23$i$i = 0, $$sum24$i = 0, $$sum24$i$i = 0, $$sum25$i = 0, $$sum25$i$i = 0, $$sum26$i = 0, $$sum26$i$i = 0, $$sum27$i = 0, $$sum27$i$i = 0, $$sum2829$i$i = 0, $$sum3031$i$i = 0, $$sum3233$i$i = 0, $$sum34$i$i = 0, $$sum35$i$i = 0, $$sum36$i$i = 0, $$sum37$i$i = 0;
 var $$sum38$i$i = 0, $$sum39$i$i = 0, $$sum40$i$i = 0, $$sum4142$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i = 0, $p$22$i = 0, $q$03$i = 0, $version$off = 0, $x$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $version$off = (($version) + -1)|0;
 $0 = ($version$off>>>0)>(3);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 (_pthread_mutex_lock((16384|0))|0);
 $1 = (16408 + ($version<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (16024 + (($version*20)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = Math_imul($5, $5)|0;
  $7 = (_malloc($6)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0$i = 0;
  } else {
   _memset(($7|0),0,($6|0))|0;
   $9 = (($7) + ($5)|0);
   ;HEAP8[$7+0>>0]=193|0;HEAP8[$7+1>>0]=193|0;HEAP8[$7+2>>0]=193|0;HEAP8[$7+3>>0]=193|0;HEAP8[$7+4>>0]=193|0;HEAP8[$7+5>>0]=193|0;HEAP8[$7+6>>0]=193|0;
   HEAP8[$9>>0] = -63;
   $$sum$i$i = (($5) + 1)|0;
   $10 = (($7) + ($$sum$i$i)|0);
   $$sum11$i$i = (($5) + 6)|0;
   $11 = (($7) + ($$sum11$i$i)|0);
   ;HEAP8[$10+0>>0]=192|0;HEAP8[$10+1>>0]=192|0;HEAP8[$10+2>>0]=192|0;HEAP8[$10+3>>0]=192|0;HEAP8[$10+4>>0]=192|0;
   HEAP8[$11>>0] = -63;
   $$sum12$i$i = $5 << 1;
   $12 = (($7) + ($$sum12$i$i)|0);
   HEAP8[$12>>0] = -63;
   $$sum1314$i$i = $$sum12$i$i | 1;
   $13 = (($7) + ($$sum1314$i$i)|0);
   HEAP8[$13>>0] = -64;
   $$sum15$i$i = (($$sum12$i$i) + 2)|0;
   $14 = (($7) + ($$sum15$i$i)|0);
   HEAP8[$14>>0] = -63;
   $$sum16$i$i = (($$sum12$i$i) + 3)|0;
   $15 = (($7) + ($$sum16$i$i)|0);
   HEAP8[$15>>0] = -63;
   $$sum17$i$i = (($$sum12$i$i) + 4)|0;
   $16 = (($7) + ($$sum17$i$i)|0);
   HEAP8[$16>>0] = -63;
   $$sum18$i$i = (($$sum12$i$i) + 5)|0;
   $17 = (($7) + ($$sum18$i$i)|0);
   HEAP8[$17>>0] = -64;
   $$sum19$i$i = (($$sum12$i$i) + 6)|0;
   $18 = (($7) + ($$sum19$i$i)|0);
   HEAP8[$18>>0] = -63;
   $$sum20$i$i = ($5*3)|0;
   $19 = (($7) + ($$sum20$i$i)|0);
   HEAP8[$19>>0] = -63;
   $$sum21$i$i = (($$sum20$i$i) + 1)|0;
   $20 = (($7) + ($$sum21$i$i)|0);
   HEAP8[$20>>0] = -64;
   $$sum22$i$i = (($$sum20$i$i) + 2)|0;
   $21 = (($7) + ($$sum22$i$i)|0);
   HEAP8[$21>>0] = -63;
   $$sum23$i$i = (($$sum20$i$i) + 3)|0;
   $22 = (($7) + ($$sum23$i$i)|0);
   HEAP8[$22>>0] = -63;
   $$sum24$i$i = (($$sum20$i$i) + 4)|0;
   $23 = (($7) + ($$sum24$i$i)|0);
   HEAP8[$23>>0] = -63;
   $$sum25$i$i = (($$sum20$i$i) + 5)|0;
   $24 = (($7) + ($$sum25$i$i)|0);
   HEAP8[$24>>0] = -64;
   $$sum26$i$i = (($$sum20$i$i) + 6)|0;
   $25 = (($7) + ($$sum26$i$i)|0);
   HEAP8[$25>>0] = -63;
   $$sum27$i$i = $5 << 2;
   $26 = (($7) + ($$sum27$i$i)|0);
   HEAP8[$26>>0] = -63;
   $$sum2829$i$i = $$sum27$i$i | 1;
   $27 = (($7) + ($$sum2829$i$i)|0);
   HEAP8[$27>>0] = -64;
   $$sum3031$i$i = $$sum27$i$i | 2;
   $28 = (($7) + ($$sum3031$i$i)|0);
   HEAP8[$28>>0] = -63;
   $$sum3233$i$i = $$sum27$i$i | 3;
   $29 = (($7) + ($$sum3233$i$i)|0);
   HEAP8[$29>>0] = -63;
   $$sum34$i$i = (($$sum27$i$i) + 4)|0;
   $30 = (($7) + ($$sum34$i$i)|0);
   HEAP8[$30>>0] = -63;
   $$sum35$i$i = (($$sum27$i$i) + 5)|0;
   $31 = (($7) + ($$sum35$i$i)|0);
   HEAP8[$31>>0] = -64;
   $$sum36$i$i = (($$sum27$i$i) + 6)|0;
   $32 = (($7) + ($$sum36$i$i)|0);
   HEAP8[$32>>0] = -63;
   $$sum37$i$i = ($5*5)|0;
   $33 = (($7) + ($$sum37$i$i)|0);
   HEAP8[$33>>0] = -63;
   $$sum38$i$i = (($$sum37$i$i) + 1)|0;
   $34 = (($7) + ($$sum38$i$i)|0);
   $$sum39$i$i = (($$sum37$i$i) + 6)|0;
   $35 = (($7) + ($$sum39$i$i)|0);
   ;HEAP8[$34+0>>0]=192|0;HEAP8[$34+1>>0]=192|0;HEAP8[$34+2>>0]=192|0;HEAP8[$34+3>>0]=192|0;HEAP8[$34+4>>0]=192|0;
   HEAP8[$35>>0] = -63;
   $$sum40$i$i = ($5*6)|0;
   $36 = (($7) + ($$sum40$i$i)|0);
   HEAP8[$36>>0] = -63;
   $$sum4142$i$i = $$sum40$i$i | 1;
   $37 = (($7) + ($$sum4142$i$i)|0);
   ;HEAP8[$37+0>>0]=193|0;HEAP8[$37+1>>0]=193|0;HEAP8[$37+2>>0]=193|0;HEAP8[$37+3>>0]=193|0;HEAP8[$37+4>>0]=193|0;HEAP8[$37+5>>0]=193|0;
   $38 = (($7) + 7|0);
   HEAP8[$38>>0] = -64;
   $$sum11$i = (($5) + 7)|0;
   $39 = (($7) + ($$sum11$i)|0);
   HEAP8[$39>>0] = -64;
   $$sum13$i = (($$sum12$i$i) + 7)|0;
   $40 = (($7) + ($$sum13$i)|0);
   HEAP8[$40>>0] = -64;
   $$sum15$i = (($$sum20$i$i) + 7)|0;
   $41 = (($7) + ($$sum15$i)|0);
   HEAP8[$41>>0] = -64;
   $$sum17$i = (($$sum27$i$i) + 7)|0;
   $42 = (($7) + ($$sum17$i)|0);
   HEAP8[$42>>0] = -64;
   $$sum19$i = (($$sum37$i$i) + 7)|0;
   $43 = (($7) + ($$sum19$i)|0);
   HEAP8[$43>>0] = -64;
   $$sum21$i = (($$sum40$i$i) + 7)|0;
   $44 = (($7) + ($$sum21$i)|0);
   HEAP8[$44>>0] = -64;
   $45 = ($5*7)|0;
   $46 = (($7) + ($45)|0);
   $47 = $46;
   $48 = $47;
   HEAP8[$48>>0]=-1061109568&255;HEAP8[$48+1>>0]=(-1061109568>>8)&255;HEAP8[$48+2>>0]=(-1061109568>>16)&255;HEAP8[$48+3>>0]=-1061109568>>24;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP8[$50>>0]=-1061109568&255;HEAP8[$50+1>>0]=(-1061109568>>8)&255;HEAP8[$50+2>>0]=(-1061109568>>16)&255;HEAP8[$50+3>>0]=-1061109568>>24;
   $51 = $5 << 3;
   $$sum1$i = $51 | 1;
   $52 = (($7) + ($$sum1$i)|0);
   $53 = $52;
   $54 = $53;
   HEAP8[$54>>0]=-2071690108&255;HEAP8[$54+1>>0]=(-2071690108>>8)&255;HEAP8[$54+2>>0]=(-2071690108>>16)&255;HEAP8[$54+3>>0]=-2071690108>>24;
   $55 = (($53) + 4)|0;
   $56 = $55;
   HEAP8[$56>>0]=-2071690108&255;HEAP8[$56+1>>0]=(-2071690108>>8)&255;HEAP8[$56+2>>0]=(-2071690108>>16)&255;HEAP8[$56+3>>0]=-2071690108>>24;
   $$sum$i = (($5) + 8)|0;
   $57 = (($7) + ($$sum$i)|0);
   HEAP8[$57>>0] = -124;
   $$sum22$i = (($$sum$i) + ($5))|0;
   $58 = (($7) + ($$sum22$i)|0);
   HEAP8[$58>>0] = -124;
   $$sum23$i = (($$sum22$i) + ($5))|0;
   $59 = (($7) + ($$sum23$i)|0);
   HEAP8[$59>>0] = -124;
   $$sum24$i = (($$sum23$i) + ($5))|0;
   $60 = (($7) + ($$sum24$i)|0);
   HEAP8[$60>>0] = -124;
   $$sum25$i = (($$sum24$i) + ($5))|0;
   $61 = (($7) + ($$sum25$i)|0);
   HEAP8[$61>>0] = -124;
   $$sum26$i = (($$sum25$i) + ($5))|0;
   $62 = (($7) + ($$sum26$i)|0);
   HEAP8[$62>>0] = -124;
   $$sum27$i = (($$sum26$i) + ($5))|0;
   $63 = (($7) + ($$sum27$i)|0);
   HEAP8[$63>>0] = -124;
   $64 = (($5) + -7)|0;
   $65 = ($64|0)>(1);
   if ($65) {
    $66 = (($7) + ($51)|0);
    $67 = (($7) + 8|0);
    $p$22$i = $67;$q$03$i = $66;$x$04$i = 1;
    while(1) {
     $68 = $x$04$i & 1;
     $69 = $68 | 144;
     $70 = $69&255;
     HEAP8[$p$22$i>>0] = $70;
     HEAP8[$q$03$i>>0] = $70;
     $71 = (($p$22$i) + 1|0);
     $72 = (($q$03$i) + ($5)|0);
     $73 = (($x$04$i) + 1)|0;
     $exitcond$i = ($73|0)==($64|0);
     if ($exitcond$i) {
      break;
     } else {
      $p$22$i = $71;$q$03$i = $72;$x$04$i = $73;
     }
    }
    $$0$i = $7;
   } else {
    $$0$i = $7;
   }
  }
  HEAP32[$1>>2] = $$0$i;
 }
 (_pthread_mutex_unlock((16384|0))|0);
 $74 = HEAP32[$1>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $$0 = 0;
  return ($$0|0);
 }
 $76 = (16024 + (($version*20)|0)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = Math_imul($77, $77)|0;
 $79 = (_malloc($78)|0);
 $80 = ($79|0)==(0|0);
 if ($80) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($79|0),($74|0),($78|0))|0;
 $$0 = $79;
 return ($$0|0);
}
function _MMask_mask($version,$frame,$level) {
 $version = $version|0;
 $frame = $frame|0;
 $level = $level|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa9 = 0, $$sum$i = 0, $$sum1$i$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bestMask$04$us = 0;
 var $bestMask$1$us = 0, $bestMask$2 = 0, $bestMask$2$ph = 0, $exitcond$i$us = 0, $exitcond12$i$us = 0, $i$02$us = 0, $mask$03$us = 0, $mask$1$us = 0, $mask$2 = 0, $mask$2$ph = 0, $maxScore$05$us = 0, $maxScore$1$us = 0, $p$03$i$us = 0, $sum1$06$i$us = 0, $sum2$04$i$us = 0, $x$05$i$us = 0, $y$02$i$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_MQRspec_getWidth($version)|0);
 $1 = Math_imul($0, $0)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (($0) + -1)|0;
 $5 = Math_imul($4, $0)|0;
 $6 = ($0|0)>(1);
 $7 = $0 << 1;
 $$sum$i = (($7) + -1)|0;
 if ($6) {
  $bestMask$04$us = 0;$i$02$us = 0;$mask$03$us = $2;$maxScore$05$us = 0;
  while(1) {
   $32 = (16432 + ($i$02$us<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_viii[$33 & 63]($0,$frame,$mask$03$us);
   _MMask_writeFormatInformation($version,$0,$mask$03$us,$i$02$us,$level);
   $sum1$06$i$us = 0;$x$05$i$us = 1;
   while(1) {
    $$sum1$i$us = (($x$05$i$us) + ($5))|0;
    $8 = (($mask$03$us) + ($$sum1$i$us)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = $10 & 1;
    $12 = (($11) + ($sum1$06$i$us))|0;
    $13 = (($x$05$i$us) + 1)|0;
    $exitcond12$i$us = ($13|0)==($0|0);
    if ($exitcond12$i$us) {
     $$lcssa = $12;
     break;
    } else {
     $sum1$06$i$us = $12;$x$05$i$us = $13;
    }
   }
   $14 = (($mask$03$us) + ($$sum$i)|0);
   $p$03$i$us = $14;$sum2$04$i$us = 0;$y$02$i$us = 1;
   while(1) {
    $15 = HEAP8[$p$03$i$us>>0]|0;
    $16 = $15&255;
    $17 = $16 & 1;
    $18 = (($17) + ($sum2$04$i$us))|0;
    $19 = (($p$03$i$us) + ($0)|0);
    $20 = (($y$02$i$us) + 1)|0;
    $exitcond$i$us = ($20|0)==($0|0);
    if ($exitcond$i$us) {
     $$lcssa9 = $18;
     break;
    } else {
     $p$03$i$us = $19;$sum2$04$i$us = $18;$y$02$i$us = $20;
    }
   }
   $21 = ($$lcssa|0)>($$lcssa9|0);
   if ($21) {
    $24 = $$lcssa9 << 4;
    $25 = (($24) + ($$lcssa))|0;
    $26 = $25;
   } else {
    $22 = $$lcssa << 4;
    $23 = (($22) + ($$lcssa9))|0;
    $26 = $23;
   }
   $27 = ($26|0)>($maxScore$05$us|0);
   if ($27) {
    _free($bestMask$04$us);
    $28 = (_malloc($1)|0);
    $29 = ($28|0)==(0|0);
    if ($29) {
     $bestMask$2$ph = $mask$03$us;$mask$2$ph = 0;
     break;
    } else {
     $bestMask$1$us = $mask$03$us;$mask$1$us = $28;$maxScore$1$us = $26;
    }
   } else {
    $bestMask$1$us = $bestMask$04$us;$mask$1$us = $mask$03$us;$maxScore$1$us = $maxScore$05$us;
   }
   $30 = (($i$02$us) + 1)|0;
   $31 = ($30|0)<(4);
   if ($31) {
    $bestMask$04$us = $bestMask$1$us;$i$02$us = $30;$mask$03$us = $mask$1$us;$maxScore$05$us = $maxScore$1$us;
   } else {
    $bestMask$2$ph = $bestMask$1$us;$mask$2$ph = $mask$1$us;
    break;
   }
  }
  $bestMask$2 = $bestMask$2$ph;$mask$2 = $mask$2$ph;
 } else {
  _Mask_mask0466($0,$frame,$2);
  _MMask_writeFormatInformation($version,$0,$2,0,$level);
  _Mask_mask1467($0,$frame,$2);
  _MMask_writeFormatInformation($version,$0,$2,1,$level);
  _Mask_mask2468($0,$frame,$2);
  _MMask_writeFormatInformation($version,$0,$2,2,$level);
  _Mask_mask3469($0,$frame,$2);
  _MMask_writeFormatInformation($version,$0,$2,3,$level);
  $bestMask$2 = 0;$mask$2 = $2;
 }
 _free($mask$2);
 $$0 = $bestMask$2;
 return ($$0|0);
}
function _MMask_writeFormatInformation($version,$width,$frame,$mask,$level) {
 $version = $version|0;
 $width = $width|0;
 $frame = $frame|0;
 $mask = $mask|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_MQRspec_getFormatInfo($mask,$version,$level)|0);
 $1 = $0 & 1;
 $2 = $1 | 132;
 $3 = $2&255;
 $4 = (($width) + 8)|0;
 $5 = (($frame) + ($4)|0);
 HEAP8[$5>>0] = $3;
 $6 = $0 >>> 1;
 $7 = $6 & 1;
 $8 = $7 | 132;
 $9 = $8&255;
 $10 = $width << 1;
 $11 = (($10) + 8)|0;
 $12 = (($frame) + ($11)|0);
 HEAP8[$12>>0] = $9;
 $13 = $0 >>> 2;
 $14 = $13 & 1;
 $15 = $14 | 132;
 $16 = $15&255;
 $17 = ($width*3)|0;
 $18 = (($17) + 8)|0;
 $19 = (($frame) + ($18)|0);
 HEAP8[$19>>0] = $16;
 $20 = $0 >>> 3;
 $21 = $20 & 1;
 $22 = $21 | 132;
 $23 = $22&255;
 $24 = $width << 2;
 $25 = (($24) + 8)|0;
 $26 = (($frame) + ($25)|0);
 HEAP8[$26>>0] = $23;
 $27 = $0 >>> 4;
 $28 = $27 & 1;
 $29 = $28 | 132;
 $30 = $29&255;
 $31 = ($width*5)|0;
 $32 = (($31) + 8)|0;
 $33 = (($frame) + ($32)|0);
 HEAP8[$33>>0] = $30;
 $34 = $0 >>> 5;
 $35 = $34 & 1;
 $36 = $35 | 132;
 $37 = $36&255;
 $38 = ($width*6)|0;
 $39 = (($38) + 8)|0;
 $40 = (($frame) + ($39)|0);
 HEAP8[$40>>0] = $37;
 $41 = $0 >>> 6;
 $42 = $41 & 1;
 $43 = $42 | 132;
 $44 = $43&255;
 $45 = ($width*7)|0;
 $46 = (($45) + 8)|0;
 $47 = (($frame) + ($46)|0);
 HEAP8[$47>>0] = $44;
 $48 = $0 >>> 7;
 $49 = $48 & 1;
 $50 = $49 | 132;
 $51 = $50&255;
 $52 = $width << 3;
 $53 = (($52) + 8)|0;
 $54 = (($frame) + ($53)|0);
 HEAP8[$54>>0] = $51;
 $55 = $0 >>> 8;
 $56 = $width << 3;
 $57 = $56 | 7;
 $58 = $55 & 1;
 $59 = $58 | 132;
 $60 = $59&255;
 $61 = (($frame) + ($57)|0);
 HEAP8[$61>>0] = $60;
 $62 = $0 >>> 9;
 $63 = $62 & 1;
 $64 = $63 | 132;
 $65 = $64&255;
 $66 = (($57) + -1)|0;
 $67 = (($frame) + ($66)|0);
 HEAP8[$67>>0] = $65;
 $68 = $0 >>> 10;
 $69 = $68 & 1;
 $70 = $69 | 132;
 $71 = $70&255;
 $72 = (($57) + -2)|0;
 $73 = (($frame) + ($72)|0);
 HEAP8[$73>>0] = $71;
 $74 = $0 >>> 11;
 $75 = $74 & 1;
 $76 = $75 | 132;
 $77 = $76&255;
 $78 = (($57) + -3)|0;
 $79 = (($frame) + ($78)|0);
 HEAP8[$79>>0] = $77;
 $80 = $0 >>> 12;
 $81 = $80 & 1;
 $82 = $81 | 132;
 $83 = $82&255;
 $84 = (($57) + -4)|0;
 $85 = (($frame) + ($84)|0);
 HEAP8[$85>>0] = $83;
 $86 = $0 >>> 13;
 $87 = $86 & 1;
 $88 = $87 | 132;
 $89 = $88&255;
 $90 = (($57) + -5)|0;
 $91 = (($frame) + ($90)|0);
 HEAP8[$91>>0] = $89;
 $92 = $0 >>> 14;
 $93 = $92 & 1;
 $94 = $93 | 132;
 $95 = $94&255;
 $96 = (($57) + -6)|0;
 $97 = (($frame) + ($96)|0);
 HEAP8[$97>>0] = $95;
 return;
}
function _Mask_mask0466($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$017$us = 0, $$08$us = 0, $$123$us = 0, $$14$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond13 = 0, $exitcond14 = 0, $scevgep = 0;
 var $scevgep12 = 0, $storemerge$us = 0, $x$05$us = 0, $y$09$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  return;
 }
 $$017$us = $s;$$08$us = $d;$y$09$us = 0;
 while(1) {
  $12 = $y$09$us & 1;
  $7 = $12 ^ 1;
  $scevgep = (($$08$us) + ($width)|0);
  $$123$us = $$017$us;$$14$us = $$08$us;$x$05$us = 0;
  while(1) {
   $2 = HEAP8[$$123$us>>0]|0;
   $3 = $2&255;
   $4 = $3 & 128;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = $7 ^ $3;
    $8 = $6&255;
    $storemerge$us = $8;
   } else {
    $storemerge$us = $2;
   }
   HEAP8[$$14$us>>0] = $storemerge$us;
   $9 = (($$123$us) + 1|0);
   $10 = (($$14$us) + 1|0);
   $11 = (($x$05$us) + 1)|0;
   $exitcond13 = ($11|0)==($width|0);
   if ($exitcond13) {
    break;
   } else {
    $$123$us = $9;$$14$us = $10;$x$05$us = $11;
   }
  }
  $scevgep12 = (($$017$us) + ($width)|0);
  $1 = (($y$09$us) + 1)|0;
  $exitcond14 = ($1|0)==($width|0);
  if ($exitcond14) {
   break;
  } else {
   $$017$us = $scevgep12;$$08$us = $scevgep;$y$09$us = $1;
  }
 }
 return;
}
function _Mask_mask1467($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$017$us = 0, $$08$us = 0, $$123$us = 0, $$14$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond13 = 0, $exitcond14 = 0, $scevgep = 0, $scevgep12 = 0, $storemerge$us = 0, $x$05$us = 0, $y$09$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  return;
 }
 $$017$us = $s;$$08$us = $d;$y$09$us = 0;
 while(1) {
  $8 = (($y$09$us|0) / 2)&-1;
  $scevgep = (($$08$us) + ($width)|0);
  $$123$us = $$017$us;$$14$us = $$08$us;$x$05$us = 0;
  while(1) {
   $2 = HEAP8[$$123$us>>0]|0;
   $3 = $2&255;
   $4 = $3 & 128;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (($x$05$us|0) / 3)&-1;
    $7 = (($6) + ($8))|0;
    $9 = $7 & 1;
    $10 = $3 ^ 1;
    $11 = $10 ^ $9;
    $12 = $11&255;
    $storemerge$us = $12;
   } else {
    $storemerge$us = $2;
   }
   HEAP8[$$14$us>>0] = $storemerge$us;
   $13 = (($$123$us) + 1|0);
   $14 = (($$14$us) + 1|0);
   $15 = (($x$05$us) + 1)|0;
   $exitcond13 = ($15|0)==($width|0);
   if ($exitcond13) {
    break;
   } else {
    $$123$us = $13;$$14$us = $14;$x$05$us = $15;
   }
  }
  $scevgep12 = (($$017$us) + ($width)|0);
  $1 = (($y$09$us) + 1)|0;
  $exitcond14 = ($1|0)==($width|0);
  if ($exitcond14) {
   break;
  } else {
   $$017$us = $scevgep12;$$08$us = $scevgep;$y$09$us = $1;
  }
 }
 return;
}
function _Mask_mask2468($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$017 = 0, $$08 = 0, $$123 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond13 = 0, $scevgep = 0, $scevgep12 = 0, $storemerge = 0, $x$05 = 0, $y$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  return;
 }
 $$017 = $s;$$08 = $d;$y$09 = 0;
 while(1) {
  $scevgep = (($$08) + ($width)|0);
  $$123 = $$017;$$14 = $$08;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = Math_imul($x$05, $y$09)|0;
    $6 = (($5|0) % 3)&-1;
    $7 = (($6) + ($5))|0;
    $8 = $7 & 1;
    $9 = $2 ^ 1;
    $10 = $9 ^ $8;
    $11 = $10&255;
    $storemerge = $11;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $12 = (($$123) + 1|0);
   $13 = (($$14) + 1|0);
   $14 = (($x$05) + 1)|0;
   $exitcond = ($14|0)==($width|0);
   if ($exitcond) {
    break;
   } else {
    $$123 = $12;$$14 = $13;$x$05 = $14;
   }
  }
  $scevgep12 = (($$017) + ($width)|0);
  $15 = (($y$09) + 1)|0;
  $exitcond13 = ($15|0)==($width|0);
  if ($exitcond13) {
   break;
  } else {
   $$017 = $scevgep12;$$08 = $scevgep;$y$09 = $15;
  }
 }
 return;
}
function _Mask_mask3469($width,$s,$d) {
 $width = $width|0;
 $s = $s|0;
 $d = $d|0;
 var $$017 = 0, $$08 = 0, $$123 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond13 = 0, $scevgep = 0, $scevgep12 = 0, $storemerge = 0, $x$05 = 0, $y$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)>(0);
 if (!($0)) {
  return;
 }
 $$017 = $s;$$08 = $d;$y$09 = 0;
 while(1) {
  $scevgep = (($$08) + ($width)|0);
  $$123 = $$017;$$14 = $$08;$x$05 = 0;
  while(1) {
   $1 = HEAP8[$$123>>0]|0;
   $2 = $1&255;
   $3 = $2 & 128;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (($x$05) + ($y$09))|0;
    $6 = Math_imul($x$05, $y$09)|0;
    $7 = (($6|0) % 3)&-1;
    $8 = (($5) + ($7))|0;
    $9 = $8 & 1;
    $10 = $2 ^ 1;
    $11 = $10 ^ $9;
    $12 = $11&255;
    $storemerge = $12;
   } else {
    $storemerge = $1;
   }
   HEAP8[$$14>>0] = $storemerge;
   $13 = (($$123) + 1|0);
   $14 = (($$14) + 1|0);
   $15 = (($x$05) + 1)|0;
   $exitcond = ($15|0)==($width|0);
   if ($exitcond) {
    break;
   } else {
    $$123 = $13;$$14 = $14;$x$05 = $15;
   }
  }
  $scevgep12 = (($$017) + ($width)|0);
  $16 = (($y$09) + 1)|0;
  $exitcond13 = ($16|0)==($width|0);
  if ($exitcond13) {
   break;
  } else {
   $$017 = $scevgep12;$$08 = $scevgep;$y$09 = $16;
  }
 }
 return;
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endian = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endian = sp;
 $1 = $crc;
 $2 = $buf;
 $3 = $len;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   HEAP32[$endian>>2] = 1;
   $6 = HEAP8[$endian>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   if ($7) {
    $8 = $1;
    $9 = $2;
    $10 = $3;
    $11 = (_crc32_little($8,$9,$10)|0);
    $0 = $11;
    break;
   } else {
    $12 = $1;
    $13 = $2;
    $14 = $3;
    $15 = (_crc32_big($12,$13,$14)|0);
    $0 = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _crc32_little($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $c = $3;
 $4 = $c;
 $5 = $4 ^ -1;
 $c = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $1;
   $9 = $8;
   $10 = $9 & 3;
   $11 = ($10|0)!=(0);
   $290 = $11;
  } else {
   $290 = 0;
  }
  if (!($290)) {
   break;
  }
  $12 = $c;
  $13 = $1;
  $14 = (($13) + 1|0);
  $1 = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $17 = $12 ^ $16;
  $18 = $17 & 255;
  $19 = (16448 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $c;
  $22 = $21 >>> 8;
  $23 = $20 ^ $22;
  $c = $23;
  $24 = $2;
  $25 = (($24) + -1)|0;
  $2 = $25;
 }
 $26 = $1;
 $buf4 = $26;
 while(1) {
  $27 = $2;
  $28 = ($27>>>0)>=(32);
  if (!($28)) {
   break;
  }
  $29 = $buf4;
  $30 = (($29) + 4|0);
  $buf4 = $30;
  $31 = HEAP32[$29>>2]|0;
  $32 = $c;
  $33 = $32 ^ $31;
  $c = $33;
  $34 = $c;
  $35 = $34 & 255;
  $36 = (((16448 + 3072|0)) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $c;
  $39 = $38 >>> 8;
  $40 = $39 & 255;
  $41 = (((16448 + 2048|0)) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $37 ^ $42;
  $44 = $c;
  $45 = $44 >>> 16;
  $46 = $45 & 255;
  $47 = (((16448 + 1024|0)) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $43 ^ $48;
  $50 = $c;
  $51 = $50 >>> 24;
  $52 = (16448 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $49 ^ $53;
  $c = $54;
  $55 = $buf4;
  $56 = (($55) + 4|0);
  $buf4 = $56;
  $57 = HEAP32[$55>>2]|0;
  $58 = $c;
  $59 = $58 ^ $57;
  $c = $59;
  $60 = $c;
  $61 = $60 & 255;
  $62 = (((16448 + 3072|0)) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $c;
  $65 = $64 >>> 8;
  $66 = $65 & 255;
  $67 = (((16448 + 2048|0)) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $63 ^ $68;
  $70 = $c;
  $71 = $70 >>> 16;
  $72 = $71 & 255;
  $73 = (((16448 + 1024|0)) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $69 ^ $74;
  $76 = $c;
  $77 = $76 >>> 24;
  $78 = (16448 + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $75 ^ $79;
  $c = $80;
  $81 = $buf4;
  $82 = (($81) + 4|0);
  $buf4 = $82;
  $83 = HEAP32[$81>>2]|0;
  $84 = $c;
  $85 = $84 ^ $83;
  $c = $85;
  $86 = $c;
  $87 = $86 & 255;
  $88 = (((16448 + 3072|0)) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $c;
  $91 = $90 >>> 8;
  $92 = $91 & 255;
  $93 = (((16448 + 2048|0)) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $89 ^ $94;
  $96 = $c;
  $97 = $96 >>> 16;
  $98 = $97 & 255;
  $99 = (((16448 + 1024|0)) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $95 ^ $100;
  $102 = $c;
  $103 = $102 >>> 24;
  $104 = (16448 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $101 ^ $105;
  $c = $106;
  $107 = $buf4;
  $108 = (($107) + 4|0);
  $buf4 = $108;
  $109 = HEAP32[$107>>2]|0;
  $110 = $c;
  $111 = $110 ^ $109;
  $c = $111;
  $112 = $c;
  $113 = $112 & 255;
  $114 = (((16448 + 3072|0)) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $c;
  $117 = $116 >>> 8;
  $118 = $117 & 255;
  $119 = (((16448 + 2048|0)) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $115 ^ $120;
  $122 = $c;
  $123 = $122 >>> 16;
  $124 = $123 & 255;
  $125 = (((16448 + 1024|0)) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $121 ^ $126;
  $128 = $c;
  $129 = $128 >>> 24;
  $130 = (16448 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $127 ^ $131;
  $c = $132;
  $133 = $buf4;
  $134 = (($133) + 4|0);
  $buf4 = $134;
  $135 = HEAP32[$133>>2]|0;
  $136 = $c;
  $137 = $136 ^ $135;
  $c = $137;
  $138 = $c;
  $139 = $138 & 255;
  $140 = (((16448 + 3072|0)) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $c;
  $143 = $142 >>> 8;
  $144 = $143 & 255;
  $145 = (((16448 + 2048|0)) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $141 ^ $146;
  $148 = $c;
  $149 = $148 >>> 16;
  $150 = $149 & 255;
  $151 = (((16448 + 1024|0)) + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $147 ^ $152;
  $154 = $c;
  $155 = $154 >>> 24;
  $156 = (16448 + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $153 ^ $157;
  $c = $158;
  $159 = $buf4;
  $160 = (($159) + 4|0);
  $buf4 = $160;
  $161 = HEAP32[$159>>2]|0;
  $162 = $c;
  $163 = $162 ^ $161;
  $c = $163;
  $164 = $c;
  $165 = $164 & 255;
  $166 = (((16448 + 3072|0)) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $c;
  $169 = $168 >>> 8;
  $170 = $169 & 255;
  $171 = (((16448 + 2048|0)) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $167 ^ $172;
  $174 = $c;
  $175 = $174 >>> 16;
  $176 = $175 & 255;
  $177 = (((16448 + 1024|0)) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $173 ^ $178;
  $180 = $c;
  $181 = $180 >>> 24;
  $182 = (16448 + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $179 ^ $183;
  $c = $184;
  $185 = $buf4;
  $186 = (($185) + 4|0);
  $buf4 = $186;
  $187 = HEAP32[$185>>2]|0;
  $188 = $c;
  $189 = $188 ^ $187;
  $c = $189;
  $190 = $c;
  $191 = $190 & 255;
  $192 = (((16448 + 3072|0)) + ($191<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $c;
  $195 = $194 >>> 8;
  $196 = $195 & 255;
  $197 = (((16448 + 2048|0)) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $193 ^ $198;
  $200 = $c;
  $201 = $200 >>> 16;
  $202 = $201 & 255;
  $203 = (((16448 + 1024|0)) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $199 ^ $204;
  $206 = $c;
  $207 = $206 >>> 24;
  $208 = (16448 + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $205 ^ $209;
  $c = $210;
  $211 = $buf4;
  $212 = (($211) + 4|0);
  $buf4 = $212;
  $213 = HEAP32[$211>>2]|0;
  $214 = $c;
  $215 = $214 ^ $213;
  $c = $215;
  $216 = $c;
  $217 = $216 & 255;
  $218 = (((16448 + 3072|0)) + ($217<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $c;
  $221 = $220 >>> 8;
  $222 = $221 & 255;
  $223 = (((16448 + 2048|0)) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $219 ^ $224;
  $226 = $c;
  $227 = $226 >>> 16;
  $228 = $227 & 255;
  $229 = (((16448 + 1024|0)) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $225 ^ $230;
  $232 = $c;
  $233 = $232 >>> 24;
  $234 = (16448 + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $231 ^ $235;
  $c = $236;
  $237 = $2;
  $238 = (($237) - 32)|0;
  $2 = $238;
 }
 while(1) {
  $239 = $2;
  $240 = ($239>>>0)>=(4);
  if (!($240)) {
   break;
  }
  $241 = $buf4;
  $242 = (($241) + 4|0);
  $buf4 = $242;
  $243 = HEAP32[$241>>2]|0;
  $244 = $c;
  $245 = $244 ^ $243;
  $c = $245;
  $246 = $c;
  $247 = $246 & 255;
  $248 = (((16448 + 3072|0)) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $c;
  $251 = $250 >>> 8;
  $252 = $251 & 255;
  $253 = (((16448 + 2048|0)) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $249 ^ $254;
  $256 = $c;
  $257 = $256 >>> 16;
  $258 = $257 & 255;
  $259 = (((16448 + 1024|0)) + ($258<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $255 ^ $260;
  $262 = $c;
  $263 = $262 >>> 24;
  $264 = (16448 + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $261 ^ $265;
  $c = $266;
  $267 = $2;
  $268 = (($267) - 4)|0;
  $2 = $268;
 }
 $269 = $buf4;
 $1 = $269;
 $270 = $2;
 $271 = ($270|0)!=(0);
 if (!($271)) {
  $287 = $c;
  $288 = $287 ^ -1;
  $c = $288;
  $289 = $c;
  STACKTOP = sp;return ($289|0);
 }
 while(1) {
  $272 = $c;
  $273 = $1;
  $274 = (($273) + 1|0);
  $1 = $274;
  $275 = HEAP8[$273>>0]|0;
  $276 = $275&255;
  $277 = $272 ^ $276;
  $278 = $277 & 255;
  $279 = (16448 + ($278<<2)|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $c;
  $282 = $281 >>> 8;
  $283 = $280 ^ $282;
  $c = $283;
  $284 = $2;
  $285 = (($284) + -1)|0;
  $2 = $285;
  $286 = ($285|0)!=(0);
  if (!($286)) {
   break;
  }
 }
 $287 = $c;
 $288 = $287 ^ -1;
 $c = $288;
 $289 = $c;
 STACKTOP = sp;return ($289|0);
}
function _crc32_big($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $4 = $3 >>> 24;
 $5 = $4 & 255;
 $6 = $0;
 $7 = $6 >>> 8;
 $8 = $7 & 65280;
 $9 = (($5) + ($8))|0;
 $10 = $0;
 $11 = $10 & 65280;
 $12 = $11 << 8;
 $13 = (($9) + ($12))|0;
 $14 = $0;
 $15 = $14 & 255;
 $16 = $15 << 24;
 $17 = (($13) + ($16))|0;
 $c = $17;
 $18 = $c;
 $19 = $18 ^ -1;
 $c = $19;
 while(1) {
  $20 = $2;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $1;
   $23 = $22;
   $24 = $23 & 3;
   $25 = ($24|0)!=(0);
   $322 = $25;
  } else {
   $322 = 0;
  }
  if (!($322)) {
   break;
  }
  $26 = $c;
  $27 = $26 >>> 24;
  $28 = $1;
  $29 = (($28) + 1|0);
  $1 = $29;
  $30 = HEAP8[$28>>0]|0;
  $31 = $30&255;
  $32 = $27 ^ $31;
  $33 = (((16448 + 4096|0)) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $c;
  $36 = $35 << 8;
  $37 = $34 ^ $36;
  $c = $37;
  $38 = $2;
  $39 = (($38) + -1)|0;
  $2 = $39;
 }
 $40 = $1;
 $buf4 = $40;
 $41 = $buf4;
 $42 = (($41) + -4|0);
 $buf4 = $42;
 while(1) {
  $43 = $2;
  $44 = ($43>>>0)>=(32);
  if (!($44)) {
   break;
  }
  $45 = $buf4;
  $46 = (($45) + 4|0);
  $buf4 = $46;
  $47 = HEAP32[$46>>2]|0;
  $48 = $c;
  $49 = $48 ^ $47;
  $c = $49;
  $50 = $c;
  $51 = $50 & 255;
  $52 = (((16448 + 4096|0)) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $c;
  $55 = $54 >>> 8;
  $56 = $55 & 255;
  $57 = (((16448 + 5120|0)) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $53 ^ $58;
  $60 = $c;
  $61 = $60 >>> 16;
  $62 = $61 & 255;
  $63 = (((16448 + 6144|0)) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $59 ^ $64;
  $66 = $c;
  $67 = $66 >>> 24;
  $68 = (((16448 + 7168|0)) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $65 ^ $69;
  $c = $70;
  $71 = $buf4;
  $72 = (($71) + 4|0);
  $buf4 = $72;
  $73 = HEAP32[$72>>2]|0;
  $74 = $c;
  $75 = $74 ^ $73;
  $c = $75;
  $76 = $c;
  $77 = $76 & 255;
  $78 = (((16448 + 4096|0)) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $c;
  $81 = $80 >>> 8;
  $82 = $81 & 255;
  $83 = (((16448 + 5120|0)) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $79 ^ $84;
  $86 = $c;
  $87 = $86 >>> 16;
  $88 = $87 & 255;
  $89 = (((16448 + 6144|0)) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $85 ^ $90;
  $92 = $c;
  $93 = $92 >>> 24;
  $94 = (((16448 + 7168|0)) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $91 ^ $95;
  $c = $96;
  $97 = $buf4;
  $98 = (($97) + 4|0);
  $buf4 = $98;
  $99 = HEAP32[$98>>2]|0;
  $100 = $c;
  $101 = $100 ^ $99;
  $c = $101;
  $102 = $c;
  $103 = $102 & 255;
  $104 = (((16448 + 4096|0)) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $c;
  $107 = $106 >>> 8;
  $108 = $107 & 255;
  $109 = (((16448 + 5120|0)) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $105 ^ $110;
  $112 = $c;
  $113 = $112 >>> 16;
  $114 = $113 & 255;
  $115 = (((16448 + 6144|0)) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $111 ^ $116;
  $118 = $c;
  $119 = $118 >>> 24;
  $120 = (((16448 + 7168|0)) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $117 ^ $121;
  $c = $122;
  $123 = $buf4;
  $124 = (($123) + 4|0);
  $buf4 = $124;
  $125 = HEAP32[$124>>2]|0;
  $126 = $c;
  $127 = $126 ^ $125;
  $c = $127;
  $128 = $c;
  $129 = $128 & 255;
  $130 = (((16448 + 4096|0)) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $c;
  $133 = $132 >>> 8;
  $134 = $133 & 255;
  $135 = (((16448 + 5120|0)) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $131 ^ $136;
  $138 = $c;
  $139 = $138 >>> 16;
  $140 = $139 & 255;
  $141 = (((16448 + 6144|0)) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $137 ^ $142;
  $144 = $c;
  $145 = $144 >>> 24;
  $146 = (((16448 + 7168|0)) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $143 ^ $147;
  $c = $148;
  $149 = $buf4;
  $150 = (($149) + 4|0);
  $buf4 = $150;
  $151 = HEAP32[$150>>2]|0;
  $152 = $c;
  $153 = $152 ^ $151;
  $c = $153;
  $154 = $c;
  $155 = $154 & 255;
  $156 = (((16448 + 4096|0)) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $c;
  $159 = $158 >>> 8;
  $160 = $159 & 255;
  $161 = (((16448 + 5120|0)) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $157 ^ $162;
  $164 = $c;
  $165 = $164 >>> 16;
  $166 = $165 & 255;
  $167 = (((16448 + 6144|0)) + ($166<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $163 ^ $168;
  $170 = $c;
  $171 = $170 >>> 24;
  $172 = (((16448 + 7168|0)) + ($171<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $169 ^ $173;
  $c = $174;
  $175 = $buf4;
  $176 = (($175) + 4|0);
  $buf4 = $176;
  $177 = HEAP32[$176>>2]|0;
  $178 = $c;
  $179 = $178 ^ $177;
  $c = $179;
  $180 = $c;
  $181 = $180 & 255;
  $182 = (((16448 + 4096|0)) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $c;
  $185 = $184 >>> 8;
  $186 = $185 & 255;
  $187 = (((16448 + 5120|0)) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $183 ^ $188;
  $190 = $c;
  $191 = $190 >>> 16;
  $192 = $191 & 255;
  $193 = (((16448 + 6144|0)) + ($192<<2)|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $189 ^ $194;
  $196 = $c;
  $197 = $196 >>> 24;
  $198 = (((16448 + 7168|0)) + ($197<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $195 ^ $199;
  $c = $200;
  $201 = $buf4;
  $202 = (($201) + 4|0);
  $buf4 = $202;
  $203 = HEAP32[$202>>2]|0;
  $204 = $c;
  $205 = $204 ^ $203;
  $c = $205;
  $206 = $c;
  $207 = $206 & 255;
  $208 = (((16448 + 4096|0)) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $c;
  $211 = $210 >>> 8;
  $212 = $211 & 255;
  $213 = (((16448 + 5120|0)) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $209 ^ $214;
  $216 = $c;
  $217 = $216 >>> 16;
  $218 = $217 & 255;
  $219 = (((16448 + 6144|0)) + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $215 ^ $220;
  $222 = $c;
  $223 = $222 >>> 24;
  $224 = (((16448 + 7168|0)) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $221 ^ $225;
  $c = $226;
  $227 = $buf4;
  $228 = (($227) + 4|0);
  $buf4 = $228;
  $229 = HEAP32[$228>>2]|0;
  $230 = $c;
  $231 = $230 ^ $229;
  $c = $231;
  $232 = $c;
  $233 = $232 & 255;
  $234 = (((16448 + 4096|0)) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $c;
  $237 = $236 >>> 8;
  $238 = $237 & 255;
  $239 = (((16448 + 5120|0)) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $235 ^ $240;
  $242 = $c;
  $243 = $242 >>> 16;
  $244 = $243 & 255;
  $245 = (((16448 + 6144|0)) + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $241 ^ $246;
  $248 = $c;
  $249 = $248 >>> 24;
  $250 = (((16448 + 7168|0)) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $247 ^ $251;
  $c = $252;
  $253 = $2;
  $254 = (($253) - 32)|0;
  $2 = $254;
 }
 while(1) {
  $255 = $2;
  $256 = ($255>>>0)>=(4);
  if (!($256)) {
   break;
  }
  $257 = $buf4;
  $258 = (($257) + 4|0);
  $buf4 = $258;
  $259 = HEAP32[$258>>2]|0;
  $260 = $c;
  $261 = $260 ^ $259;
  $c = $261;
  $262 = $c;
  $263 = $262 & 255;
  $264 = (((16448 + 4096|0)) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $c;
  $267 = $266 >>> 8;
  $268 = $267 & 255;
  $269 = (((16448 + 5120|0)) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $265 ^ $270;
  $272 = $c;
  $273 = $272 >>> 16;
  $274 = $273 & 255;
  $275 = (((16448 + 6144|0)) + ($274<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $271 ^ $276;
  $278 = $c;
  $279 = $278 >>> 24;
  $280 = (((16448 + 7168|0)) + ($279<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = $277 ^ $281;
  $c = $282;
  $283 = $2;
  $284 = (($283) - 4)|0;
  $2 = $284;
 }
 $285 = $buf4;
 $286 = (($285) + 4|0);
 $buf4 = $286;
 $287 = $buf4;
 $1 = $287;
 $288 = $2;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  $305 = $c;
  $306 = $305 ^ -1;
  $c = $306;
  $307 = $c;
  $308 = $307 >>> 24;
  $309 = $308 & 255;
  $310 = $c;
  $311 = $310 >>> 8;
  $312 = $311 & 65280;
  $313 = (($309) + ($312))|0;
  $314 = $c;
  $315 = $314 & 65280;
  $316 = $315 << 8;
  $317 = (($313) + ($316))|0;
  $318 = $c;
  $319 = $318 & 255;
  $320 = $319 << 24;
  $321 = (($317) + ($320))|0;
  STACKTOP = sp;return ($321|0);
 }
 while(1) {
  $290 = $c;
  $291 = $290 >>> 24;
  $292 = $1;
  $293 = (($292) + 1|0);
  $1 = $293;
  $294 = HEAP8[$292>>0]|0;
  $295 = $294&255;
  $296 = $291 ^ $295;
  $297 = (((16448 + 4096|0)) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $c;
  $300 = $299 << 8;
  $301 = $298 ^ $300;
  $c = $301;
  $302 = $2;
  $303 = (($302) + -1)|0;
  $2 = $303;
  $304 = ($303|0)!=(0);
  if (!($304)) {
   break;
  }
 }
 $305 = $c;
 $306 = $305 ^ -1;
 $c = $306;
 $307 = $c;
 $308 = $307 >>> 24;
 $309 = $308 & 255;
 $310 = $c;
 $311 = $310 >>> 8;
 $312 = $311 & 65280;
 $313 = (($309) + ($312))|0;
 $314 = $c;
 $315 = $314 & 65280;
 $316 = $315 << 8;
 $317 = (($313) + ($316))|0;
 $318 = $c;
 $319 = $318 & 255;
 $320 = $319 << 24;
 $321 = (($317) + ($320))|0;
 STACKTOP = sp;return ($321|0);
}
function _deflateInit2_($strm,$level,$method,$windowBits,$memLevel,$strategy,$version,$stream_size) {
 $strm = $strm|0;
 $level = $level|0;
 $method = $method|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $overlay = 0, $s = 0, $wrap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $level;
 $3 = $method;
 $4 = $windowBits;
 $5 = $memLevel;
 $6 = $strategy;
 $7 = $version;
 $8 = $stream_size;
 $wrap = 1;
 $9 = $7;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $7;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = HEAP8[10768>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($13|0)!=($15|0);
  if (!($16)) {
   $17 = $8;
   $18 = ($17|0)!=(56);
   if (!($18)) {
    $19 = $1;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $0 = -2;
     $239 = $0;
     STACKTOP = sp;return ($239|0);
    }
    $21 = $1;
    $22 = (($21) + 24|0);
    HEAP32[$22>>2] = 0;
    $23 = $1;
    $24 = (($23) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $27 = $1;
     $28 = (($27) + 32|0);
     HEAP32[$28>>2] = 51;
     $29 = $1;
     $30 = (($29) + 40|0);
     HEAP32[$30>>2] = 0;
    }
    $31 = $1;
    $32 = (($31) + 36|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $35 = $1;
     $36 = (($35) + 36|0);
     HEAP32[$36>>2] = 52;
    }
    $37 = $2;
    $38 = ($37|0)==(-1);
    if ($38) {
     $2 = 6;
    }
    $39 = $4;
    $40 = ($39|0)<(0);
    if ($40) {
     $wrap = 0;
     $41 = $4;
     $42 = (0 - ($41))|0;
     $4 = $42;
    } else {
     $43 = $4;
     $44 = ($43|0)>(15);
     if ($44) {
      $wrap = 2;
      $45 = $4;
      $46 = (($45) - 16)|0;
      $4 = $46;
     }
    }
    $47 = $5;
    $48 = ($47|0)<(1);
    if (!($48)) {
     $49 = $5;
     $50 = ($49|0)>(9);
     if (!($50)) {
      $51 = $3;
      $52 = ($51|0)!=(8);
      if (!($52)) {
       $53 = $4;
       $54 = ($53|0)<(8);
       if (!($54)) {
        $55 = $4;
        $56 = ($55|0)>(15);
        if (!($56)) {
         $57 = $2;
         $58 = ($57|0)<(0);
         if (!($58)) {
          $59 = $2;
          $60 = ($59|0)>(9);
          if (!($60)) {
           $61 = $6;
           $62 = ($61|0)<(0);
           if (!($62)) {
            $63 = $6;
            $64 = ($63|0)>(4);
            if (!($64)) {
             $65 = $4;
             $66 = ($65|0)==(8);
             if ($66) {
              $4 = 9;
             }
             $67 = $1;
             $68 = (($67) + 32|0);
             $69 = HEAP32[$68>>2]|0;
             $70 = $1;
             $71 = (($70) + 40|0);
             $72 = HEAP32[$71>>2]|0;
             $73 = (FUNCTION_TABLE_iiii[$69 & 63]($72,1,5828)|0);
             $s = $73;
             $74 = $s;
             $75 = ($74|0)==(0|0);
             if ($75) {
              $0 = -4;
              $239 = $0;
              STACKTOP = sp;return ($239|0);
             }
             $76 = $s;
             $77 = $1;
             $78 = (($77) + 28|0);
             HEAP32[$78>>2] = $76;
             $79 = $1;
             $80 = $s;
             HEAP32[$80>>2] = $79;
             $81 = $wrap;
             $82 = $s;
             $83 = (($82) + 24|0);
             HEAP32[$83>>2] = $81;
             $84 = $s;
             $85 = (($84) + 28|0);
             HEAP32[$85>>2] = 0;
             $86 = $4;
             $87 = $s;
             $88 = (($87) + 48|0);
             HEAP32[$88>>2] = $86;
             $89 = $s;
             $90 = (($89) + 48|0);
             $91 = HEAP32[$90>>2]|0;
             $92 = 1 << $91;
             $93 = $s;
             $94 = (($93) + 44|0);
             HEAP32[$94>>2] = $92;
             $95 = $s;
             $96 = (($95) + 44|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = (($97) - 1)|0;
             $99 = $s;
             $100 = (($99) + 52|0);
             HEAP32[$100>>2] = $98;
             $101 = $5;
             $102 = (($101) + 7)|0;
             $103 = $s;
             $104 = (($103) + 80|0);
             HEAP32[$104>>2] = $102;
             $105 = $s;
             $106 = (($105) + 80|0);
             $107 = HEAP32[$106>>2]|0;
             $108 = 1 << $107;
             $109 = $s;
             $110 = (($109) + 76|0);
             HEAP32[$110>>2] = $108;
             $111 = $s;
             $112 = (($111) + 76|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = (($113) - 1)|0;
             $115 = $s;
             $116 = (($115) + 84|0);
             HEAP32[$116>>2] = $114;
             $117 = $s;
             $118 = (($117) + 80|0);
             $119 = HEAP32[$118>>2]|0;
             $120 = (($119) + 3)|0;
             $121 = (($120) - 1)|0;
             $122 = (($121>>>0) / 3)&-1;
             $123 = $s;
             $124 = (($123) + 88|0);
             HEAP32[$124>>2] = $122;
             $125 = $1;
             $126 = (($125) + 32|0);
             $127 = HEAP32[$126>>2]|0;
             $128 = $1;
             $129 = (($128) + 40|0);
             $130 = HEAP32[$129>>2]|0;
             $131 = $s;
             $132 = (($131) + 44|0);
             $133 = HEAP32[$132>>2]|0;
             $134 = (FUNCTION_TABLE_iiii[$127 & 63]($130,$133,2)|0);
             $135 = $s;
             $136 = (($135) + 56|0);
             HEAP32[$136>>2] = $134;
             $137 = $1;
             $138 = (($137) + 32|0);
             $139 = HEAP32[$138>>2]|0;
             $140 = $1;
             $141 = (($140) + 40|0);
             $142 = HEAP32[$141>>2]|0;
             $143 = $s;
             $144 = (($143) + 44|0);
             $145 = HEAP32[$144>>2]|0;
             $146 = (FUNCTION_TABLE_iiii[$139 & 63]($142,$145,2)|0);
             $147 = $s;
             $148 = (($147) + 64|0);
             HEAP32[$148>>2] = $146;
             $149 = $1;
             $150 = (($149) + 32|0);
             $151 = HEAP32[$150>>2]|0;
             $152 = $1;
             $153 = (($152) + 40|0);
             $154 = HEAP32[$153>>2]|0;
             $155 = $s;
             $156 = (($155) + 76|0);
             $157 = HEAP32[$156>>2]|0;
             $158 = (FUNCTION_TABLE_iiii[$151 & 63]($154,$157,2)|0);
             $159 = $s;
             $160 = (($159) + 68|0);
             HEAP32[$160>>2] = $158;
             $161 = $s;
             $162 = (($161) + 5824|0);
             HEAP32[$162>>2] = 0;
             $163 = $5;
             $164 = (($163) + 6)|0;
             $165 = 1 << $164;
             $166 = $s;
             $167 = (($166) + 5788|0);
             HEAP32[$167>>2] = $165;
             $168 = $1;
             $169 = (($168) + 32|0);
             $170 = HEAP32[$169>>2]|0;
             $171 = $1;
             $172 = (($171) + 40|0);
             $173 = HEAP32[$172>>2]|0;
             $174 = $s;
             $175 = (($174) + 5788|0);
             $176 = HEAP32[$175>>2]|0;
             $177 = (FUNCTION_TABLE_iiii[$170 & 63]($173,$176,4)|0);
             $overlay = $177;
             $178 = $overlay;
             $179 = $s;
             $180 = (($179) + 8|0);
             HEAP32[$180>>2] = $178;
             $181 = $s;
             $182 = (($181) + 5788|0);
             $183 = HEAP32[$182>>2]|0;
             $184 = $183<<2;
             $185 = $s;
             $186 = (($185) + 12|0);
             HEAP32[$186>>2] = $184;
             $187 = $s;
             $188 = (($187) + 56|0);
             $189 = HEAP32[$188>>2]|0;
             $190 = ($189|0)==(0|0);
             do {
              if (!($190)) {
               $191 = $s;
               $192 = (($191) + 64|0);
               $193 = HEAP32[$192>>2]|0;
               $194 = ($193|0)==(0|0);
               if ($194) {
                break;
               }
               $195 = $s;
               $196 = (($195) + 68|0);
               $197 = HEAP32[$196>>2]|0;
               $198 = ($197|0)==(0|0);
               if ($198) {
                break;
               }
               $199 = $s;
               $200 = (($199) + 8|0);
               $201 = HEAP32[$200>>2]|0;
               $202 = ($201|0)==(0|0);
               if ($202) {
                break;
               }
               $209 = $overlay;
               $210 = $s;
               $211 = (($210) + 5788|0);
               $212 = HEAP32[$211>>2]|0;
               $213 = (($212>>>0) / 2)&-1;
               $214 = (($209) + ($213<<1)|0);
               $215 = $s;
               $216 = (($215) + 5796|0);
               HEAP32[$216>>2] = $214;
               $217 = $s;
               $218 = (($217) + 8|0);
               $219 = HEAP32[$218>>2]|0;
               $220 = $s;
               $221 = (($220) + 5788|0);
               $222 = HEAP32[$221>>2]|0;
               $223 = ($222*3)|0;
               $224 = (($219) + ($223)|0);
               $225 = $s;
               $226 = (($225) + 5784|0);
               HEAP32[$226>>2] = $224;
               $227 = $2;
               $228 = $s;
               $229 = (($228) + 132|0);
               HEAP32[$229>>2] = $227;
               $230 = $6;
               $231 = $s;
               $232 = (($231) + 136|0);
               HEAP32[$232>>2] = $230;
               $233 = $3;
               $234 = $233&255;
               $235 = $s;
               $236 = (($235) + 36|0);
               HEAP8[$236>>0] = $234;
               $237 = $1;
               $238 = (_deflateReset($237)|0);
               $0 = $238;
               $239 = $0;
               STACKTOP = sp;return ($239|0);
              }
             } while(0);
             $203 = $s;
             $204 = (($203) + 4|0);
             HEAP32[$204>>2] = 666;
             $205 = HEAP32[((27608 + 24|0))>>2]|0;
             $206 = $1;
             $207 = (($206) + 24|0);
             HEAP32[$207>>2] = $205;
             $208 = $1;
             (_deflateEnd($208)|0);
             $0 = -4;
             $239 = $0;
             STACKTOP = sp;return ($239|0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $0 = -2;
    $239 = $0;
    STACKTOP = sp;return ($239|0);
   }
  }
 }
 $0 = -6;
 $239 = $0;
 STACKTOP = sp;return ($239|0);
}
function _deflateEnd($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (($8) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $status = $12;
   $13 = $status;
   $14 = ($13|0)!=(42);
   if ($14) {
    $15 = $status;
    $16 = ($15|0)!=(69);
    if ($16) {
     $17 = $status;
     $18 = ($17|0)!=(73);
     if ($18) {
      $19 = $status;
      $20 = ($19|0)!=(91);
      if ($20) {
       $21 = $status;
       $22 = ($21|0)!=(103);
       if ($22) {
        $23 = $status;
        $24 = ($23|0)!=(113);
        if ($24) {
         $25 = $status;
         $26 = ($25|0)!=(666);
         if ($26) {
          $0 = -2;
          $109 = $0;
          STACKTOP = sp;return ($109|0);
         }
        }
       }
      }
     }
    }
   }
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $1;
    $34 = (($33) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $1;
    $40 = (($39) + 28|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_vii[$35 & 63]($38,$43);
   }
   $44 = $1;
   $45 = (($44) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 68|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $1;
    $51 = (($50) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $1;
    $54 = (($53) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $1;
    $57 = (($56) + 28|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + 68|0);
    $60 = HEAP32[$59>>2]|0;
    FUNCTION_TABLE_vii[$52 & 63]($55,$60);
   }
   $61 = $1;
   $62 = (($61) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 64|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $1;
    $68 = (($67) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $1;
    $71 = (($70) + 40|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $1;
    $74 = (($73) + 28|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    FUNCTION_TABLE_vii[$69 & 63]($72,$77);
   }
   $78 = $1;
   $79 = (($78) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 56|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    $84 = $1;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $1;
    $88 = (($87) + 40|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $1;
    $91 = (($90) + 28|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 56|0);
    $94 = HEAP32[$93>>2]|0;
    FUNCTION_TABLE_vii[$86 & 63]($89,$94);
   }
   $95 = $1;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $1;
   $99 = (($98) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $1;
   $102 = (($101) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   FUNCTION_TABLE_vii[$97 & 63]($100,$103);
   $104 = $1;
   $105 = (($104) + 28|0);
   HEAP32[$105>>2] = 0;
   $106 = $status;
   $107 = ($106|0)==(113);
   $108 = $107 ? -3 : 0;
   $0 = $108;
   $109 = $0;
   STACKTOP = sp;return ($109|0);
  }
 }
 $0 = -2;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _deflateReset($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $0;
 $2 = (_deflateResetKeep($1)|0);
 $ret = $2;
 $3 = $ret;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  _lm_init($7);
 }
 $8 = $ret;
 STACKTOP = sp;return ($8|0);
}
function _deflateResetKeep($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (($8) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = $1;
    $13 = (($12) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $1;
     $17 = (($16) + 20|0);
     HEAP32[$17>>2] = 0;
     $18 = $1;
     $19 = (($18) + 8|0);
     HEAP32[$19>>2] = 0;
     $20 = $1;
     $21 = (($20) + 24|0);
     HEAP32[$21>>2] = 0;
     $22 = $1;
     $23 = (($22) + 44|0);
     HEAP32[$23>>2] = 2;
     $24 = $1;
     $25 = (($24) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $s = $26;
     $27 = $s;
     $28 = (($27) + 20|0);
     HEAP32[$28>>2] = 0;
     $29 = $s;
     $30 = (($29) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $s;
     $33 = (($32) + 16|0);
     HEAP32[$33>>2] = $31;
     $34 = $s;
     $35 = (($34) + 24|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)<(0);
     if ($37) {
      $38 = $s;
      $39 = (($38) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (0 - ($40))|0;
      $42 = $s;
      $43 = (($42) + 24|0);
      HEAP32[$43>>2] = $41;
     }
     $44 = $s;
     $45 = (($44) + 24|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)!=(0);
     $48 = $47 ? 42 : 113;
     $49 = $s;
     $50 = (($49) + 4|0);
     HEAP32[$50>>2] = $48;
     $51 = $s;
     $52 = (($51) + 24|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(2);
     if ($54) {
      $55 = (_crc32(0,0,0)|0);
      $59 = $55;
     } else {
      $56 = (_adler32(0,0,0)|0);
      $59 = $56;
     }
     $57 = $1;
     $58 = (($57) + 48|0);
     HEAP32[$58>>2] = $59;
     $60 = $s;
     $61 = (($60) + 40|0);
     HEAP32[$61>>2] = 0;
     $62 = $s;
     __tr_init($62);
     $0 = 0;
     $63 = $0;
     STACKTOP = sp;return ($63|0);
    }
   }
  }
 }
 $0 = -2;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _deflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $beg = 0, $beg1 = 0, $beg2 = 0, $bstate = 0, $header = 0, $level_flags = 0, $old_flush = 0, $s = 0, $val = 0, $val3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $flush;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $1;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $2;
   $10 = ($9|0)>(5);
   if (!($10)) {
    $11 = $2;
    $12 = ($11|0)<(0);
    if (!($12)) {
     $13 = $1;
     $14 = (($13) + 28|0);
     $15 = HEAP32[$14>>2]|0;
     $s = $15;
     $16 = $1;
     $17 = (($16) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     do {
      if (!($19)) {
       $20 = $1;
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(0|0);
       if ($22) {
        $23 = $1;
        $24 = (($23) + 4|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ($25|0)!=(0);
        if ($26) {
         break;
        }
       }
       $27 = $s;
       $28 = (($27) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)==(666);
       if ($30) {
        $31 = $2;
        $32 = ($31|0)!=(4);
        if ($32) {
         break;
        }
       }
       $36 = $1;
       $37 = (($36) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = HEAP32[((27608 + 28|0))>>2]|0;
        $41 = $1;
        $42 = (($41) + 24|0);
        HEAP32[$42>>2] = $40;
        $0 = -5;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $43 = $1;
       $44 = $s;
       HEAP32[$44>>2] = $43;
       $45 = $s;
       $46 = (($45) + 40|0);
       $47 = HEAP32[$46>>2]|0;
       $old_flush = $47;
       $48 = $2;
       $49 = $s;
       $50 = (($49) + 40|0);
       HEAP32[$50>>2] = $48;
       $51 = $s;
       $52 = (($51) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(42);
       if ($54) {
        $55 = $s;
        $56 = (($55) + 24|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(2);
        if ($58) {
         $59 = (_crc32(0,0,0)|0);
         $60 = $1;
         $61 = (($60) + 48|0);
         HEAP32[$61>>2] = $59;
         $62 = $s;
         $63 = (($62) + 20|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = (($64) + 1)|0;
         HEAP32[$63>>2] = $65;
         $66 = $s;
         $67 = (($66) + 8|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = (($68) + ($64)|0);
         HEAP8[$69>>0] = 31;
         $70 = $s;
         $71 = (($70) + 20|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($72) + 1)|0;
         HEAP32[$71>>2] = $73;
         $74 = $s;
         $75 = (($74) + 8|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = (($76) + ($72)|0);
         HEAP8[$77>>0] = -117;
         $78 = $s;
         $79 = (($78) + 20|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = (($80) + 1)|0;
         HEAP32[$79>>2] = $81;
         $82 = $s;
         $83 = (($82) + 8|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = (($84) + ($80)|0);
         HEAP8[$85>>0] = 8;
         $86 = $s;
         $87 = (($86) + 28|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = ($88|0)==(0|0);
         if ($89) {
          $90 = $s;
          $91 = (($90) + 20|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = (($92) + 1)|0;
          HEAP32[$91>>2] = $93;
          $94 = $s;
          $95 = (($94) + 8|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = (($96) + ($92)|0);
          HEAP8[$97>>0] = 0;
          $98 = $s;
          $99 = (($98) + 20|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (($100) + 1)|0;
          HEAP32[$99>>2] = $101;
          $102 = $s;
          $103 = (($102) + 8|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = (($104) + ($100)|0);
          HEAP8[$105>>0] = 0;
          $106 = $s;
          $107 = (($106) + 20|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = (($108) + 1)|0;
          HEAP32[$107>>2] = $109;
          $110 = $s;
          $111 = (($110) + 8|0);
          $112 = HEAP32[$111>>2]|0;
          $113 = (($112) + ($108)|0);
          HEAP8[$113>>0] = 0;
          $114 = $s;
          $115 = (($114) + 20|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = (($116) + 1)|0;
          HEAP32[$115>>2] = $117;
          $118 = $s;
          $119 = (($118) + 8|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = (($120) + ($116)|0);
          HEAP8[$121>>0] = 0;
          $122 = $s;
          $123 = (($122) + 20|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = (($124) + 1)|0;
          HEAP32[$123>>2] = $125;
          $126 = $s;
          $127 = (($126) + 8|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = (($128) + ($124)|0);
          HEAP8[$129>>0] = 0;
          $130 = $s;
          $131 = (($130) + 132|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = ($132|0)==(9);
          if ($133) {
           $145 = 2;
          } else {
           $134 = $s;
           $135 = (($134) + 136|0);
           $136 = HEAP32[$135>>2]|0;
           $137 = ($136|0)>=(2);
           if ($137) {
            $142 = 1;
           } else {
            $138 = $s;
            $139 = (($138) + 132|0);
            $140 = HEAP32[$139>>2]|0;
            $141 = ($140|0)<(2);
            $142 = $141;
           }
           $143 = $142 ? 4 : 0;
           $145 = $143;
          }
          $144 = $145&255;
          $146 = $s;
          $147 = (($146) + 20|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = (($148) + 1)|0;
          HEAP32[$147>>2] = $149;
          $150 = $s;
          $151 = (($150) + 8|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($152) + ($148)|0);
          HEAP8[$153>>0] = $144;
          $154 = $s;
          $155 = (($154) + 20|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = (($156) + 1)|0;
          HEAP32[$155>>2] = $157;
          $158 = $s;
          $159 = (($158) + 8|0);
          $160 = HEAP32[$159>>2]|0;
          $161 = (($160) + ($156)|0);
          HEAP8[$161>>0] = 3;
          $162 = $s;
          $163 = (($162) + 4|0);
          HEAP32[$163>>2] = 113;
         } else {
          $164 = $s;
          $165 = (($164) + 28|0);
          $166 = HEAP32[$165>>2]|0;
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)!=(0);
          $169 = $168 ? 1 : 0;
          $170 = $s;
          $171 = (($170) + 28|0);
          $172 = HEAP32[$171>>2]|0;
          $173 = (($172) + 44|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)!=(0);
          $176 = $175 ? 2 : 0;
          $177 = (($169) + ($176))|0;
          $178 = $s;
          $179 = (($178) + 28|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = (($180) + 16|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = ($182|0)==(0|0);
          $184 = $183 ? 0 : 4;
          $185 = (($177) + ($184))|0;
          $186 = $s;
          $187 = (($186) + 28|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = (($188) + 28|0);
          $190 = HEAP32[$189>>2]|0;
          $191 = ($190|0)==(0|0);
          $192 = $191 ? 0 : 8;
          $193 = (($185) + ($192))|0;
          $194 = $s;
          $195 = (($194) + 28|0);
          $196 = HEAP32[$195>>2]|0;
          $197 = (($196) + 36|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = ($198|0)==(0|0);
          $200 = $199 ? 0 : 16;
          $201 = (($193) + ($200))|0;
          $202 = $201&255;
          $203 = $s;
          $204 = (($203) + 20|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = (($205) + 1)|0;
          HEAP32[$204>>2] = $206;
          $207 = $s;
          $208 = (($207) + 8|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = (($209) + ($205)|0);
          HEAP8[$210>>0] = $202;
          $211 = $s;
          $212 = (($211) + 28|0);
          $213 = HEAP32[$212>>2]|0;
          $214 = (($213) + 4|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = $215 & 255;
          $217 = $216&255;
          $218 = $s;
          $219 = (($218) + 20|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (($220) + 1)|0;
          HEAP32[$219>>2] = $221;
          $222 = $s;
          $223 = (($222) + 8|0);
          $224 = HEAP32[$223>>2]|0;
          $225 = (($224) + ($220)|0);
          HEAP8[$225>>0] = $217;
          $226 = $s;
          $227 = (($226) + 28|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = (($228) + 4|0);
          $230 = HEAP32[$229>>2]|0;
          $231 = $230 >>> 8;
          $232 = $231 & 255;
          $233 = $232&255;
          $234 = $s;
          $235 = (($234) + 20|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = (($236) + 1)|0;
          HEAP32[$235>>2] = $237;
          $238 = $s;
          $239 = (($238) + 8|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = (($240) + ($236)|0);
          HEAP8[$241>>0] = $233;
          $242 = $s;
          $243 = (($242) + 28|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = (($244) + 4|0);
          $246 = HEAP32[$245>>2]|0;
          $247 = $246 >>> 16;
          $248 = $247 & 255;
          $249 = $248&255;
          $250 = $s;
          $251 = (($250) + 20|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = (($252) + 1)|0;
          HEAP32[$251>>2] = $253;
          $254 = $s;
          $255 = (($254) + 8|0);
          $256 = HEAP32[$255>>2]|0;
          $257 = (($256) + ($252)|0);
          HEAP8[$257>>0] = $249;
          $258 = $s;
          $259 = (($258) + 28|0);
          $260 = HEAP32[$259>>2]|0;
          $261 = (($260) + 4|0);
          $262 = HEAP32[$261>>2]|0;
          $263 = $262 >>> 24;
          $264 = $263 & 255;
          $265 = $264&255;
          $266 = $s;
          $267 = (($266) + 20|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = (($268) + 1)|0;
          HEAP32[$267>>2] = $269;
          $270 = $s;
          $271 = (($270) + 8|0);
          $272 = HEAP32[$271>>2]|0;
          $273 = (($272) + ($268)|0);
          HEAP8[$273>>0] = $265;
          $274 = $s;
          $275 = (($274) + 132|0);
          $276 = HEAP32[$275>>2]|0;
          $277 = ($276|0)==(9);
          if ($277) {
           $289 = 2;
          } else {
           $278 = $s;
           $279 = (($278) + 136|0);
           $280 = HEAP32[$279>>2]|0;
           $281 = ($280|0)>=(2);
           if ($281) {
            $286 = 1;
           } else {
            $282 = $s;
            $283 = (($282) + 132|0);
            $284 = HEAP32[$283>>2]|0;
            $285 = ($284|0)<(2);
            $286 = $285;
           }
           $287 = $286 ? 4 : 0;
           $289 = $287;
          }
          $288 = $289&255;
          $290 = $s;
          $291 = (($290) + 20|0);
          $292 = HEAP32[$291>>2]|0;
          $293 = (($292) + 1)|0;
          HEAP32[$291>>2] = $293;
          $294 = $s;
          $295 = (($294) + 8|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = (($296) + ($292)|0);
          HEAP8[$297>>0] = $288;
          $298 = $s;
          $299 = (($298) + 28|0);
          $300 = HEAP32[$299>>2]|0;
          $301 = (($300) + 12|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = $302 & 255;
          $304 = $303&255;
          $305 = $s;
          $306 = (($305) + 20|0);
          $307 = HEAP32[$306>>2]|0;
          $308 = (($307) + 1)|0;
          HEAP32[$306>>2] = $308;
          $309 = $s;
          $310 = (($309) + 8|0);
          $311 = HEAP32[$310>>2]|0;
          $312 = (($311) + ($307)|0);
          HEAP8[$312>>0] = $304;
          $313 = $s;
          $314 = (($313) + 28|0);
          $315 = HEAP32[$314>>2]|0;
          $316 = (($315) + 16|0);
          $317 = HEAP32[$316>>2]|0;
          $318 = ($317|0)!=(0|0);
          if ($318) {
           $319 = $s;
           $320 = (($319) + 28|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (($321) + 20|0);
           $323 = HEAP32[$322>>2]|0;
           $324 = $323 & 255;
           $325 = $324&255;
           $326 = $s;
           $327 = (($326) + 20|0);
           $328 = HEAP32[$327>>2]|0;
           $329 = (($328) + 1)|0;
           HEAP32[$327>>2] = $329;
           $330 = $s;
           $331 = (($330) + 8|0);
           $332 = HEAP32[$331>>2]|0;
           $333 = (($332) + ($328)|0);
           HEAP8[$333>>0] = $325;
           $334 = $s;
           $335 = (($334) + 28|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = (($336) + 20|0);
           $338 = HEAP32[$337>>2]|0;
           $339 = $338 >>> 8;
           $340 = $339 & 255;
           $341 = $340&255;
           $342 = $s;
           $343 = (($342) + 20|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = (($344) + 1)|0;
           HEAP32[$343>>2] = $345;
           $346 = $s;
           $347 = (($346) + 8|0);
           $348 = HEAP32[$347>>2]|0;
           $349 = (($348) + ($344)|0);
           HEAP8[$349>>0] = $341;
          }
          $350 = $s;
          $351 = (($350) + 28|0);
          $352 = HEAP32[$351>>2]|0;
          $353 = (($352) + 44|0);
          $354 = HEAP32[$353>>2]|0;
          $355 = ($354|0)!=(0);
          if ($355) {
           $356 = $1;
           $357 = (($356) + 48|0);
           $358 = HEAP32[$357>>2]|0;
           $359 = $s;
           $360 = (($359) + 8|0);
           $361 = HEAP32[$360>>2]|0;
           $362 = $s;
           $363 = (($362) + 20|0);
           $364 = HEAP32[$363>>2]|0;
           $365 = (_crc32($358,$361,$364)|0);
           $366 = $1;
           $367 = (($366) + 48|0);
           HEAP32[$367>>2] = $365;
          }
          $368 = $s;
          $369 = (($368) + 32|0);
          HEAP32[$369>>2] = 0;
          $370 = $s;
          $371 = (($370) + 4|0);
          HEAP32[$371>>2] = 69;
         }
        } else {
         $372 = $s;
         $373 = (($372) + 48|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = (($374) - 8)|0;
         $376 = $375 << 4;
         $377 = (8 + ($376))|0;
         $378 = $377 << 8;
         $header = $378;
         $379 = $s;
         $380 = (($379) + 136|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($381|0)>=(2);
         if ($382) {
          label = 36;
         } else {
          $383 = $s;
          $384 = (($383) + 132|0);
          $385 = HEAP32[$384>>2]|0;
          $386 = ($385|0)<(2);
          if ($386) {
           label = 36;
          } else {
           $387 = $s;
           $388 = (($387) + 132|0);
           $389 = HEAP32[$388>>2]|0;
           $390 = ($389|0)<(6);
           if ($390) {
            $level_flags = 1;
           } else {
            $391 = $s;
            $392 = (($391) + 132|0);
            $393 = HEAP32[$392>>2]|0;
            $394 = ($393|0)==(6);
            if ($394) {
             $level_flags = 2;
            } else {
             $level_flags = 3;
            }
           }
          }
         }
         if ((label|0) == 36) {
          $level_flags = 0;
         }
         $395 = $level_flags;
         $396 = $395 << 6;
         $397 = $header;
         $398 = $397 | $396;
         $header = $398;
         $399 = $s;
         $400 = (($399) + 108|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)!=(0);
         if ($402) {
          $403 = $header;
          $404 = $403 | 32;
          $header = $404;
         }
         $405 = $header;
         $406 = (($405>>>0) % 31)&-1;
         $407 = (31 - ($406))|0;
         $408 = $header;
         $409 = (($408) + ($407))|0;
         $header = $409;
         $410 = $s;
         $411 = (($410) + 4|0);
         HEAP32[$411>>2] = 113;
         $412 = $s;
         $413 = $header;
         _putShortMSB($412,$413);
         $414 = $s;
         $415 = (($414) + 108|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = ($416|0)!=(0);
         if ($417) {
          $418 = $s;
          $419 = $1;
          $420 = (($419) + 48|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = $421 >>> 16;
          _putShortMSB($418,$422);
          $423 = $s;
          $424 = $1;
          $425 = (($424) + 48|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = $426 & 65535;
          _putShortMSB($423,$427);
         }
         $428 = (_adler32(0,0,0)|0);
         $429 = $1;
         $430 = (($429) + 48|0);
         HEAP32[$430>>2] = $428;
        }
       }
       $431 = $s;
       $432 = (($431) + 4|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = ($433|0)==(69);
       if ($434) {
        $435 = $s;
        $436 = (($435) + 28|0);
        $437 = HEAP32[$436>>2]|0;
        $438 = (($437) + 16|0);
        $439 = HEAP32[$438>>2]|0;
        $440 = ($439|0)!=(0|0);
        if ($440) {
         $441 = $s;
         $442 = (($441) + 20|0);
         $443 = HEAP32[$442>>2]|0;
         $beg = $443;
         while(1) {
          $444 = $s;
          $445 = (($444) + 32|0);
          $446 = HEAP32[$445>>2]|0;
          $447 = $s;
          $448 = (($447) + 28|0);
          $449 = HEAP32[$448>>2]|0;
          $450 = (($449) + 20|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = $451 & 65535;
          $453 = ($446>>>0)<($452>>>0);
          if (!($453)) {
           break;
          }
          $454 = $s;
          $455 = (($454) + 20|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = $s;
          $458 = (($457) + 12|0);
          $459 = HEAP32[$458>>2]|0;
          $460 = ($456|0)==($459|0);
          if ($460) {
           $461 = $s;
           $462 = (($461) + 28|0);
           $463 = HEAP32[$462>>2]|0;
           $464 = (($463) + 44|0);
           $465 = HEAP32[$464>>2]|0;
           $466 = ($465|0)!=(0);
           do {
            if ($466) {
             $467 = $s;
             $468 = (($467) + 20|0);
             $469 = HEAP32[$468>>2]|0;
             $470 = $beg;
             $471 = ($469>>>0)>($470>>>0);
             if (!($471)) {
              break;
             }
             $472 = $1;
             $473 = (($472) + 48|0);
             $474 = HEAP32[$473>>2]|0;
             $475 = $s;
             $476 = (($475) + 8|0);
             $477 = HEAP32[$476>>2]|0;
             $478 = $beg;
             $479 = (($477) + ($478)|0);
             $480 = $s;
             $481 = (($480) + 20|0);
             $482 = HEAP32[$481>>2]|0;
             $483 = $beg;
             $484 = (($482) - ($483))|0;
             $485 = (_crc32($474,$479,$484)|0);
             $486 = $1;
             $487 = (($486) + 48|0);
             HEAP32[$487>>2] = $485;
            }
           } while(0);
           $488 = $1;
           _flush_pending($488);
           $489 = $s;
           $490 = (($489) + 20|0);
           $491 = HEAP32[$490>>2]|0;
           $beg = $491;
           $492 = $s;
           $493 = (($492) + 20|0);
           $494 = HEAP32[$493>>2]|0;
           $495 = $s;
           $496 = (($495) + 12|0);
           $497 = HEAP32[$496>>2]|0;
           $498 = ($494|0)==($497|0);
           if ($498) {
            label = 59;
            break;
           }
          }
          $499 = $s;
          $500 = (($499) + 32|0);
          $501 = HEAP32[$500>>2]|0;
          $502 = $s;
          $503 = (($502) + 28|0);
          $504 = HEAP32[$503>>2]|0;
          $505 = (($504) + 16|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = (($506) + ($501)|0);
          $508 = HEAP8[$507>>0]|0;
          $509 = $s;
          $510 = (($509) + 20|0);
          $511 = HEAP32[$510>>2]|0;
          $512 = (($511) + 1)|0;
          HEAP32[$510>>2] = $512;
          $513 = $s;
          $514 = (($513) + 8|0);
          $515 = HEAP32[$514>>2]|0;
          $516 = (($515) + ($511)|0);
          HEAP8[$516>>0] = $508;
          $517 = $s;
          $518 = (($517) + 32|0);
          $519 = HEAP32[$518>>2]|0;
          $520 = (($519) + 1)|0;
          HEAP32[$518>>2] = $520;
         }
         if ((label|0) == 59) {
         }
         $521 = $s;
         $522 = (($521) + 28|0);
         $523 = HEAP32[$522>>2]|0;
         $524 = (($523) + 44|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ($525|0)!=(0);
         if ($526) {
          $527 = $s;
          $528 = (($527) + 20|0);
          $529 = HEAP32[$528>>2]|0;
          $530 = $beg;
          $531 = ($529>>>0)>($530>>>0);
          if ($531) {
           $532 = $1;
           $533 = (($532) + 48|0);
           $534 = HEAP32[$533>>2]|0;
           $535 = $s;
           $536 = (($535) + 8|0);
           $537 = HEAP32[$536>>2]|0;
           $538 = $beg;
           $539 = (($537) + ($538)|0);
           $540 = $s;
           $541 = (($540) + 20|0);
           $542 = HEAP32[$541>>2]|0;
           $543 = $beg;
           $544 = (($542) - ($543))|0;
           $545 = (_crc32($534,$539,$544)|0);
           $546 = $1;
           $547 = (($546) + 48|0);
           HEAP32[$547>>2] = $545;
          }
         }
         $548 = $s;
         $549 = (($548) + 32|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = $s;
         $552 = (($551) + 28|0);
         $553 = HEAP32[$552>>2]|0;
         $554 = (($553) + 20|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = ($550|0)==($555|0);
         if ($556) {
          $557 = $s;
          $558 = (($557) + 32|0);
          HEAP32[$558>>2] = 0;
          $559 = $s;
          $560 = (($559) + 4|0);
          HEAP32[$560>>2] = 73;
         }
        } else {
         $561 = $s;
         $562 = (($561) + 4|0);
         HEAP32[$562>>2] = 73;
        }
       }
       $563 = $s;
       $564 = (($563) + 4|0);
       $565 = HEAP32[$564>>2]|0;
       $566 = ($565|0)==(73);
       if ($566) {
        $567 = $s;
        $568 = (($567) + 28|0);
        $569 = HEAP32[$568>>2]|0;
        $570 = (($569) + 28|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = ($571|0)!=(0|0);
        if ($572) {
         $573 = $s;
         $574 = (($573) + 20|0);
         $575 = HEAP32[$574>>2]|0;
         $beg1 = $575;
         while(1) {
          $576 = $s;
          $577 = (($576) + 20|0);
          $578 = HEAP32[$577>>2]|0;
          $579 = $s;
          $580 = (($579) + 12|0);
          $581 = HEAP32[$580>>2]|0;
          $582 = ($578|0)==($581|0);
          if ($582) {
           $583 = $s;
           $584 = (($583) + 28|0);
           $585 = HEAP32[$584>>2]|0;
           $586 = (($585) + 44|0);
           $587 = HEAP32[$586>>2]|0;
           $588 = ($587|0)!=(0);
           do {
            if ($588) {
             $589 = $s;
             $590 = (($589) + 20|0);
             $591 = HEAP32[$590>>2]|0;
             $592 = $beg1;
             $593 = ($591>>>0)>($592>>>0);
             if (!($593)) {
              break;
             }
             $594 = $1;
             $595 = (($594) + 48|0);
             $596 = HEAP32[$595>>2]|0;
             $597 = $s;
             $598 = (($597) + 8|0);
             $599 = HEAP32[$598>>2]|0;
             $600 = $beg1;
             $601 = (($599) + ($600)|0);
             $602 = $s;
             $603 = (($602) + 20|0);
             $604 = HEAP32[$603>>2]|0;
             $605 = $beg1;
             $606 = (($604) - ($605))|0;
             $607 = (_crc32($596,$601,$606)|0);
             $608 = $1;
             $609 = (($608) + 48|0);
             HEAP32[$609>>2] = $607;
            }
           } while(0);
           $610 = $1;
           _flush_pending($610);
           $611 = $s;
           $612 = (($611) + 20|0);
           $613 = HEAP32[$612>>2]|0;
           $beg1 = $613;
           $614 = $s;
           $615 = (($614) + 20|0);
           $616 = HEAP32[$615>>2]|0;
           $617 = $s;
           $618 = (($617) + 12|0);
           $619 = HEAP32[$618>>2]|0;
           $620 = ($616|0)==($619|0);
           if ($620) {
            label = 78;
            break;
           }
          }
          $621 = $s;
          $622 = (($621) + 32|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = (($623) + 1)|0;
          HEAP32[$622>>2] = $624;
          $625 = $s;
          $626 = (($625) + 28|0);
          $627 = HEAP32[$626>>2]|0;
          $628 = (($627) + 28|0);
          $629 = HEAP32[$628>>2]|0;
          $630 = (($629) + ($623)|0);
          $631 = HEAP8[$630>>0]|0;
          $632 = $631&255;
          $val = $632;
          $633 = $val;
          $634 = $633&255;
          $635 = $s;
          $636 = (($635) + 20|0);
          $637 = HEAP32[$636>>2]|0;
          $638 = (($637) + 1)|0;
          HEAP32[$636>>2] = $638;
          $639 = $s;
          $640 = (($639) + 8|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = (($641) + ($637)|0);
          HEAP8[$642>>0] = $634;
          $643 = $val;
          $644 = ($643|0)!=(0);
          if (!($644)) {
           break;
          }
         }
         if ((label|0) == 78) {
          $val = 1;
         }
         $645 = $s;
         $646 = (($645) + 28|0);
         $647 = HEAP32[$646>>2]|0;
         $648 = (($647) + 44|0);
         $649 = HEAP32[$648>>2]|0;
         $650 = ($649|0)!=(0);
         if ($650) {
          $651 = $s;
          $652 = (($651) + 20|0);
          $653 = HEAP32[$652>>2]|0;
          $654 = $beg1;
          $655 = ($653>>>0)>($654>>>0);
          if ($655) {
           $656 = $1;
           $657 = (($656) + 48|0);
           $658 = HEAP32[$657>>2]|0;
           $659 = $s;
           $660 = (($659) + 8|0);
           $661 = HEAP32[$660>>2]|0;
           $662 = $beg1;
           $663 = (($661) + ($662)|0);
           $664 = $s;
           $665 = (($664) + 20|0);
           $666 = HEAP32[$665>>2]|0;
           $667 = $beg1;
           $668 = (($666) - ($667))|0;
           $669 = (_crc32($658,$663,$668)|0);
           $670 = $1;
           $671 = (($670) + 48|0);
           HEAP32[$671>>2] = $669;
          }
         }
         $672 = $val;
         $673 = ($672|0)==(0);
         if ($673) {
          $674 = $s;
          $675 = (($674) + 32|0);
          HEAP32[$675>>2] = 0;
          $676 = $s;
          $677 = (($676) + 4|0);
          HEAP32[$677>>2] = 91;
         }
        } else {
         $678 = $s;
         $679 = (($678) + 4|0);
         HEAP32[$679>>2] = 91;
        }
       }
       $680 = $s;
       $681 = (($680) + 4|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = ($682|0)==(91);
       if ($683) {
        $684 = $s;
        $685 = (($684) + 28|0);
        $686 = HEAP32[$685>>2]|0;
        $687 = (($686) + 36|0);
        $688 = HEAP32[$687>>2]|0;
        $689 = ($688|0)!=(0|0);
        if ($689) {
         $690 = $s;
         $691 = (($690) + 20|0);
         $692 = HEAP32[$691>>2]|0;
         $beg2 = $692;
         while(1) {
          $693 = $s;
          $694 = (($693) + 20|0);
          $695 = HEAP32[$694>>2]|0;
          $696 = $s;
          $697 = (($696) + 12|0);
          $698 = HEAP32[$697>>2]|0;
          $699 = ($695|0)==($698|0);
          if ($699) {
           $700 = $s;
           $701 = (($700) + 28|0);
           $702 = HEAP32[$701>>2]|0;
           $703 = (($702) + 44|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ($704|0)!=(0);
           do {
            if ($705) {
             $706 = $s;
             $707 = (($706) + 20|0);
             $708 = HEAP32[$707>>2]|0;
             $709 = $beg2;
             $710 = ($708>>>0)>($709>>>0);
             if (!($710)) {
              break;
             }
             $711 = $1;
             $712 = (($711) + 48|0);
             $713 = HEAP32[$712>>2]|0;
             $714 = $s;
             $715 = (($714) + 8|0);
             $716 = HEAP32[$715>>2]|0;
             $717 = $beg2;
             $718 = (($716) + ($717)|0);
             $719 = $s;
             $720 = (($719) + 20|0);
             $721 = HEAP32[$720>>2]|0;
             $722 = $beg2;
             $723 = (($721) - ($722))|0;
             $724 = (_crc32($713,$718,$723)|0);
             $725 = $1;
             $726 = (($725) + 48|0);
             HEAP32[$726>>2] = $724;
            }
           } while(0);
           $727 = $1;
           _flush_pending($727);
           $728 = $s;
           $729 = (($728) + 20|0);
           $730 = HEAP32[$729>>2]|0;
           $beg2 = $730;
           $731 = $s;
           $732 = (($731) + 20|0);
           $733 = HEAP32[$732>>2]|0;
           $734 = $s;
           $735 = (($734) + 12|0);
           $736 = HEAP32[$735>>2]|0;
           $737 = ($733|0)==($736|0);
           if ($737) {
            label = 98;
            break;
           }
          }
          $738 = $s;
          $739 = (($738) + 32|0);
          $740 = HEAP32[$739>>2]|0;
          $741 = (($740) + 1)|0;
          HEAP32[$739>>2] = $741;
          $742 = $s;
          $743 = (($742) + 28|0);
          $744 = HEAP32[$743>>2]|0;
          $745 = (($744) + 36|0);
          $746 = HEAP32[$745>>2]|0;
          $747 = (($746) + ($740)|0);
          $748 = HEAP8[$747>>0]|0;
          $749 = $748&255;
          $val3 = $749;
          $750 = $val3;
          $751 = $750&255;
          $752 = $s;
          $753 = (($752) + 20|0);
          $754 = HEAP32[$753>>2]|0;
          $755 = (($754) + 1)|0;
          HEAP32[$753>>2] = $755;
          $756 = $s;
          $757 = (($756) + 8|0);
          $758 = HEAP32[$757>>2]|0;
          $759 = (($758) + ($754)|0);
          HEAP8[$759>>0] = $751;
          $760 = $val3;
          $761 = ($760|0)!=(0);
          if (!($761)) {
           break;
          }
         }
         if ((label|0) == 98) {
          $val3 = 1;
         }
         $762 = $s;
         $763 = (($762) + 28|0);
         $764 = HEAP32[$763>>2]|0;
         $765 = (($764) + 44|0);
         $766 = HEAP32[$765>>2]|0;
         $767 = ($766|0)!=(0);
         if ($767) {
          $768 = $s;
          $769 = (($768) + 20|0);
          $770 = HEAP32[$769>>2]|0;
          $771 = $beg2;
          $772 = ($770>>>0)>($771>>>0);
          if ($772) {
           $773 = $1;
           $774 = (($773) + 48|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = $s;
           $777 = (($776) + 8|0);
           $778 = HEAP32[$777>>2]|0;
           $779 = $beg2;
           $780 = (($778) + ($779)|0);
           $781 = $s;
           $782 = (($781) + 20|0);
           $783 = HEAP32[$782>>2]|0;
           $784 = $beg2;
           $785 = (($783) - ($784))|0;
           $786 = (_crc32($775,$780,$785)|0);
           $787 = $1;
           $788 = (($787) + 48|0);
           HEAP32[$788>>2] = $786;
          }
         }
         $789 = $val3;
         $790 = ($789|0)==(0);
         if ($790) {
          $791 = $s;
          $792 = (($791) + 4|0);
          HEAP32[$792>>2] = 103;
         }
        } else {
         $793 = $s;
         $794 = (($793) + 4|0);
         HEAP32[$794>>2] = 103;
        }
       }
       $795 = $s;
       $796 = (($795) + 4|0);
       $797 = HEAP32[$796>>2]|0;
       $798 = ($797|0)==(103);
       if ($798) {
        $799 = $s;
        $800 = (($799) + 28|0);
        $801 = HEAP32[$800>>2]|0;
        $802 = (($801) + 44|0);
        $803 = HEAP32[$802>>2]|0;
        $804 = ($803|0)!=(0);
        if ($804) {
         $805 = $s;
         $806 = (($805) + 20|0);
         $807 = HEAP32[$806>>2]|0;
         $808 = (($807) + 2)|0;
         $809 = $s;
         $810 = (($809) + 12|0);
         $811 = HEAP32[$810>>2]|0;
         $812 = ($808>>>0)>($811>>>0);
         if ($812) {
          $813 = $1;
          _flush_pending($813);
         }
         $814 = $s;
         $815 = (($814) + 20|0);
         $816 = HEAP32[$815>>2]|0;
         $817 = (($816) + 2)|0;
         $818 = $s;
         $819 = (($818) + 12|0);
         $820 = HEAP32[$819>>2]|0;
         $821 = ($817>>>0)<=($820>>>0);
         if ($821) {
          $822 = $1;
          $823 = (($822) + 48|0);
          $824 = HEAP32[$823>>2]|0;
          $825 = $824 & 255;
          $826 = $825&255;
          $827 = $s;
          $828 = (($827) + 20|0);
          $829 = HEAP32[$828>>2]|0;
          $830 = (($829) + 1)|0;
          HEAP32[$828>>2] = $830;
          $831 = $s;
          $832 = (($831) + 8|0);
          $833 = HEAP32[$832>>2]|0;
          $834 = (($833) + ($829)|0);
          HEAP8[$834>>0] = $826;
          $835 = $1;
          $836 = (($835) + 48|0);
          $837 = HEAP32[$836>>2]|0;
          $838 = $837 >>> 8;
          $839 = $838 & 255;
          $840 = $839&255;
          $841 = $s;
          $842 = (($841) + 20|0);
          $843 = HEAP32[$842>>2]|0;
          $844 = (($843) + 1)|0;
          HEAP32[$842>>2] = $844;
          $845 = $s;
          $846 = (($845) + 8|0);
          $847 = HEAP32[$846>>2]|0;
          $848 = (($847) + ($843)|0);
          HEAP8[$848>>0] = $840;
          $849 = (_crc32(0,0,0)|0);
          $850 = $1;
          $851 = (($850) + 48|0);
          HEAP32[$851>>2] = $849;
          $852 = $s;
          $853 = (($852) + 4|0);
          HEAP32[$853>>2] = 113;
         }
        } else {
         $854 = $s;
         $855 = (($854) + 4|0);
         HEAP32[$855>>2] = 113;
        }
       }
       $856 = $s;
       $857 = (($856) + 20|0);
       $858 = HEAP32[$857>>2]|0;
       $859 = ($858|0)!=(0);
       do {
        if ($859) {
         $860 = $1;
         _flush_pending($860);
         $861 = $1;
         $862 = (($861) + 16|0);
         $863 = HEAP32[$862>>2]|0;
         $864 = ($863|0)==(0);
         if (!($864)) {
          break;
         }
         $865 = $s;
         $866 = (($865) + 40|0);
         HEAP32[$866>>2] = -1;
         $0 = 0;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        } else {
         $867 = $1;
         $868 = (($867) + 4|0);
         $869 = HEAP32[$868>>2]|0;
         $870 = ($869|0)==(0);
         do {
          if ($870) {
           $871 = $2;
           $872 = $871 << 1;
           $873 = $2;
           $874 = ($873|0)>(4);
           $875 = $874 ? 9 : 0;
           $876 = (($872) - ($875))|0;
           $877 = $old_flush;
           $878 = $877 << 1;
           $879 = $old_flush;
           $880 = ($879|0)>(4);
           $881 = $880 ? 9 : 0;
           $882 = (($878) - ($881))|0;
           $883 = ($876|0)<=($882|0);
           if ($883) {
            $884 = $2;
            $885 = ($884|0)!=(4);
            if (!($885)) {
             break;
            }
            $886 = HEAP32[((27608 + 28|0))>>2]|0;
            $887 = $1;
            $888 = (($887) + 24|0);
            HEAP32[$888>>2] = $886;
            $0 = -5;
            $1143 = $0;
            STACKTOP = sp;return ($1143|0);
           }
          }
         } while(0);
        }
       } while(0);
       $889 = $s;
       $890 = (($889) + 4|0);
       $891 = HEAP32[$890>>2]|0;
       $892 = ($891|0)==(666);
       if ($892) {
        $893 = $1;
        $894 = (($893) + 4|0);
        $895 = HEAP32[$894>>2]|0;
        $896 = ($895|0)!=(0);
        if ($896) {
         $897 = HEAP32[((27608 + 28|0))>>2]|0;
         $898 = $1;
         $899 = (($898) + 24|0);
         HEAP32[$899>>2] = $897;
         $0 = -5;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        }
       }
       $900 = $1;
       $901 = (($900) + 4|0);
       $902 = HEAP32[$901>>2]|0;
       $903 = ($902|0)!=(0);
       do {
        if ($903) {
         label = 135;
        } else {
         $904 = $s;
         $905 = (($904) + 116|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = ($906|0)!=(0);
         if ($907) {
          label = 135;
         } else {
          $908 = $2;
          $909 = ($908|0)!=(0);
          if (!($909)) {
           break;
          }
          $910 = $s;
          $911 = (($910) + 4|0);
          $912 = HEAP32[$911>>2]|0;
          $913 = ($912|0)!=(666);
          if ($913) {
           label = 135;
          }
         }
        }
       } while(0);
       L189: do {
        if ((label|0) == 135) {
         $914 = $s;
         $915 = (($914) + 136|0);
         $916 = HEAP32[$915>>2]|0;
         $917 = ($916|0)==(2);
         if ($917) {
          $918 = $s;
          $919 = $2;
          $920 = (_deflate_huff($918,$919)|0);
          $937 = $920;
         } else {
          $921 = $s;
          $922 = (($921) + 136|0);
          $923 = HEAP32[$922>>2]|0;
          $924 = ($923|0)==(3);
          if ($924) {
           $925 = $s;
           $926 = $2;
           $927 = (_deflate_rle($925,$926)|0);
           $1144 = $927;
          } else {
           $928 = $s;
           $929 = (($928) + 132|0);
           $930 = HEAP32[$929>>2]|0;
           $931 = (24640 + (($930*12)|0)|0);
           $932 = (($931) + 8|0);
           $933 = HEAP32[$932>>2]|0;
           $934 = $s;
           $935 = $2;
           $936 = (FUNCTION_TABLE_iii[$933 & 63]($934,$935)|0);
           $1144 = $936;
          }
          $937 = $1144;
         }
         $bstate = $937;
         $938 = $bstate;
         $939 = ($938|0)==(2);
         if ($939) {
          label = 143;
         } else {
          $940 = $bstate;
          $941 = ($940|0)==(3);
          if ($941) {
           label = 143;
          }
         }
         if ((label|0) == 143) {
          $942 = $s;
          $943 = (($942) + 4|0);
          HEAP32[$943>>2] = 666;
         }
         $944 = $bstate;
         $945 = ($944|0)==(0);
         do {
          if (!($945)) {
           $946 = $bstate;
           $947 = ($946|0)==(2);
           if ($947) {
            break;
           }
           $954 = $bstate;
           $955 = ($954|0)==(1);
           do {
            if ($955) {
             $956 = $2;
             $957 = ($956|0)==(1);
             if ($957) {
              $958 = $s;
              __tr_align($958);
             } else {
              $959 = $2;
              $960 = ($959|0)!=(5);
              if ($960) {
               $961 = $s;
               __tr_stored_block($961,0,0,0);
               $962 = $2;
               $963 = ($962|0)==(3);
               if ($963) {
                $964 = $s;
                $965 = (($964) + 76|0);
                $966 = HEAP32[$965>>2]|0;
                $967 = (($966) - 1)|0;
                $968 = $s;
                $969 = (($968) + 68|0);
                $970 = HEAP32[$969>>2]|0;
                $971 = (($970) + ($967<<1)|0);
                HEAP16[$971>>1] = 0;
                $972 = $s;
                $973 = (($972) + 68|0);
                $974 = HEAP32[$973>>2]|0;
                $975 = $s;
                $976 = (($975) + 76|0);
                $977 = HEAP32[$976>>2]|0;
                $978 = (($977) - 1)|0;
                $979 = $978<<1;
                _memset(($974|0),0,($979|0))|0;
                $980 = $s;
                $981 = (($980) + 116|0);
                $982 = HEAP32[$981>>2]|0;
                $983 = ($982|0)==(0);
                if ($983) {
                 $984 = $s;
                 $985 = (($984) + 108|0);
                 HEAP32[$985>>2] = 0;
                 $986 = $s;
                 $987 = (($986) + 92|0);
                 HEAP32[$987>>2] = 0;
                 $988 = $s;
                 $989 = (($988) + 5812|0);
                 HEAP32[$989>>2] = 0;
                }
               }
              }
             }
             $990 = $1;
             _flush_pending($990);
             $991 = $1;
             $992 = (($991) + 16|0);
             $993 = HEAP32[$992>>2]|0;
             $994 = ($993|0)==(0);
             if (!($994)) {
              break;
             }
             $995 = $s;
             $996 = (($995) + 40|0);
             HEAP32[$996>>2] = -1;
             $0 = 0;
             $1143 = $0;
             STACKTOP = sp;return ($1143|0);
            }
           } while(0);
           break L189;
          }
         } while(0);
         $948 = $1;
         $949 = (($948) + 16|0);
         $950 = HEAP32[$949>>2]|0;
         $951 = ($950|0)==(0);
         if ($951) {
          $952 = $s;
          $953 = (($952) + 40|0);
          HEAP32[$953>>2] = -1;
         }
         $0 = 0;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        }
       } while(0);
       $997 = $2;
       $998 = ($997|0)!=(4);
       if ($998) {
        $0 = 0;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $999 = $s;
       $1000 = (($999) + 24|0);
       $1001 = HEAP32[$1000>>2]|0;
       $1002 = ($1001|0)<=(0);
       if ($1002) {
        $0 = 1;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $1003 = $s;
       $1004 = (($1003) + 24|0);
       $1005 = HEAP32[$1004>>2]|0;
       $1006 = ($1005|0)==(2);
       if ($1006) {
        $1007 = $1;
        $1008 = (($1007) + 48|0);
        $1009 = HEAP32[$1008>>2]|0;
        $1010 = $1009 & 255;
        $1011 = $1010&255;
        $1012 = $s;
        $1013 = (($1012) + 20|0);
        $1014 = HEAP32[$1013>>2]|0;
        $1015 = (($1014) + 1)|0;
        HEAP32[$1013>>2] = $1015;
        $1016 = $s;
        $1017 = (($1016) + 8|0);
        $1018 = HEAP32[$1017>>2]|0;
        $1019 = (($1018) + ($1014)|0);
        HEAP8[$1019>>0] = $1011;
        $1020 = $1;
        $1021 = (($1020) + 48|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = $1022 >>> 8;
        $1024 = $1023 & 255;
        $1025 = $1024&255;
        $1026 = $s;
        $1027 = (($1026) + 20|0);
        $1028 = HEAP32[$1027>>2]|0;
        $1029 = (($1028) + 1)|0;
        HEAP32[$1027>>2] = $1029;
        $1030 = $s;
        $1031 = (($1030) + 8|0);
        $1032 = HEAP32[$1031>>2]|0;
        $1033 = (($1032) + ($1028)|0);
        HEAP8[$1033>>0] = $1025;
        $1034 = $1;
        $1035 = (($1034) + 48|0);
        $1036 = HEAP32[$1035>>2]|0;
        $1037 = $1036 >>> 16;
        $1038 = $1037 & 255;
        $1039 = $1038&255;
        $1040 = $s;
        $1041 = (($1040) + 20|0);
        $1042 = HEAP32[$1041>>2]|0;
        $1043 = (($1042) + 1)|0;
        HEAP32[$1041>>2] = $1043;
        $1044 = $s;
        $1045 = (($1044) + 8|0);
        $1046 = HEAP32[$1045>>2]|0;
        $1047 = (($1046) + ($1042)|0);
        HEAP8[$1047>>0] = $1039;
        $1048 = $1;
        $1049 = (($1048) + 48|0);
        $1050 = HEAP32[$1049>>2]|0;
        $1051 = $1050 >>> 24;
        $1052 = $1051 & 255;
        $1053 = $1052&255;
        $1054 = $s;
        $1055 = (($1054) + 20|0);
        $1056 = HEAP32[$1055>>2]|0;
        $1057 = (($1056) + 1)|0;
        HEAP32[$1055>>2] = $1057;
        $1058 = $s;
        $1059 = (($1058) + 8|0);
        $1060 = HEAP32[$1059>>2]|0;
        $1061 = (($1060) + ($1056)|0);
        HEAP8[$1061>>0] = $1053;
        $1062 = $1;
        $1063 = (($1062) + 8|0);
        $1064 = HEAP32[$1063>>2]|0;
        $1065 = $1064 & 255;
        $1066 = $1065&255;
        $1067 = $s;
        $1068 = (($1067) + 20|0);
        $1069 = HEAP32[$1068>>2]|0;
        $1070 = (($1069) + 1)|0;
        HEAP32[$1068>>2] = $1070;
        $1071 = $s;
        $1072 = (($1071) + 8|0);
        $1073 = HEAP32[$1072>>2]|0;
        $1074 = (($1073) + ($1069)|0);
        HEAP8[$1074>>0] = $1066;
        $1075 = $1;
        $1076 = (($1075) + 8|0);
        $1077 = HEAP32[$1076>>2]|0;
        $1078 = $1077 >>> 8;
        $1079 = $1078 & 255;
        $1080 = $1079&255;
        $1081 = $s;
        $1082 = (($1081) + 20|0);
        $1083 = HEAP32[$1082>>2]|0;
        $1084 = (($1083) + 1)|0;
        HEAP32[$1082>>2] = $1084;
        $1085 = $s;
        $1086 = (($1085) + 8|0);
        $1087 = HEAP32[$1086>>2]|0;
        $1088 = (($1087) + ($1083)|0);
        HEAP8[$1088>>0] = $1080;
        $1089 = $1;
        $1090 = (($1089) + 8|0);
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = $1091 >>> 16;
        $1093 = $1092 & 255;
        $1094 = $1093&255;
        $1095 = $s;
        $1096 = (($1095) + 20|0);
        $1097 = HEAP32[$1096>>2]|0;
        $1098 = (($1097) + 1)|0;
        HEAP32[$1096>>2] = $1098;
        $1099 = $s;
        $1100 = (($1099) + 8|0);
        $1101 = HEAP32[$1100>>2]|0;
        $1102 = (($1101) + ($1097)|0);
        HEAP8[$1102>>0] = $1094;
        $1103 = $1;
        $1104 = (($1103) + 8|0);
        $1105 = HEAP32[$1104>>2]|0;
        $1106 = $1105 >>> 24;
        $1107 = $1106 & 255;
        $1108 = $1107&255;
        $1109 = $s;
        $1110 = (($1109) + 20|0);
        $1111 = HEAP32[$1110>>2]|0;
        $1112 = (($1111) + 1)|0;
        HEAP32[$1110>>2] = $1112;
        $1113 = $s;
        $1114 = (($1113) + 8|0);
        $1115 = HEAP32[$1114>>2]|0;
        $1116 = (($1115) + ($1111)|0);
        HEAP8[$1116>>0] = $1108;
       } else {
        $1117 = $s;
        $1118 = $1;
        $1119 = (($1118) + 48|0);
        $1120 = HEAP32[$1119>>2]|0;
        $1121 = $1120 >>> 16;
        _putShortMSB($1117,$1121);
        $1122 = $s;
        $1123 = $1;
        $1124 = (($1123) + 48|0);
        $1125 = HEAP32[$1124>>2]|0;
        $1126 = $1125 & 65535;
        _putShortMSB($1122,$1126);
       }
       $1127 = $1;
       _flush_pending($1127);
       $1128 = $s;
       $1129 = (($1128) + 24|0);
       $1130 = HEAP32[$1129>>2]|0;
       $1131 = ($1130|0)>(0);
       if ($1131) {
        $1132 = $s;
        $1133 = (($1132) + 24|0);
        $1134 = HEAP32[$1133>>2]|0;
        $1135 = (0 - ($1134))|0;
        $1136 = $s;
        $1137 = (($1136) + 24|0);
        HEAP32[$1137>>2] = $1135;
       }
       $1138 = $s;
       $1139 = (($1138) + 20|0);
       $1140 = HEAP32[$1139>>2]|0;
       $1141 = ($1140|0)!=(0);
       $1142 = $1141 ? 0 : 1;
       $0 = $1142;
       $1143 = $0;
       STACKTOP = sp;return ($1143|0);
      }
     } while(0);
     $33 = HEAP32[((27608 + 16|0))>>2]|0;
     $34 = $1;
     $35 = (($34) + 24|0);
     HEAP32[$35>>2] = $33;
     $0 = -2;
     $1143 = $0;
     STACKTOP = sp;return ($1143|0);
    }
   }
  }
 }
 $0 = -2;
 $1143 = $0;
 STACKTOP = sp;return ($1143|0);
}
function _lm_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3<<1;
 $5 = $0;
 $6 = (($5) + 60|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 $11 = $0;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<1)|0);
 HEAP16[$14>>1] = 0;
 $15 = $0;
 $16 = (($15) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (($18) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - 1)|0;
 $22 = $21<<1;
 _memset(($17|0),0,($22|0))|0;
 $23 = $0;
 $24 = (($23) + 132|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (24640 + (($25*12)|0)|0);
 $27 = (($26) + 2|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $0;
 $31 = (($30) + 128|0);
 HEAP32[$31>>2] = $29;
 $32 = $0;
 $33 = (($32) + 132|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (24640 + (($34*12)|0)|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $0;
 $39 = (($38) + 140|0);
 HEAP32[$39>>2] = $37;
 $40 = $0;
 $41 = (($40) + 132|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (24640 + (($42*12)|0)|0);
 $44 = (($43) + 4|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $0;
 $48 = (($47) + 144|0);
 HEAP32[$48>>2] = $46;
 $49 = $0;
 $50 = (($49) + 132|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (24640 + (($51*12)|0)|0);
 $53 = (($52) + 6|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = $0;
 $57 = (($56) + 124|0);
 HEAP32[$57>>2] = $55;
 $58 = $0;
 $59 = (($58) + 108|0);
 HEAP32[$59>>2] = 0;
 $60 = $0;
 $61 = (($60) + 92|0);
 HEAP32[$61>>2] = 0;
 $62 = $0;
 $63 = (($62) + 116|0);
 HEAP32[$63>>2] = 0;
 $64 = $0;
 $65 = (($64) + 5812|0);
 HEAP32[$65>>2] = 0;
 $66 = $0;
 $67 = (($66) + 120|0);
 HEAP32[$67>>2] = 2;
 $68 = $0;
 $69 = (($68) + 96|0);
 HEAP32[$69>>2] = 2;
 $70 = $0;
 $71 = (($70) + 104|0);
 HEAP32[$71>>2] = 0;
 $72 = $0;
 $73 = (($72) + 72|0);
 HEAP32[$73>>2] = 0;
 STACKTOP = sp;return;
}
function _fill_window($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $init = 0, $m = 0, $more = 0, $n = 0, $p = 0, $str = 0, $wsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $wsize = $3;
 while(1) {
  $4 = $0;
  $5 = (($4) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = (($7) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) - ($9))|0;
  $11 = $0;
  $12 = (($11) + 108|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($10) - ($13))|0;
  $more = $14;
  $15 = $0;
  $16 = (($15) + 108|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $wsize;
  $19 = $0;
  $20 = (($19) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 262)|0;
  $23 = (($18) + ($22))|0;
  $24 = ($17>>>0)>=($23>>>0);
  if ($24) {
   $25 = $0;
   $26 = (($25) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $0;
   $29 = (($28) + 56|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $wsize;
   $32 = (($30) + ($31)|0);
   $33 = $wsize;
   _memcpy(($27|0),($32|0),($33|0))|0;
   $34 = $wsize;
   $35 = $0;
   $36 = (($35) + 112|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - ($34))|0;
   HEAP32[$36>>2] = $38;
   $39 = $wsize;
   $40 = $0;
   $41 = (($40) + 108|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) - ($39))|0;
   HEAP32[$41>>2] = $43;
   $44 = $wsize;
   $45 = $0;
   $46 = (($45) + 92|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) - ($44))|0;
   HEAP32[$46>>2] = $48;
   $49 = $0;
   $50 = (($49) + 76|0);
   $51 = HEAP32[$50>>2]|0;
   $n = $51;
   $52 = $n;
   $53 = $0;
   $54 = (($53) + 68|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($52<<1)|0);
   $p = $56;
   while(1) {
    $57 = $p;
    $58 = (($57) + -2|0);
    $p = $58;
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $m = $60;
    $61 = $m;
    $62 = $wsize;
    $63 = ($61>>>0)>=($62>>>0);
    if ($63) {
     $64 = $m;
     $65 = $wsize;
     $66 = (($64) - ($65))|0;
     $68 = $66;
    } else {
     $68 = 0;
    }
    $67 = $68&65535;
    $69 = $p;
    HEAP16[$69>>1] = $67;
    $70 = $n;
    $71 = (($70) + -1)|0;
    $n = $71;
    $72 = ($71|0)!=(0);
    if (!($72)) {
     break;
    }
   }
   $73 = $wsize;
   $n = $73;
   $74 = $n;
   $75 = $0;
   $76 = (($75) + 64|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74<<1)|0);
   $p = $78;
   while(1) {
    $79 = $p;
    $80 = (($79) + -2|0);
    $p = $80;
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $m = $82;
    $83 = $m;
    $84 = $wsize;
    $85 = ($83>>>0)>=($84>>>0);
    if ($85) {
     $86 = $m;
     $87 = $wsize;
     $88 = (($86) - ($87))|0;
     $90 = $88;
    } else {
     $90 = 0;
    }
    $89 = $90&65535;
    $91 = $p;
    HEAP16[$91>>1] = $89;
    $92 = $n;
    $93 = (($92) + -1)|0;
    $n = $93;
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
   }
   $95 = $wsize;
   $96 = $more;
   $97 = (($96) + ($95))|0;
   $more = $97;
  }
  $98 = $0;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if ($102) {
   label = 17;
   break;
  }
  $103 = $0;
  $104 = HEAP32[$103>>2]|0;
  $105 = $0;
  $106 = (($105) + 56|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $0;
  $109 = (($108) + 108|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($107) + ($110)|0);
  $112 = $0;
  $113 = (($112) + 116|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($111) + ($114)|0);
  $116 = $more;
  $117 = (_read_buf($104,$115,$116)|0);
  $n = $117;
  $118 = $n;
  $119 = $0;
  $120 = (($119) + 116|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($118))|0;
  HEAP32[$120>>2] = $122;
  $123 = $0;
  $124 = (($123) + 116|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $0;
  $127 = (($126) + 5812|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($125) + ($128))|0;
  $130 = ($129>>>0)>=(3);
  if ($130) {
   $131 = $0;
   $132 = (($131) + 108|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $0;
   $135 = (($134) + 5812|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) - ($136))|0;
   $str = $137;
   $138 = $str;
   $139 = $0;
   $140 = (($139) + 56|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + ($138)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $0;
   $146 = (($145) + 72|0);
   HEAP32[$146>>2] = $144;
   $147 = $0;
   $148 = (($147) + 72|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $0;
   $151 = (($150) + 88|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $149 << $152;
   $154 = $str;
   $155 = (($154) + 1)|0;
   $156 = $0;
   $157 = (($156) + 56|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + ($155)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $153 ^ $161;
   $163 = $0;
   $164 = (($163) + 84|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $162 & $165;
   $167 = $0;
   $168 = (($167) + 72|0);
   HEAP32[$168>>2] = $166;
   while(1) {
    $169 = $0;
    $170 = (($169) + 5812|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($171|0)!=(0);
    if (!($172)) {
     break;
    }
    $173 = $0;
    $174 = (($173) + 72|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $0;
    $177 = (($176) + 88|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $175 << $178;
    $180 = $str;
    $181 = (($180) + 3)|0;
    $182 = (($181) - 1)|0;
    $183 = $0;
    $184 = (($183) + 56|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + ($182)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $179 ^ $188;
    $190 = $0;
    $191 = (($190) + 84|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & $192;
    $194 = $0;
    $195 = (($194) + 72|0);
    HEAP32[$195>>2] = $193;
    $196 = $0;
    $197 = (($196) + 72|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = $0;
    $200 = (($199) + 68|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + ($198<<1)|0);
    $203 = HEAP16[$202>>1]|0;
    $204 = $str;
    $205 = $0;
    $206 = (($205) + 52|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $204 & $207;
    $209 = $0;
    $210 = (($209) + 64|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<1)|0);
    HEAP16[$212>>1] = $203;
    $213 = $str;
    $214 = $213&65535;
    $215 = $0;
    $216 = (($215) + 72|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $0;
    $219 = (($218) + 68|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + ($217<<1)|0);
    HEAP16[$221>>1] = $214;
    $222 = $str;
    $223 = (($222) + 1)|0;
    $str = $223;
    $224 = $0;
    $225 = (($224) + 5812|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + -1)|0;
    HEAP32[$225>>2] = $227;
    $228 = $0;
    $229 = (($228) + 116|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $0;
    $232 = (($231) + 5812|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($230) + ($233))|0;
    $235 = ($234>>>0)<(3);
    if ($235) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 22) {
    label = 0;
   }
  }
  $236 = $0;
  $237 = (($236) + 116|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238>>>0)<(262);
  if ($239) {
   $240 = $0;
   $241 = HEAP32[$240>>2]|0;
   $242 = (($241) + 4|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)!=(0);
   $323 = $244;
  } else {
   $323 = 0;
  }
  if (!($323)) {
   break;
  }
 }
 if ((label|0) == 17) {
 }
 $245 = $0;
 $246 = (($245) + 5824|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $0;
 $249 = (($248) + 60|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = ($247>>>0)<($250>>>0);
 if (!($251)) {
  STACKTOP = sp;return;
 }
 $252 = $0;
 $253 = (($252) + 108|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $0;
 $256 = (($255) + 116|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (($254) + ($257))|0;
 $curr = $258;
 $259 = $0;
 $260 = (($259) + 5824|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = $curr;
 $263 = ($261>>>0)<($262>>>0);
 if ($263) {
  $264 = $0;
  $265 = (($264) + 60|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = $curr;
  $268 = (($266) - ($267))|0;
  $init = $268;
  $269 = $init;
  $270 = ($269>>>0)>(258);
  if ($270) {
   $init = 258;
  }
  $271 = $0;
  $272 = (($271) + 56|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $curr;
  $275 = (($273) + ($274)|0);
  $276 = $init;
  _memset(($275|0),0,($276|0))|0;
  $277 = $curr;
  $278 = $init;
  $279 = (($277) + ($278))|0;
  $280 = $0;
  $281 = (($280) + 5824|0);
  HEAP32[$281>>2] = $279;
 } else {
  $282 = $0;
  $283 = (($282) + 5824|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $curr;
  $286 = (($285) + 258)|0;
  $287 = ($284>>>0)<($286>>>0);
  if ($287) {
   $288 = $curr;
   $289 = (($288) + 258)|0;
   $290 = $0;
   $291 = (($290) + 5824|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($289) - ($292))|0;
   $init = $293;
   $294 = $init;
   $295 = $0;
   $296 = (($295) + 60|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $0;
   $299 = (($298) + 5824|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (($297) - ($300))|0;
   $302 = ($294>>>0)>($301>>>0);
   if ($302) {
    $303 = $0;
    $304 = (($303) + 60|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $0;
    $307 = (($306) + 5824|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($305) - ($308))|0;
    $init = $309;
   }
   $310 = $0;
   $311 = (($310) + 56|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = $0;
   $314 = (($313) + 5824|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($312) + ($315)|0);
   $317 = $init;
   _memset(($316|0),0,($317|0))|0;
   $318 = $init;
   $319 = $0;
   $320 = (($319) + 5824|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (($321) + ($318))|0;
   HEAP32[$320>>2] = $322;
  }
 }
 STACKTOP = sp;return;
}
function _putShortMSB($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $b;
 $2 = $1;
 $3 = $2 >>> 8;
 $4 = $3&255;
 $5 = $0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($7)|0);
 HEAP8[$12>>0] = $4;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $0;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($18)|0);
 HEAP8[$23>>0] = $15;
 STACKTOP = sp;return;
}
function _flush_pending($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $s = $3;
 $4 = $s;
 __tr_flush_bits($4);
 $5 = $s;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $len = $7;
 $8 = $len;
 $9 = $0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $len = $15;
 }
 $16 = $len;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $s;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $len;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $len;
 $26 = $0;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $len;
 $31 = $s;
 $32 = (($31) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30)|0);
 HEAP32[$32>>2] = $34;
 $35 = $len;
 $36 = $0;
 $37 = (($36) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35))|0;
 HEAP32[$37>>2] = $39;
 $40 = $len;
 $41 = $0;
 $42 = (($41) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) - ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $len;
 $46 = $s;
 $47 = (($46) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) - ($45))|0;
 HEAP32[$47>>2] = $49;
 $50 = $s;
 $51 = (($50) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = $s;
 $55 = (($54) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $s;
 $58 = (($57) + 16|0);
 HEAP32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function _deflate_huff($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    break;
   }
  }
  $14 = $1;
  $15 = (($14) + 96|0);
  HEAP32[$15>>2] = 0;
  $16 = $1;
  $17 = (($16) + 108|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 56|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18)|0);
  $23 = HEAP8[$22>>0]|0;
  $cc = $23;
  $24 = $1;
  $25 = (($24) + 5792|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 5796|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<1)|0);
  HEAP16[$30>>1] = 0;
  $31 = $cc;
  $32 = $1;
  $33 = (($32) + 5792|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = $1;
  $37 = (($36) + 5784|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($34)|0);
  HEAP8[$39>>0] = $31;
  $40 = $cc;
  $41 = $40&255;
  $42 = $1;
  $43 = (($42) + 148|0);
  $44 = (($43) + ($41<<2)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = (($45) + 1)<<16>>16;
  HEAP16[$44>>1] = $46;
  $47 = $1;
  $48 = (($47) + 5792|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = (($50) + 5788|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) - 1)|0;
  $54 = ($49|0)==($53|0);
  $55 = $54&1;
  $bflush = $55;
  $56 = $1;
  $57 = (($56) + 116|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + -1)|0;
  HEAP32[$57>>2] = $59;
  $60 = $1;
  $61 = (($60) + 108|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $bflush;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $1;
   $67 = $1;
   $68 = (($67) + 92|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)>=(0);
   if ($70) {
    $71 = $1;
    $72 = (($71) + 92|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $1;
    $75 = (($74) + 56|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73)|0);
    $85 = $77;
   } else {
    $85 = 0;
   }
   $78 = $1;
   $79 = (($78) + 108|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = (($81) + 92|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($80) - ($83))|0;
   __tr_flush_block($66,$85,$84,0);
   $86 = $1;
   $87 = (($86) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $1;
   $90 = (($89) + 92|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = HEAP32[$91>>2]|0;
   _flush_pending($92);
   $93 = $1;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0);
   if ($97) {
    label = 13;
    break;
   }
  }
 }
 if ((label|0) == 13) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $12 = $2;
 $13 = ($12|0)==(0);
 if ($13) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $98 = $1;
 $99 = (($98) + 5812|0);
 HEAP32[$99>>2] = 0;
 $100 = $2;
 $101 = ($100|0)==(4);
 if ($101) {
  $102 = $1;
  $103 = $1;
  $104 = (($103) + 92|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)>=(0);
  if ($106) {
   $107 = $1;
   $108 = (($107) + 92|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $1;
   $111 = (($110) + 56|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + ($109)|0);
   $121 = $113;
  } else {
   $121 = 0;
  }
  $114 = $1;
  $115 = (($114) + 108|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $1;
  $118 = (($117) + 92|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($116) - ($119))|0;
  __tr_flush_block($102,$121,$120,1);
  $122 = $1;
  $123 = (($122) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $1;
  $126 = (($125) + 92|0);
  HEAP32[$126>>2] = $124;
  $127 = $1;
  $128 = HEAP32[$127>>2]|0;
  _flush_pending($128);
  $129 = $1;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)==(0);
  if ($133) {
   $0 = 2;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  } else {
   $0 = 3;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  }
 }
 $134 = $1;
 $135 = (($134) + 5792|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0);
 do {
  if ($137) {
   $138 = $1;
   $139 = $1;
   $140 = (($139) + 92|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)>=(0);
   if ($142) {
    $143 = $1;
    $144 = (($143) + 92|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $1;
    $147 = (($146) + 56|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($145)|0);
    $157 = $149;
   } else {
    $157 = 0;
   }
   $150 = $1;
   $151 = (($150) + 108|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $1;
   $154 = (($153) + 92|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($152) - ($155))|0;
   __tr_flush_block($138,$157,$156,0);
   $158 = $1;
   $159 = (($158) + 108|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $1;
   $162 = (($161) + 92|0);
   HEAP32[$162>>2] = $160;
   $163 = $1;
   $164 = HEAP32[$163>>2]|0;
   _flush_pending($164);
   $165 = $1;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + 16|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(0);
   if (!($169)) {
    break;
   }
   $0 = 0;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  }
 } while(0);
 $0 = 1;
 $170 = $0;
 STACKTOP = sp;return ($170|0);
}
function _deflate_rle($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0;
 var $dist = 0, $len = 0, $prev = 0, $scan = 0, $strend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<=(258);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<=(258);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $18 = $1;
  $19 = (($18) + 96|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = (($20) + 116|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>=(3);
  if ($23) {
   $24 = $1;
   $25 = (($24) + 108|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26>>>0)>(0);
   if ($27) {
    $28 = $1;
    $29 = (($28) + 56|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = (($31) + 108|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + ($33)|0);
    $35 = (($34) + -1|0);
    $scan = $35;
    $36 = $scan;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $prev = $38;
    $39 = $prev;
    $40 = $scan;
    $41 = (($40) + 1|0);
    $scan = $41;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = ($39|0)==($43|0);
    if ($44) {
     $45 = $prev;
     $46 = $scan;
     $47 = (($46) + 1|0);
     $scan = $47;
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = ($45|0)==($49|0);
     if ($50) {
      $51 = $prev;
      $52 = $scan;
      $53 = (($52) + 1|0);
      $scan = $53;
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = ($51|0)==($55|0);
      if ($56) {
       $57 = $1;
       $58 = (($57) + 56|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $1;
       $61 = (($60) + 108|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($59) + ($62)|0);
       $64 = (($63) + 258|0);
       $strend = $64;
       while(1) {
        $65 = $prev;
        $66 = $scan;
        $67 = (($66) + 1|0);
        $scan = $67;
        $68 = HEAP8[$67>>0]|0;
        $69 = $68&255;
        $70 = ($65|0)==($69|0);
        if ($70) {
         $71 = $prev;
         $72 = $scan;
         $73 = (($72) + 1|0);
         $scan = $73;
         $74 = HEAP8[$73>>0]|0;
         $75 = $74&255;
         $76 = ($71|0)==($75|0);
         if ($76) {
          $77 = $prev;
          $78 = $scan;
          $79 = (($78) + 1|0);
          $scan = $79;
          $80 = HEAP8[$79>>0]|0;
          $81 = $80&255;
          $82 = ($77|0)==($81|0);
          if ($82) {
           $83 = $prev;
           $84 = $scan;
           $85 = (($84) + 1|0);
           $scan = $85;
           $86 = HEAP8[$85>>0]|0;
           $87 = $86&255;
           $88 = ($83|0)==($87|0);
           if ($88) {
            $89 = $prev;
            $90 = $scan;
            $91 = (($90) + 1|0);
            $scan = $91;
            $92 = HEAP8[$91>>0]|0;
            $93 = $92&255;
            $94 = ($89|0)==($93|0);
            if ($94) {
             $95 = $prev;
             $96 = $scan;
             $97 = (($96) + 1|0);
             $scan = $97;
             $98 = HEAP8[$97>>0]|0;
             $99 = $98&255;
             $100 = ($95|0)==($99|0);
             if ($100) {
              $101 = $prev;
              $102 = $scan;
              $103 = (($102) + 1|0);
              $scan = $103;
              $104 = HEAP8[$103>>0]|0;
              $105 = $104&255;
              $106 = ($101|0)==($105|0);
              if ($106) {
               $107 = $prev;
               $108 = $scan;
               $109 = (($108) + 1|0);
               $scan = $109;
               $110 = HEAP8[$109>>0]|0;
               $111 = $110&255;
               $112 = ($107|0)==($111|0);
               if ($112) {
                $113 = $scan;
                $114 = $strend;
                $115 = ($113>>>0)<($114>>>0);
                $377 = $115;
               } else {
                $377 = 0;
               }
              } else {
               $377 = 0;
              }
             } else {
              $377 = 0;
             }
            } else {
             $377 = 0;
            }
           } else {
            $377 = 0;
           }
          } else {
           $377 = 0;
          }
         } else {
          $377 = 0;
         }
        } else {
         $377 = 0;
        }
        if (!($377)) {
         break;
        }
       }
       $116 = $strend;
       $117 = $scan;
       $118 = $116;
       $119 = $117;
       $120 = (($118) - ($119))|0;
       $121 = (258 - ($120))|0;
       $122 = $1;
       $123 = (($122) + 96|0);
       HEAP32[$123>>2] = $121;
       $124 = $1;
       $125 = (($124) + 96|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $1;
       $128 = (($127) + 116|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ($126>>>0)>($129>>>0);
       if ($130) {
        $131 = $1;
        $132 = (($131) + 116|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = $1;
        $135 = (($134) + 96|0);
        HEAP32[$135>>2] = $133;
       }
      }
     }
    }
   }
  }
  $136 = $1;
  $137 = (($136) + 96|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138>>>0)>=(3);
  if ($139) {
   $140 = $1;
   $141 = (($140) + 96|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) - 3)|0;
   $144 = $143&255;
   $len = $144;
   $dist = 1;
   $145 = $dist;
   $146 = $1;
   $147 = (($146) + 5792|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $1;
   $150 = (($149) + 5796|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + ($148<<1)|0);
   HEAP16[$152>>1] = $145;
   $153 = $len;
   $154 = $1;
   $155 = (($154) + 5792|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$155>>2] = $157;
   $158 = $1;
   $159 = (($158) + 5784|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($156)|0);
   HEAP8[$161>>0] = $153;
   $162 = $dist;
   $163 = (($162) + -1)<<16>>16;
   $dist = $163;
   $164 = $len;
   $165 = $164&255;
   $166 = (25272 + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + 256)|0;
   $170 = (($169) + 1)|0;
   $171 = $1;
   $172 = (($171) + 148|0);
   $173 = (($172) + ($170<<2)|0);
   $174 = HEAP16[$173>>1]|0;
   $175 = (($174) + 1)<<16>>16;
   HEAP16[$173>>1] = $175;
   $176 = $dist;
   $177 = $176&65535;
   $178 = ($177|0)<(256);
   if ($178) {
    $179 = $dist;
    $180 = $179&65535;
    $181 = (24760 + ($180)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $194 = $183;
   } else {
    $184 = $dist;
    $185 = $184&65535;
    $186 = $185 >> 7;
    $187 = (256 + ($186))|0;
    $188 = (24760 + ($187)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    $194 = $190;
   }
   $191 = $1;
   $192 = (($191) + 2440|0);
   $193 = (($192) + ($194<<2)|0);
   $195 = HEAP16[$193>>1]|0;
   $196 = (($195) + 1)<<16>>16;
   HEAP16[$193>>1] = $196;
   $197 = $1;
   $198 = (($197) + 5792|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $1;
   $201 = (($200) + 5788|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) - 1)|0;
   $204 = ($199|0)==($203|0);
   $205 = $204&1;
   $bflush = $205;
   $206 = $1;
   $207 = (($206) + 96|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $1;
   $210 = (($209) + 116|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) - ($208))|0;
   HEAP32[$210>>2] = $212;
   $213 = $1;
   $214 = (($213) + 96|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $1;
   $217 = (($216) + 108|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + ($215))|0;
   HEAP32[$217>>2] = $219;
   $220 = $1;
   $221 = (($220) + 96|0);
   HEAP32[$221>>2] = 0;
  } else {
   $222 = $1;
   $223 = (($222) + 108|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $1;
   $226 = (($225) + 56|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + ($224)|0);
   $229 = HEAP8[$228>>0]|0;
   $cc = $229;
   $230 = $1;
   $231 = (($230) + 5792|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $1;
   $234 = (($233) + 5796|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (($235) + ($232<<1)|0);
   HEAP16[$236>>1] = 0;
   $237 = $cc;
   $238 = $1;
   $239 = (($238) + 5792|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = (($240) + 1)|0;
   HEAP32[$239>>2] = $241;
   $242 = $1;
   $243 = (($242) + 5784|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + ($240)|0);
   HEAP8[$245>>0] = $237;
   $246 = $cc;
   $247 = $246&255;
   $248 = $1;
   $249 = (($248) + 148|0);
   $250 = (($249) + ($247<<2)|0);
   $251 = HEAP16[$250>>1]|0;
   $252 = (($251) + 1)<<16>>16;
   HEAP16[$250>>1] = $252;
   $253 = $1;
   $254 = (($253) + 5792|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $1;
   $257 = (($256) + 5788|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) - 1)|0;
   $260 = ($255|0)==($259|0);
   $261 = $260&1;
   $bflush = $261;
   $262 = $1;
   $263 = (($262) + 116|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + -1)|0;
   HEAP32[$263>>2] = $265;
   $266 = $1;
   $267 = (($266) + 108|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + 1)|0;
   HEAP32[$267>>2] = $269;
  }
  $270 = $bflush;
  $271 = ($270|0)!=(0);
  if ($271) {
   $272 = $1;
   $273 = $1;
   $274 = (($273) + 92|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($275|0)>=(0);
   if ($276) {
    $277 = $1;
    $278 = (($277) + 92|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = $1;
    $281 = (($280) + 56|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + ($279)|0);
    $291 = $283;
   } else {
    $291 = 0;
   }
   $284 = $1;
   $285 = (($284) + 108|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $1;
   $288 = (($287) + 92|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($286) - ($289))|0;
   __tr_flush_block($272,$291,$290,0);
   $292 = $1;
   $293 = (($292) + 108|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $1;
   $296 = (($295) + 92|0);
   HEAP32[$296>>2] = $294;
   $297 = $1;
   $298 = HEAP32[$297>>2]|0;
   _flush_pending($298);
   $299 = $1;
   $300 = HEAP32[$299>>2]|0;
   $301 = (($300) + 16|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = ($302|0)==(0);
   if ($303) {
    label = 41;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 else if ((label|0) == 7) {
  $304 = $1;
  $305 = (($304) + 5812|0);
  HEAP32[$305>>2] = 0;
  $306 = $2;
  $307 = ($306|0)==(4);
  if ($307) {
   $308 = $1;
   $309 = $1;
   $310 = (($309) + 92|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = ($311|0)>=(0);
   if ($312) {
    $313 = $1;
    $314 = (($313) + 92|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $1;
    $317 = (($316) + 56|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + ($315)|0);
    $327 = $319;
   } else {
    $327 = 0;
   }
   $320 = $1;
   $321 = (($320) + 108|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = $1;
   $324 = (($323) + 92|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($322) - ($325))|0;
   __tr_flush_block($308,$327,$326,1);
   $328 = $1;
   $329 = (($328) + 108|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $1;
   $332 = (($331) + 92|0);
   HEAP32[$332>>2] = $330;
   $333 = $1;
   $334 = HEAP32[$333>>2]|0;
   _flush_pending($334);
   $335 = $1;
   $336 = HEAP32[$335>>2]|0;
   $337 = (($336) + 16|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($338|0)==(0);
   if ($339) {
    $0 = 2;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   } else {
    $0 = 3;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   }
  }
  $340 = $1;
  $341 = (($340) + 5792|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = ($342|0)!=(0);
  do {
   if ($343) {
    $344 = $1;
    $345 = $1;
    $346 = (($345) + 92|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)>=(0);
    if ($348) {
     $349 = $1;
     $350 = (($349) + 92|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = $1;
     $353 = (($352) + 56|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($354) + ($351)|0);
     $363 = $355;
    } else {
     $363 = 0;
    }
    $356 = $1;
    $357 = (($356) + 108|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $1;
    $360 = (($359) + 92|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = (($358) - ($361))|0;
    __tr_flush_block($344,$363,$362,0);
    $364 = $1;
    $365 = (($364) + 108|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = $1;
    $368 = (($367) + 92|0);
    HEAP32[$368>>2] = $366;
    $369 = $1;
    $370 = HEAP32[$369>>2]|0;
    _flush_pending($370);
    $371 = $1;
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 16|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = ($374|0)==(0);
    if (!($375)) {
     break;
    }
    $0 = 0;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   }
  } while(0);
  $0 = 1;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 else if ((label|0) == 41) {
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 return (0)|0;
}
function _deflate_stored($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $max_block_size = 0, $max_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 $max_block_size = 65535;
 $3 = $max_block_size;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 5)|0;
 $8 = ($3>>>0)>($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) - 5)|0;
  $max_block_size = $12;
 }
 while(1) {
  $13 = $1;
  $14 = (($13) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15>>>0)<=(1);
  if ($16) {
   $17 = $1;
   _fill_window($17);
   $18 = $1;
   $19 = (($18) + 116|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = $2;
    $23 = ($22|0)==(0);
    if ($23) {
     label = 7;
     break;
    }
   }
   $24 = $1;
   $25 = (($24) + 116|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    label = 9;
    break;
   }
  }
  $28 = $1;
  $29 = (($28) + 116|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = (($31) + 108|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30))|0;
  HEAP32[$32>>2] = $34;
  $35 = $1;
  $36 = (($35) + 116|0);
  HEAP32[$36>>2] = 0;
  $37 = $1;
  $38 = (($37) + 92|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $max_block_size;
  $41 = (($39) + ($40))|0;
  $max_start = $41;
  $42 = $1;
  $43 = (($42) + 108|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  if ($45) {
   label = 13;
  } else {
   $46 = $1;
   $47 = (($46) + 108|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $max_start;
   $50 = ($48>>>0)>=($49>>>0);
   if ($50) {
    label = 13;
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $51 = $1;
   $52 = (($51) + 108|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $max_start;
   $55 = (($53) - ($54))|0;
   $56 = $1;
   $57 = (($56) + 116|0);
   HEAP32[$57>>2] = $55;
   $58 = $max_start;
   $59 = $1;
   $60 = (($59) + 108|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = $1;
   $63 = (($62) + 92|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)>=(0);
   if ($65) {
    $66 = $1;
    $67 = (($66) + 92|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $1;
    $70 = (($69) + 56|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68)|0);
    $80 = $72;
   } else {
    $80 = 0;
   }
   $73 = $1;
   $74 = (($73) + 108|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $1;
   $77 = (($76) + 92|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($75) - ($78))|0;
   __tr_flush_block($61,$80,$79,0);
   $81 = $1;
   $82 = (($81) + 108|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 92|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = HEAP32[$86>>2]|0;
   _flush_pending($87);
   $88 = $1;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 16|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==(0);
   if ($92) {
    label = 17;
    break;
   }
  }
  $93 = $1;
  $94 = (($93) + 108|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $1;
  $97 = (($96) + 92|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) - ($98))|0;
  $100 = $1;
  $101 = (($100) + 44|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) - 262)|0;
  $104 = ($99>>>0)>=($103>>>0);
  if ($104) {
   $105 = $1;
   $106 = $1;
   $107 = (($106) + 92|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)>=(0);
   if ($109) {
    $110 = $1;
    $111 = (($110) + 92|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $1;
    $114 = (($113) + 56|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + ($112)|0);
    $124 = $116;
   } else {
    $124 = 0;
   }
   $117 = $1;
   $118 = (($117) + 108|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 92|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($119) - ($122))|0;
   __tr_flush_block($105,$124,$123,0);
   $125 = $1;
   $126 = (($125) + 108|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $1;
   $129 = (($128) + 92|0);
   HEAP32[$129>>2] = $127;
   $130 = $1;
   $131 = HEAP32[$130>>2]|0;
   _flush_pending($131);
   $132 = $1;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(0);
   if ($136) {
    label = 24;
    break;
   }
  }
 }
 if ((label|0) == 7) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 9) {
  $137 = $1;
  $138 = (($137) + 5812|0);
  HEAP32[$138>>2] = 0;
  $139 = $2;
  $140 = ($139|0)==(4);
  if ($140) {
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 92|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)>=(0);
   if ($145) {
    $146 = $1;
    $147 = (($146) + 92|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $1;
    $150 = (($149) + 56|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151) + ($148)|0);
    $160 = $152;
   } else {
    $160 = 0;
   }
   $153 = $1;
   $154 = (($153) + 108|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 92|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($155) - ($158))|0;
   __tr_flush_block($141,$160,$159,1);
   $161 = $1;
   $162 = (($161) + 108|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $1;
   $165 = (($164) + 92|0);
   HEAP32[$165>>2] = $163;
   $166 = $1;
   $167 = HEAP32[$166>>2]|0;
   _flush_pending($167);
   $168 = $1;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(0);
   if ($172) {
    $0 = 2;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   } else {
    $0 = 3;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   }
  }
  $173 = $1;
  $174 = (($173) + 108|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $1;
  $177 = (($176) + 92|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($175|0)>($178|0);
  do {
   if ($179) {
    $180 = $1;
    $181 = $1;
    $182 = (($181) + 92|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)>=(0);
    if ($184) {
     $185 = $1;
     $186 = (($185) + 92|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $1;
     $189 = (($188) + 56|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + ($187)|0);
     $199 = $191;
    } else {
     $199 = 0;
    }
    $192 = $1;
    $193 = (($192) + 108|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $1;
    $196 = (($195) + 92|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($194) - ($197))|0;
    __tr_flush_block($180,$199,$198,0);
    $200 = $1;
    $201 = (($200) + 108|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $1;
    $204 = (($203) + 92|0);
    HEAP32[$204>>2] = $202;
    $205 = $1;
    $206 = HEAP32[$205>>2]|0;
    _flush_pending($206);
    $207 = $1;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + 16|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)==(0);
    if (!($211)) {
     break;
    }
    $0 = 0;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   }
  } while(0);
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 17) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 24) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 return (0)|0;
}
function _deflate_fast($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, $dist = 0, $hash_head = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<(262);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<(262);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $hash_head = 0;
  $18 = $1;
  $19 = (($18) + 116|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>=(3);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 88|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 << $27;
   $29 = $1;
   $30 = (($29) + 108|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = $1;
   $34 = (($33) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $28 ^ $38;
   $40 = $1;
   $41 = (($40) + 84|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $39 & $42;
   $44 = $1;
   $45 = (($44) + 72|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 68|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $1;
   $55 = (($54) + 108|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 52|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56 & $59;
   $61 = $1;
   $62 = (($61) + 64|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<1)|0);
   HEAP16[$64>>1] = $53;
   $65 = $53&65535;
   $hash_head = $65;
   $66 = $1;
   $67 = (($66) + 108|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&65535;
   $70 = $1;
   $71 = (($70) + 72|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 68|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<1)|0);
   HEAP16[$76>>1] = $69;
  }
  $77 = $hash_head;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $1;
   $80 = (($79) + 108|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $hash_head;
   $83 = (($81) - ($82))|0;
   $84 = $1;
   $85 = (($84) + 44|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) - 262)|0;
   $88 = ($83>>>0)<=($87>>>0);
   if ($88) {
    $89 = $1;
    $90 = $hash_head;
    $91 = (_longest_match($89,$90)|0);
    $92 = $1;
    $93 = (($92) + 96|0);
    HEAP32[$93>>2] = $91;
   }
  }
  $94 = $1;
  $95 = (($94) + 96|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96>>>0)>=(3);
  if ($97) {
   $98 = $1;
   $99 = (($98) + 96|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) - 3)|0;
   $102 = $101&255;
   $len = $102;
   $103 = $1;
   $104 = (($103) + 108|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $1;
   $107 = (($106) + 112|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($105) - ($108))|0;
   $110 = $109&65535;
   $dist = $110;
   $111 = $dist;
   $112 = $1;
   $113 = (($112) + 5792|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $1;
   $116 = (($115) + 5796|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114<<1)|0);
   HEAP16[$118>>1] = $111;
   $119 = $len;
   $120 = $1;
   $121 = (($120) + 5792|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 1)|0;
   HEAP32[$121>>2] = $123;
   $124 = $1;
   $125 = (($124) + 5784|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + ($122)|0);
   HEAP8[$127>>0] = $119;
   $128 = $dist;
   $129 = (($128) + -1)<<16>>16;
   $dist = $129;
   $130 = $len;
   $131 = $130&255;
   $132 = (25272 + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + 256)|0;
   $136 = (($135) + 1)|0;
   $137 = $1;
   $138 = (($137) + 148|0);
   $139 = (($138) + ($136<<2)|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = (($140) + 1)<<16>>16;
   HEAP16[$139>>1] = $141;
   $142 = $dist;
   $143 = $142&65535;
   $144 = ($143|0)<(256);
   if ($144) {
    $145 = $dist;
    $146 = $145&65535;
    $147 = (24760 + ($146)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $160 = $149;
   } else {
    $150 = $dist;
    $151 = $150&65535;
    $152 = $151 >> 7;
    $153 = (256 + ($152))|0;
    $154 = (24760 + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $160 = $156;
   }
   $157 = $1;
   $158 = (($157) + 2440|0);
   $159 = (($158) + ($160<<2)|0);
   $161 = HEAP16[$159>>1]|0;
   $162 = (($161) + 1)<<16>>16;
   HEAP16[$159>>1] = $162;
   $163 = $1;
   $164 = (($163) + 5792|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $1;
   $167 = (($166) + 5788|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) - 1)|0;
   $170 = ($165|0)==($169|0);
   $171 = $170&1;
   $bflush = $171;
   $172 = $1;
   $173 = (($172) + 96|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $1;
   $176 = (($175) + 116|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) - ($174))|0;
   HEAP32[$176>>2] = $178;
   $179 = $1;
   $180 = (($179) + 96|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $1;
   $183 = (($182) + 128|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181>>>0)<=($184>>>0);
   if ($185) {
    $186 = $1;
    $187 = (($186) + 116|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188>>>0)>=(3);
    if ($189) {
     $190 = $1;
     $191 = (($190) + 96|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (($192) + -1)|0;
     HEAP32[$191>>2] = $193;
     while(1) {
      $194 = $1;
      $195 = (($194) + 108|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = (($196) + 1)|0;
      HEAP32[$195>>2] = $197;
      $198 = $1;
      $199 = (($198) + 72|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $1;
      $202 = (($201) + 88|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = $200 << $203;
      $205 = $1;
      $206 = (($205) + 108|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 2)|0;
      $209 = $1;
      $210 = (($209) + 56|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = (($211) + ($208)|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = $213&255;
      $215 = $204 ^ $214;
      $216 = $1;
      $217 = (($216) + 84|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $215 & $218;
      $220 = $1;
      $221 = (($220) + 72|0);
      HEAP32[$221>>2] = $219;
      $222 = $1;
      $223 = (($222) + 72|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = $1;
      $226 = (($225) + 68|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = (($227) + ($224<<1)|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = $1;
      $231 = (($230) + 108|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $1;
      $234 = (($233) + 52|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $232 & $235;
      $237 = $1;
      $238 = (($237) + 64|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = (($239) + ($236<<1)|0);
      HEAP16[$240>>1] = $229;
      $241 = $229&65535;
      $hash_head = $241;
      $242 = $1;
      $243 = (($242) + 108|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = $244&65535;
      $246 = $1;
      $247 = (($246) + 72|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $1;
      $250 = (($249) + 68|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (($251) + ($248<<1)|0);
      HEAP16[$252>>1] = $245;
      $253 = $1;
      $254 = (($253) + 96|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (($255) + -1)|0;
      HEAP32[$254>>2] = $256;
      $257 = ($256|0)!=(0);
      if (!($257)) {
       break;
      }
     }
     $258 = $1;
     $259 = (($258) + 108|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = (($260) + 1)|0;
     HEAP32[$259>>2] = $261;
    } else {
     label = 24;
    }
   } else {
    label = 24;
   }
   if ((label|0) == 24) {
    label = 0;
    $262 = $1;
    $263 = (($262) + 96|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $1;
    $266 = (($265) + 108|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (($267) + ($264))|0;
    HEAP32[$266>>2] = $268;
    $269 = $1;
    $270 = (($269) + 96|0);
    HEAP32[$270>>2] = 0;
    $271 = $1;
    $272 = (($271) + 108|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $1;
    $275 = (($274) + 56|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + ($273)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $280 = $1;
    $281 = (($280) + 72|0);
    HEAP32[$281>>2] = $279;
    $282 = $1;
    $283 = (($282) + 72|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $1;
    $286 = (($285) + 88|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $284 << $287;
    $289 = $1;
    $290 = (($289) + 108|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = (($291) + 1)|0;
    $293 = $1;
    $294 = (($293) + 56|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($292)|0);
    $297 = HEAP8[$296>>0]|0;
    $298 = $297&255;
    $299 = $288 ^ $298;
    $300 = $1;
    $301 = (($300) + 84|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $299 & $302;
    $304 = $1;
    $305 = (($304) + 72|0);
    HEAP32[$305>>2] = $303;
   }
  } else {
   $306 = $1;
   $307 = (($306) + 108|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $1;
   $310 = (($309) + 56|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311) + ($308)|0);
   $313 = HEAP8[$312>>0]|0;
   $cc = $313;
   $314 = $1;
   $315 = (($314) + 5792|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $1;
   $318 = (($317) + 5796|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($316<<1)|0);
   HEAP16[$320>>1] = 0;
   $321 = $cc;
   $322 = $1;
   $323 = (($322) + 5792|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + 1)|0;
   HEAP32[$323>>2] = $325;
   $326 = $1;
   $327 = (($326) + 5784|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($328) + ($324)|0);
   HEAP8[$329>>0] = $321;
   $330 = $cc;
   $331 = $330&255;
   $332 = $1;
   $333 = (($332) + 148|0);
   $334 = (($333) + ($331<<2)|0);
   $335 = HEAP16[$334>>1]|0;
   $336 = (($335) + 1)<<16>>16;
   HEAP16[$334>>1] = $336;
   $337 = $1;
   $338 = (($337) + 5792|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $1;
   $341 = (($340) + 5788|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = (($342) - 1)|0;
   $344 = ($339|0)==($343|0);
   $345 = $344&1;
   $bflush = $345;
   $346 = $1;
   $347 = (($346) + 116|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + -1)|0;
   HEAP32[$347>>2] = $349;
   $350 = $1;
   $351 = (($350) + 108|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = (($352) + 1)|0;
   HEAP32[$351>>2] = $353;
  }
  $354 = $bflush;
  $355 = ($354|0)!=(0);
  if ($355) {
   $356 = $1;
   $357 = $1;
   $358 = (($357) + 92|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = ($359|0)>=(0);
   if ($360) {
    $361 = $1;
    $362 = (($361) + 92|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = $1;
    $365 = (($364) + 56|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($363)|0);
    $375 = $367;
   } else {
    $375 = 0;
   }
   $368 = $1;
   $369 = (($368) + 108|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = $1;
   $372 = (($371) + 92|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = (($370) - ($373))|0;
   __tr_flush_block($356,$375,$374,0);
   $376 = $1;
   $377 = (($376) + 108|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $1;
   $380 = (($379) + 92|0);
   HEAP32[$380>>2] = $378;
   $381 = $1;
   $382 = HEAP32[$381>>2]|0;
   _flush_pending($382);
   $383 = $1;
   $384 = HEAP32[$383>>2]|0;
   $385 = (($384) + 16|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($386|0)==(0);
   if ($387) {
    label = 32;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 7) {
  $388 = $1;
  $389 = (($388) + 108|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ($390>>>0)<(2);
  if ($391) {
   $392 = $1;
   $393 = (($392) + 108|0);
   $394 = HEAP32[$393>>2]|0;
   $397 = $394;
  } else {
   $397 = 2;
  }
  $395 = $1;
  $396 = (($395) + 5812|0);
  HEAP32[$396>>2] = $397;
  $398 = $2;
  $399 = ($398|0)==(4);
  if ($399) {
   $400 = $1;
   $401 = $1;
   $402 = (($401) + 92|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = ($403|0)>=(0);
   if ($404) {
    $405 = $1;
    $406 = (($405) + 92|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = $1;
    $409 = (($408) + 56|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = (($410) + ($407)|0);
    $419 = $411;
   } else {
    $419 = 0;
   }
   $412 = $1;
   $413 = (($412) + 108|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $1;
   $416 = (($415) + 92|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($414) - ($417))|0;
   __tr_flush_block($400,$419,$418,1);
   $420 = $1;
   $421 = (($420) + 108|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = $1;
   $424 = (($423) + 92|0);
   HEAP32[$424>>2] = $422;
   $425 = $1;
   $426 = HEAP32[$425>>2]|0;
   _flush_pending($426);
   $427 = $1;
   $428 = HEAP32[$427>>2]|0;
   $429 = (($428) + 16|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = ($430|0)==(0);
   if ($431) {
    $0 = 2;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   } else {
    $0 = 3;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   }
  }
  $432 = $1;
  $433 = (($432) + 5792|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = ($434|0)!=(0);
  do {
   if ($435) {
    $436 = $1;
    $437 = $1;
    $438 = (($437) + 92|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = ($439|0)>=(0);
    if ($440) {
     $441 = $1;
     $442 = (($441) + 92|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = $1;
     $445 = (($444) + 56|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = (($446) + ($443)|0);
     $455 = $447;
    } else {
     $455 = 0;
    }
    $448 = $1;
    $449 = (($448) + 108|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = $1;
    $452 = (($451) + 92|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (($450) - ($453))|0;
    __tr_flush_block($436,$455,$454,0);
    $456 = $1;
    $457 = (($456) + 108|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $1;
    $460 = (($459) + 92|0);
    HEAP32[$460>>2] = $458;
    $461 = $1;
    $462 = HEAP32[$461>>2]|0;
    _flush_pending($462);
    $463 = $1;
    $464 = HEAP32[$463>>2]|0;
    $465 = (($464) + 16|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466|0)==(0);
    if (!($467)) {
     break;
    }
    $0 = 0;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   }
  } while(0);
  $0 = 1;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 32) {
  $0 = 0;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 return (0)|0;
}
function _deflate_slow($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, $cc1 = 0, $dist = 0, $hash_head = 0, $len = 0;
 var $max_insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<(262);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<(262);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $hash_head = 0;
  $18 = $1;
  $19 = (($18) + 116|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>=(3);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 88|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 << $27;
   $29 = $1;
   $30 = (($29) + 108|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = $1;
   $34 = (($33) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $28 ^ $38;
   $40 = $1;
   $41 = (($40) + 84|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $39 & $42;
   $44 = $1;
   $45 = (($44) + 72|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 68|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $1;
   $55 = (($54) + 108|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 52|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56 & $59;
   $61 = $1;
   $62 = (($61) + 64|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<1)|0);
   HEAP16[$64>>1] = $53;
   $65 = $53&65535;
   $hash_head = $65;
   $66 = $1;
   $67 = (($66) + 108|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&65535;
   $70 = $1;
   $71 = (($70) + 72|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 68|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<1)|0);
   HEAP16[$76>>1] = $69;
  }
  $77 = $1;
  $78 = (($77) + 96|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $1;
  $81 = (($80) + 120|0);
  HEAP32[$81>>2] = $79;
  $82 = $1;
  $83 = (($82) + 112|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $1;
  $86 = (($85) + 100|0);
  HEAP32[$86>>2] = $84;
  $87 = $1;
  $88 = (($87) + 96|0);
  HEAP32[$88>>2] = 2;
  $89 = $hash_head;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $1;
   $92 = (($91) + 120|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $1;
   $95 = (($94) + 128|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($93>>>0)<($96>>>0);
   if ($97) {
    $98 = $1;
    $99 = (($98) + 108|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $hash_head;
    $102 = (($100) - ($101))|0;
    $103 = $1;
    $104 = (($103) + 44|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) - 262)|0;
    $107 = ($102>>>0)<=($106>>>0);
    if ($107) {
     $108 = $1;
     $109 = $hash_head;
     $110 = (_longest_match($108,$109)|0);
     $111 = $1;
     $112 = (($111) + 96|0);
     HEAP32[$112>>2] = $110;
     $113 = $1;
     $114 = (($113) + 96|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115>>>0)<=(5);
     do {
      if ($116) {
       $117 = $1;
       $118 = (($117) + 136|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(1);
       if (!($120)) {
        $121 = $1;
        $122 = (($121) + 96|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($123|0)==(3);
        if (!($124)) {
         break;
        }
        $125 = $1;
        $126 = (($125) + 108|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $1;
        $129 = (($128) + 112|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = (($127) - ($130))|0;
        $132 = ($131>>>0)>(4096);
        if (!($132)) {
         break;
        }
       }
       $133 = $1;
       $134 = (($133) + 96|0);
       HEAP32[$134>>2] = 2;
      }
     } while(0);
    }
   }
  }
  $135 = $1;
  $136 = (($135) + 120|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137>>>0)>=(3);
  if ($138) {
   $139 = $1;
   $140 = (($139) + 96|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $1;
   $143 = (($142) + 120|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($141>>>0)<=($144>>>0);
   if ($145) {
    $146 = $1;
    $147 = (($146) + 108|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $1;
    $150 = (($149) + 116|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($148) + ($151))|0;
    $153 = (($152) - 3)|0;
    $max_insert = $153;
    $154 = $1;
    $155 = (($154) + 120|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($156) - 3)|0;
    $158 = $157&255;
    $len = $158;
    $159 = $1;
    $160 = (($159) + 108|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) - 1)|0;
    $163 = $1;
    $164 = (($163) + 100|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($162) - ($165))|0;
    $167 = $166&65535;
    $dist = $167;
    $168 = $dist;
    $169 = $1;
    $170 = (($169) + 5792|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $1;
    $173 = (($172) + 5796|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($171<<1)|0);
    HEAP16[$175>>1] = $168;
    $176 = $len;
    $177 = $1;
    $178 = (($177) + 5792|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + 1)|0;
    HEAP32[$178>>2] = $180;
    $181 = $1;
    $182 = (($181) + 5784|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + ($179)|0);
    HEAP8[$184>>0] = $176;
    $185 = $dist;
    $186 = (($185) + -1)<<16>>16;
    $dist = $186;
    $187 = $len;
    $188 = $187&255;
    $189 = (25272 + ($188)|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = (($191) + 256)|0;
    $193 = (($192) + 1)|0;
    $194 = $1;
    $195 = (($194) + 148|0);
    $196 = (($195) + ($193<<2)|0);
    $197 = HEAP16[$196>>1]|0;
    $198 = (($197) + 1)<<16>>16;
    HEAP16[$196>>1] = $198;
    $199 = $dist;
    $200 = $199&65535;
    $201 = ($200|0)<(256);
    if ($201) {
     $202 = $dist;
     $203 = $202&65535;
     $204 = (24760 + ($203)|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $217 = $206;
    } else {
     $207 = $dist;
     $208 = $207&65535;
     $209 = $208 >> 7;
     $210 = (256 + ($209))|0;
     $211 = (24760 + ($210)|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $217 = $213;
    }
    $214 = $1;
    $215 = (($214) + 2440|0);
    $216 = (($215) + ($217<<2)|0);
    $218 = HEAP16[$216>>1]|0;
    $219 = (($218) + 1)<<16>>16;
    HEAP16[$216>>1] = $219;
    $220 = $1;
    $221 = (($220) + 5792|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $1;
    $224 = (($223) + 5788|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) - 1)|0;
    $227 = ($222|0)==($226|0);
    $228 = $227&1;
    $bflush = $228;
    $229 = $1;
    $230 = (($229) + 120|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) - 1)|0;
    $233 = $1;
    $234 = (($233) + 116|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) - ($232))|0;
    HEAP32[$234>>2] = $236;
    $237 = $1;
    $238 = (($237) + 120|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) - 2)|0;
    HEAP32[$238>>2] = $240;
    while(1) {
     $241 = $1;
     $242 = (($241) + 108|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + 1)|0;
     HEAP32[$242>>2] = $244;
     $245 = $max_insert;
     $246 = ($244>>>0)<=($245>>>0);
     if ($246) {
      $247 = $1;
      $248 = (($247) + 72|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = $1;
      $251 = (($250) + 88|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = $249 << $252;
      $254 = $1;
      $255 = (($254) + 108|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($256) + 2)|0;
      $258 = $1;
      $259 = (($258) + 56|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = (($260) + ($257)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = $253 ^ $263;
      $265 = $1;
      $266 = (($265) + 84|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $264 & $267;
      $269 = $1;
      $270 = (($269) + 72|0);
      HEAP32[$270>>2] = $268;
      $271 = $1;
      $272 = (($271) + 72|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $1;
      $275 = (($274) + 68|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = (($276) + ($273<<1)|0);
      $278 = HEAP16[$277>>1]|0;
      $279 = $1;
      $280 = (($279) + 108|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = $1;
      $283 = (($282) + 52|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $281 & $284;
      $286 = $1;
      $287 = (($286) + 64|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($288) + ($285<<1)|0);
      HEAP16[$289>>1] = $278;
      $290 = $278&65535;
      $hash_head = $290;
      $291 = $1;
      $292 = (($291) + 108|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $293&65535;
      $295 = $1;
      $296 = (($295) + 72|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = $1;
      $299 = (($298) + 68|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = (($300) + ($297<<1)|0);
      HEAP16[$301>>1] = $294;
     }
     $302 = $1;
     $303 = (($302) + 120|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($304) + -1)|0;
     HEAP32[$303>>2] = $305;
     $306 = ($305|0)!=(0);
     if (!($306)) {
      break;
     }
    }
    $307 = $1;
    $308 = (($307) + 104|0);
    HEAP32[$308>>2] = 0;
    $309 = $1;
    $310 = (($309) + 96|0);
    HEAP32[$310>>2] = 2;
    $311 = $1;
    $312 = (($311) + 108|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + 1)|0;
    HEAP32[$312>>2] = $314;
    $315 = $bflush;
    $316 = ($315|0)!=(0);
    if ($316) {
     $317 = $1;
     $318 = $1;
     $319 = (($318) + 92|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ($320|0)>=(0);
     if ($321) {
      $322 = $1;
      $323 = (($322) + 92|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = $1;
      $326 = (($325) + 56|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = (($327) + ($324)|0);
      $336 = $328;
     } else {
      $336 = 0;
     }
     $329 = $1;
     $330 = (($329) + 108|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $1;
     $333 = (($332) + 92|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (($331) - ($334))|0;
     __tr_flush_block($317,$336,$335,0);
     $337 = $1;
     $338 = (($337) + 108|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $1;
     $341 = (($340) + 92|0);
     HEAP32[$341>>2] = $339;
     $342 = $1;
     $343 = HEAP32[$342>>2]|0;
     _flush_pending($343);
     $344 = $1;
     $345 = HEAP32[$344>>2]|0;
     $346 = (($345) + 16|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      label = 35;
      break;
     }
    }
   } else {
    label = 38;
   }
  } else {
   label = 38;
  }
  if ((label|0) == 38) {
   label = 0;
   $349 = $1;
   $350 = (($349) + 104|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ($351|0)!=(0);
   if ($352) {
    $353 = $1;
    $354 = (($353) + 108|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = (($355) - 1)|0;
    $357 = $1;
    $358 = (($357) + 56|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($359) + ($356)|0);
    $361 = HEAP8[$360>>0]|0;
    $cc = $361;
    $362 = $1;
    $363 = (($362) + 5792|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = $1;
    $366 = (($365) + 5796|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = (($367) + ($364<<1)|0);
    HEAP16[$368>>1] = 0;
    $369 = $cc;
    $370 = $1;
    $371 = (($370) + 5792|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 1)|0;
    HEAP32[$371>>2] = $373;
    $374 = $1;
    $375 = (($374) + 5784|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (($376) + ($372)|0);
    HEAP8[$377>>0] = $369;
    $378 = $cc;
    $379 = $378&255;
    $380 = $1;
    $381 = (($380) + 148|0);
    $382 = (($381) + ($379<<2)|0);
    $383 = HEAP16[$382>>1]|0;
    $384 = (($383) + 1)<<16>>16;
    HEAP16[$382>>1] = $384;
    $385 = $1;
    $386 = (($385) + 5792|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = $1;
    $389 = (($388) + 5788|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = (($390) - 1)|0;
    $392 = ($387|0)==($391|0);
    $393 = $392&1;
    $bflush = $393;
    $394 = $bflush;
    $395 = ($394|0)!=(0);
    if ($395) {
     $396 = $1;
     $397 = $1;
     $398 = (($397) + 92|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = ($399|0)>=(0);
     if ($400) {
      $401 = $1;
      $402 = (($401) + 92|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = $1;
      $405 = (($404) + 56|0);
      $406 = HEAP32[$405>>2]|0;
      $407 = (($406) + ($403)|0);
      $415 = $407;
     } else {
      $415 = 0;
     }
     $408 = $1;
     $409 = (($408) + 108|0);
     $410 = HEAP32[$409>>2]|0;
     $411 = $1;
     $412 = (($411) + 92|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = (($410) - ($413))|0;
     __tr_flush_block($396,$415,$414,0);
     $416 = $1;
     $417 = (($416) + 108|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = $1;
     $420 = (($419) + 92|0);
     HEAP32[$420>>2] = $418;
     $421 = $1;
     $422 = HEAP32[$421>>2]|0;
     _flush_pending($422);
    }
    $423 = $1;
    $424 = (($423) + 108|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + 1)|0;
    HEAP32[$424>>2] = $426;
    $427 = $1;
    $428 = (($427) + 116|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = (($429) + -1)|0;
    HEAP32[$428>>2] = $430;
    $431 = $1;
    $432 = HEAP32[$431>>2]|0;
    $433 = (($432) + 16|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ($434|0)==(0);
    if ($435) {
     label = 45;
     break;
    }
   } else {
    $436 = $1;
    $437 = (($436) + 104|0);
    HEAP32[$437>>2] = 1;
    $438 = $1;
    $439 = (($438) + 108|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = (($440) + 1)|0;
    HEAP32[$439>>2] = $441;
    $442 = $1;
    $443 = (($442) + 116|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = (($444) + -1)|0;
    HEAP32[$443>>2] = $445;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 7) {
  $446 = $1;
  $447 = (($446) + 104|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = ($448|0)!=(0);
  if ($449) {
   $450 = $1;
   $451 = (($450) + 108|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = (($452) - 1)|0;
   $454 = $1;
   $455 = (($454) + 56|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = (($456) + ($453)|0);
   $458 = HEAP8[$457>>0]|0;
   $cc1 = $458;
   $459 = $1;
   $460 = (($459) + 5792|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = $1;
   $463 = (($462) + 5796|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = (($464) + ($461<<1)|0);
   HEAP16[$465>>1] = 0;
   $466 = $cc1;
   $467 = $1;
   $468 = (($467) + 5792|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = (($469) + 1)|0;
   HEAP32[$468>>2] = $470;
   $471 = $1;
   $472 = (($471) + 5784|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($473) + ($469)|0);
   HEAP8[$474>>0] = $466;
   $475 = $cc1;
   $476 = $475&255;
   $477 = $1;
   $478 = (($477) + 148|0);
   $479 = (($478) + ($476<<2)|0);
   $480 = HEAP16[$479>>1]|0;
   $481 = (($480) + 1)<<16>>16;
   HEAP16[$479>>1] = $481;
   $482 = $1;
   $483 = (($482) + 5792|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = $1;
   $486 = (($485) + 5788|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = (($487) - 1)|0;
   $489 = ($484|0)==($488|0);
   $490 = $489&1;
   $bflush = $490;
   $491 = $1;
   $492 = (($491) + 104|0);
   HEAP32[$492>>2] = 0;
  }
  $493 = $1;
  $494 = (($493) + 108|0);
  $495 = HEAP32[$494>>2]|0;
  $496 = ($495>>>0)<(2);
  if ($496) {
   $497 = $1;
   $498 = (($497) + 108|0);
   $499 = HEAP32[$498>>2]|0;
   $502 = $499;
  } else {
   $502 = 2;
  }
  $500 = $1;
  $501 = (($500) + 5812|0);
  HEAP32[$501>>2] = $502;
  $503 = $2;
  $504 = ($503|0)==(4);
  if ($504) {
   $505 = $1;
   $506 = $1;
   $507 = (($506) + 92|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ($508|0)>=(0);
   if ($509) {
    $510 = $1;
    $511 = (($510) + 92|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = $1;
    $514 = (($513) + 56|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = (($515) + ($512)|0);
    $524 = $516;
   } else {
    $524 = 0;
   }
   $517 = $1;
   $518 = (($517) + 108|0);
   $519 = HEAP32[$518>>2]|0;
   $520 = $1;
   $521 = (($520) + 92|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = (($519) - ($522))|0;
   __tr_flush_block($505,$524,$523,1);
   $525 = $1;
   $526 = (($525) + 108|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $1;
   $529 = (($528) + 92|0);
   HEAP32[$529>>2] = $527;
   $530 = $1;
   $531 = HEAP32[$530>>2]|0;
   _flush_pending($531);
   $532 = $1;
   $533 = HEAP32[$532>>2]|0;
   $534 = (($533) + 16|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = ($535|0)==(0);
   if ($536) {
    $0 = 2;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   } else {
    $0 = 3;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   }
  }
  $537 = $1;
  $538 = (($537) + 5792|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = ($539|0)!=(0);
  do {
   if ($540) {
    $541 = $1;
    $542 = $1;
    $543 = (($542) + 92|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = ($544|0)>=(0);
    if ($545) {
     $546 = $1;
     $547 = (($546) + 92|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $1;
     $550 = (($549) + 56|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = (($551) + ($548)|0);
     $560 = $552;
    } else {
     $560 = 0;
    }
    $553 = $1;
    $554 = (($553) + 108|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = $1;
    $557 = (($556) + 92|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = (($555) - ($558))|0;
    __tr_flush_block($541,$560,$559,0);
    $561 = $1;
    $562 = (($561) + 108|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = $1;
    $565 = (($564) + 92|0);
    HEAP32[$565>>2] = $563;
    $566 = $1;
    $567 = HEAP32[$566>>2]|0;
    _flush_pending($567);
    $568 = $1;
    $569 = HEAP32[$568>>2]|0;
    $570 = (($569) + 16|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = ($571|0)==(0);
    if (!($572)) {
     break;
    }
    $0 = 0;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   }
  } while(0);
  $0 = 1;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 35) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 45) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 return (0)|0;
}
function _read_buf($strm,$buf,$size) {
 $strm = $strm|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $buf;
 $3 = $size;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $len = $6;
 $7 = $len;
 $8 = $3;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = $3;
  $len = $10;
 }
 $11 = $len;
 $12 = ($11|0)==(0);
 if ($12) {
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 $13 = $len;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - ($13))|0;
 HEAP32[$15>>2] = $17;
 $18 = $2;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $len;
 _memcpy(($18|0),($20|0),($21|0))|0;
 $22 = $1;
 $23 = (($22) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = $1;
  $29 = (($28) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = $len;
  $33 = (_adler32($30,$31,$32)|0);
  $34 = $1;
  $35 = (($34) + 48|0);
  HEAP32[$35>>2] = $33;
 } else {
  $36 = $1;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(2);
  if ($41) {
   $42 = $1;
   $43 = (($42) + 48|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   $46 = $len;
   $47 = (_crc32($44,$45,$46)|0);
   $48 = $1;
   $49 = (($48) + 48|0);
   HEAP32[$49>>2] = $47;
  }
 }
 $50 = $len;
 $51 = $1;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($50)|0);
 HEAP32[$51>>2] = $53;
 $54 = $len;
 $55 = $1;
 $56 = (($55) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54))|0;
 HEAP32[$56>>2] = $58;
 $59 = $len;
 $0 = $59;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _longest_match($s,$cur_match) {
 $s = $s|0;
 $cur_match = $cur_match|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best_len = 0, $chain_length = 0, $len = 0, $limit = 0, $match = 0, $nice_match = 0, $prev = 0, $scan = 0, $scan_end = 0, $scan_end1 = 0, $strend = 0, $wmask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $cur_match;
 $3 = $1;
 $4 = (($3) + 124|0);
 $5 = HEAP32[$4>>2]|0;
 $chain_length = $5;
 $6 = $1;
 $7 = (($6) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + ($11)|0);
 $scan = $12;
 $13 = $1;
 $14 = (($13) + 120|0);
 $15 = HEAP32[$14>>2]|0;
 $best_len = $15;
 $16 = $1;
 $17 = (($16) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $nice_match = $18;
 $19 = $1;
 $20 = (($19) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 262)|0;
 $26 = ($21>>>0)>($25>>>0);
 if ($26) {
  $27 = $1;
  $28 = (($27) + 108|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - 262)|0;
  $34 = (($29) - ($33))|0;
  $35 = $34;
 } else {
  $35 = 0;
 }
 $limit = $35;
 $36 = $1;
 $37 = (($36) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 $prev = $38;
 $39 = $1;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $wmask = $41;
 $42 = $1;
 $43 = (($42) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $1;
 $46 = (($45) + 108|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($44) + ($47)|0);
 $49 = (($48) + 258|0);
 $strend = $49;
 $50 = $best_len;
 $51 = (($50) - 1)|0;
 $52 = $scan;
 $53 = (($52) + ($51)|0);
 $54 = HEAP8[$53>>0]|0;
 $scan_end1 = $54;
 $55 = $best_len;
 $56 = $scan;
 $57 = (($56) + ($55)|0);
 $58 = HEAP8[$57>>0]|0;
 $scan_end = $58;
 $59 = $1;
 $60 = (($59) + 120|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $1;
 $63 = (($62) + 140|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($61>>>0)>=($64>>>0);
 if ($65) {
  $66 = $chain_length;
  $67 = $66 >>> 2;
  $chain_length = $67;
 }
 $68 = $nice_match;
 $69 = $1;
 $70 = (($69) + 116|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($68>>>0)>($71>>>0);
 if ($72) {
  $73 = $1;
  $74 = (($73) + 116|0);
  $75 = HEAP32[$74>>2]|0;
  $nice_match = $75;
 }
 while(1) {
  $76 = $1;
  $77 = (($76) + 56|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $2;
  $80 = (($78) + ($79)|0);
  $match = $80;
  $81 = $best_len;
  $82 = $match;
  $83 = (($82) + ($81)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $scan_end;
  $87 = $86&255;
  $88 = ($85|0)!=($87|0);
  if ($88) {
   label = 13;
  } else {
   $89 = $best_len;
   $90 = (($89) - 1)|0;
   $91 = $match;
   $92 = (($91) + ($90)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $scan_end1;
   $96 = $95&255;
   $97 = ($94|0)!=($96|0);
   if ($97) {
    label = 13;
   } else {
    $98 = $match;
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $scan;
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = ($100|0)!=($103|0);
    if ($104) {
     label = 13;
    } else {
     $105 = $match;
     $106 = (($105) + 1|0);
     $match = $106;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $scan;
     $110 = (($109) + 1|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111&255;
     $113 = ($108|0)!=($112|0);
     if ($113) {
      label = 13;
     } else {
      $114 = $scan;
      $115 = (($114) + 2|0);
      $scan = $115;
      $116 = $match;
      $117 = (($116) + 1|0);
      $match = $117;
      while(1) {
       $118 = $scan;
       $119 = (($118) + 1|0);
       $scan = $119;
       $120 = HEAP8[$119>>0]|0;
       $121 = $120&255;
       $122 = $match;
       $123 = (($122) + 1|0);
       $match = $123;
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = ($121|0)==($125|0);
       if ($126) {
        $127 = $scan;
        $128 = (($127) + 1|0);
        $scan = $128;
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = $match;
        $132 = (($131) + 1|0);
        $match = $132;
        $133 = HEAP8[$132>>0]|0;
        $134 = $133&255;
        $135 = ($130|0)==($134|0);
        if ($135) {
         $136 = $scan;
         $137 = (($136) + 1|0);
         $scan = $137;
         $138 = HEAP8[$137>>0]|0;
         $139 = $138&255;
         $140 = $match;
         $141 = (($140) + 1|0);
         $match = $141;
         $142 = HEAP8[$141>>0]|0;
         $143 = $142&255;
         $144 = ($139|0)==($143|0);
         if ($144) {
          $145 = $scan;
          $146 = (($145) + 1|0);
          $scan = $146;
          $147 = HEAP8[$146>>0]|0;
          $148 = $147&255;
          $149 = $match;
          $150 = (($149) + 1|0);
          $match = $150;
          $151 = HEAP8[$150>>0]|0;
          $152 = $151&255;
          $153 = ($148|0)==($152|0);
          if ($153) {
           $154 = $scan;
           $155 = (($154) + 1|0);
           $scan = $155;
           $156 = HEAP8[$155>>0]|0;
           $157 = $156&255;
           $158 = $match;
           $159 = (($158) + 1|0);
           $match = $159;
           $160 = HEAP8[$159>>0]|0;
           $161 = $160&255;
           $162 = ($157|0)==($161|0);
           if ($162) {
            $163 = $scan;
            $164 = (($163) + 1|0);
            $scan = $164;
            $165 = HEAP8[$164>>0]|0;
            $166 = $165&255;
            $167 = $match;
            $168 = (($167) + 1|0);
            $match = $168;
            $169 = HEAP8[$168>>0]|0;
            $170 = $169&255;
            $171 = ($166|0)==($170|0);
            if ($171) {
             $172 = $scan;
             $173 = (($172) + 1|0);
             $scan = $173;
             $174 = HEAP8[$173>>0]|0;
             $175 = $174&255;
             $176 = $match;
             $177 = (($176) + 1|0);
             $match = $177;
             $178 = HEAP8[$177>>0]|0;
             $179 = $178&255;
             $180 = ($175|0)==($179|0);
             if ($180) {
              $181 = $scan;
              $182 = (($181) + 1|0);
              $scan = $182;
              $183 = HEAP8[$182>>0]|0;
              $184 = $183&255;
              $185 = $match;
              $186 = (($185) + 1|0);
              $match = $186;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $189 = ($184|0)==($188|0);
              if ($189) {
               $190 = $scan;
               $191 = $strend;
               $192 = ($190>>>0)<($191>>>0);
               $242 = $192;
              } else {
               $242 = 0;
              }
             } else {
              $242 = 0;
             }
            } else {
             $242 = 0;
            }
           } else {
            $242 = 0;
           }
          } else {
           $242 = 0;
          }
         } else {
          $242 = 0;
         }
        } else {
         $242 = 0;
        }
       } else {
        $242 = 0;
       }
       if (!($242)) {
        break;
       }
      }
      $193 = $strend;
      $194 = $scan;
      $195 = $193;
      $196 = $194;
      $197 = (($195) - ($196))|0;
      $198 = (258 - ($197))|0;
      $len = $198;
      $199 = $strend;
      $200 = (($199) + -258|0);
      $scan = $200;
      $201 = $len;
      $202 = $best_len;
      $203 = ($201|0)>($202|0);
      if ($203) {
       $204 = $2;
       $205 = $1;
       $206 = (($205) + 112|0);
       HEAP32[$206>>2] = $204;
       $207 = $len;
       $best_len = $207;
       $208 = $len;
       $209 = $nice_match;
       $210 = ($208|0)>=($209|0);
       if ($210) {
        label = 28;
        break;
       }
       $211 = $best_len;
       $212 = (($211) - 1)|0;
       $213 = $scan;
       $214 = (($213) + ($212)|0);
       $215 = HEAP8[$214>>0]|0;
       $scan_end1 = $215;
       $216 = $best_len;
       $217 = $scan;
       $218 = (($217) + ($216)|0);
       $219 = HEAP8[$218>>0]|0;
       $scan_end = $219;
      }
     }
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
  }
  $220 = $2;
  $221 = $wmask;
  $222 = $220 & $221;
  $223 = $prev;
  $224 = (($223) + ($222<<1)|0);
  $225 = HEAP16[$224>>1]|0;
  $226 = $225&65535;
  $2 = $226;
  $227 = $limit;
  $228 = ($226>>>0)>($227>>>0);
  if ($228) {
   $229 = $chain_length;
   $230 = (($229) + -1)|0;
   $chain_length = $230;
   $231 = ($230|0)!=(0);
   $243 = $231;
  } else {
   $243 = 0;
  }
  if (!($243)) {
   break;
  }
 }
 if ((label|0) == 28) {
 }
 $232 = $best_len;
 $233 = $1;
 $234 = (($233) + 116|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($232>>>0)<=($235>>>0);
 if ($236) {
  $237 = $best_len;
  $0 = $237;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 } else {
  $238 = $1;
  $239 = (($238) + 116|0);
  $240 = HEAP32[$239>>2]|0;
  $0 = $240;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 return (0)|0;
}
function __tr_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 _tr_static_init();
 $1 = $0;
 $2 = (($1) + 148|0);
 $3 = $0;
 $4 = (($3) + 2840|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 2840|0);
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 25528;
 $8 = $0;
 $9 = (($8) + 2440|0);
 $10 = $0;
 $11 = (($10) + 2852|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 2852|0);
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 25552;
 $15 = $0;
 $16 = (($15) + 2684|0);
 $17 = $0;
 $18 = (($17) + 2864|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = (($19) + 2864|0);
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = 25576;
 $22 = $0;
 $23 = (($22) + 5816|0);
 HEAP16[$23>>1] = 0;
 $24 = $0;
 $25 = (($24) + 5820|0);
 HEAP32[$25>>2] = 0;
 $26 = $0;
 _init_block($26);
 STACKTOP = sp;return;
}
function __tr_stored_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $len = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $stored_len;
 $3 = $last;
 $len = 3;
 $4 = $0;
 $5 = (($4) + 5820|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $len;
 $8 = (16 - ($7))|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  $10 = $3;
  $11 = (0 + ($10))|0;
  $val = $11;
  $12 = $val;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $0;
  $16 = (($15) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $0;
  $26 = (($25) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $0;
  $32 = (($31) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $0;
  $40 = (($39) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $val;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $0;
  $57 = (($56) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $0;
  $63 = (($62) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $len;
  $65 = (($64) - 16)|0;
  $66 = $0;
  $67 = (($66) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
  $89 = $0;
  $90 = $1;
  $91 = $2;
  _copy_block($89,$90,$91,1);
  STACKTOP = sp;return;
 } else {
  $70 = $3;
  $71 = (0 + ($70))|0;
  $72 = $71&65535;
  $73 = $72&65535;
  $74 = $0;
  $75 = (($74) + 5820|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73 << $76;
  $78 = $0;
  $79 = (($78) + 5816|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | $77;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
  $84 = $len;
  $85 = $0;
  $86 = (($85) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84))|0;
  HEAP32[$86>>2] = $88;
  $89 = $0;
  $90 = $1;
  $91 = $2;
  _copy_block($89,$90,$91,1);
  STACKTOP = sp;return;
 }
}
function __tr_flush_bits($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 _bi_flush($1);
 STACKTOP = sp;return;
}
function __tr_align($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $val = 0, $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $len = 3;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $len;
 $5 = (16 - ($4))|0;
 $6 = ($3|0)>($5|0);
 if ($6) {
  $val = 2;
  $7 = $val;
  $8 = $7&65535;
  $9 = $8&65535;
  $10 = $0;
  $11 = (($10) + 5820|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $9 << $12;
  $14 = $0;
  $15 = (($14) + 5816|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $17 | $13;
  $19 = $18&65535;
  HEAP16[$15>>1] = $19;
  $20 = $0;
  $21 = (($20) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = $0;
  $27 = (($26) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
  $34 = $0;
  $35 = (($34) + 5816|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 >> 8;
  $39 = $38&255;
  $40 = $0;
  $41 = (($40) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$41>>2] = $43;
  $44 = $0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($42)|0);
  HEAP8[$47>>0] = $39;
  $48 = $val;
  $49 = $48&65535;
  $50 = $49&65535;
  $51 = $0;
  $52 = (($51) + 5820|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (16 - ($53))|0;
  $55 = $50 >> $54;
  $56 = $55&65535;
  $57 = $0;
  $58 = (($57) + 5816|0);
  HEAP16[$58>>1] = $56;
  $59 = $len;
  $60 = (($59) - 16)|0;
  $61 = $0;
  $62 = (($61) + 5820|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($60))|0;
  HEAP32[$62>>2] = $64;
 } else {
  $65 = $0;
  $66 = (($65) + 5820|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = 2 << $67;
  $69 = $0;
  $70 = (($69) + 5816|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $72 | $68;
  $74 = $73&65535;
  HEAP16[$70>>1] = $74;
  $75 = $len;
  $76 = $0;
  $77 = (($76) + 5820|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75))|0;
  HEAP32[$77>>2] = $79;
 }
 $80 = HEAP16[((25600 + 1026|0))>>1]|0;
 $81 = $80&65535;
 $len1 = $81;
 $82 = $0;
 $83 = (($82) + 5820|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $len1;
 $86 = (16 - ($85))|0;
 $87 = ($84|0)>($86|0);
 if ($87) {
  $88 = HEAP16[((25600 + 1024|0))>>1]|0;
  $89 = $88&65535;
  $val2 = $89;
  $90 = $val2;
  $91 = $90&65535;
  $92 = $91&65535;
  $93 = $0;
  $94 = (($93) + 5820|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92 << $95;
  $97 = $0;
  $98 = (($97) + 5816|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = $100 | $96;
  $102 = $101&65535;
  HEAP16[$98>>1] = $102;
  $103 = $0;
  $104 = (($103) + 5816|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = $106 & 255;
  $108 = $107&255;
  $109 = $0;
  $110 = (($109) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + 1)|0;
  HEAP32[$110>>2] = $112;
  $113 = $0;
  $114 = (($113) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($111)|0);
  HEAP8[$116>>0] = $108;
  $117 = $0;
  $118 = (($117) + 5816|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = $120 >> 8;
  $122 = $121&255;
  $123 = $0;
  $124 = (($123) + 20|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + 1)|0;
  HEAP32[$124>>2] = $126;
  $127 = $0;
  $128 = (($127) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + ($125)|0);
  HEAP8[$130>>0] = $122;
  $131 = $val2;
  $132 = $131&65535;
  $133 = $132&65535;
  $134 = $0;
  $135 = (($134) + 5820|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (16 - ($136))|0;
  $138 = $133 >> $137;
  $139 = $138&65535;
  $140 = $0;
  $141 = (($140) + 5816|0);
  HEAP16[$141>>1] = $139;
  $142 = $len1;
  $143 = (($142) - 16)|0;
  $144 = $0;
  $145 = (($144) + 5820|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + ($143))|0;
  HEAP32[$145>>2] = $147;
  $165 = $0;
  _bi_flush($165);
  STACKTOP = sp;return;
 } else {
  $148 = HEAP16[((25600 + 1024|0))>>1]|0;
  $149 = $148&65535;
  $150 = $0;
  $151 = (($150) + 5820|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $149 << $152;
  $154 = $0;
  $155 = (($154) + 5816|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = $156&65535;
  $158 = $157 | $153;
  $159 = $158&65535;
  HEAP16[$155>>1] = $159;
  $160 = $len1;
  $161 = $0;
  $162 = (($161) + 5820|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($160))|0;
  HEAP32[$162>>2] = $164;
  $165 = $0;
  _bi_flush($165);
  STACKTOP = sp;return;
 }
}
function __tr_flush_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $max_blindex = 0, $opt_lenb = 0, $static_lenb = 0, $val = 0;
 var $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $stored_len;
 $3 = $last;
 $max_blindex = 0;
 $4 = $0;
 $5 = (($4) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(2);
  if ($12) {
   $13 = $0;
   $14 = (_detect_data_type($13)|0);
   $15 = $0;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 44|0);
   HEAP32[$17>>2] = $14;
  }
  $18 = $0;
  $19 = $0;
  $20 = (($19) + 2840|0);
  _build_tree($18,$20);
  $21 = $0;
  $22 = $0;
  $23 = (($22) + 2852|0);
  _build_tree($21,$23);
  $24 = $0;
  $25 = (_build_bl_tree($24)|0);
  $max_blindex = $25;
  $26 = $0;
  $27 = (($26) + 5800|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 3)|0;
  $30 = (($29) + 7)|0;
  $31 = $30 >>> 3;
  $opt_lenb = $31;
  $32 = $0;
  $33 = (($32) + 5804|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 3)|0;
  $36 = (($35) + 7)|0;
  $37 = $36 >>> 3;
  $static_lenb = $37;
  $38 = $static_lenb;
  $39 = $opt_lenb;
  $40 = ($38>>>0)<=($39>>>0);
  if ($40) {
   $41 = $static_lenb;
   $opt_lenb = $41;
  }
 } else {
  $42 = $2;
  $43 = (($42) + 5)|0;
  $static_lenb = $43;
  $opt_lenb = $43;
 }
 $44 = $2;
 $45 = (($44) + 4)|0;
 $46 = $opt_lenb;
 $47 = ($45>>>0)<=($46>>>0);
 if ($47) {
  $48 = $1;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $0;
   $51 = $1;
   $52 = $2;
   $53 = $3;
   __tr_stored_block($50,$51,$52,$53);
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $54 = $0;
  $55 = (($54) + 136|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(4);
  if ($57) {
   label = 13;
  } else {
   $58 = $static_lenb;
   $59 = $opt_lenb;
   $60 = ($58|0)==($59|0);
   if ($60) {
    label = 13;
   } else {
    $len1 = 3;
    $147 = $0;
    $148 = (($147) + 5820|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $len1;
    $151 = (16 - ($150))|0;
    $152 = ($149|0)>($151|0);
    if ($152) {
     $153 = $3;
     $154 = (4 + ($153))|0;
     $val2 = $154;
     $155 = $val2;
     $156 = $155&65535;
     $157 = $156&65535;
     $158 = $0;
     $159 = (($158) + 5820|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $157 << $160;
     $162 = $0;
     $163 = (($162) + 5816|0);
     $164 = HEAP16[$163>>1]|0;
     $165 = $164&65535;
     $166 = $165 | $161;
     $167 = $166&65535;
     HEAP16[$163>>1] = $167;
     $168 = $0;
     $169 = (($168) + 5816|0);
     $170 = HEAP16[$169>>1]|0;
     $171 = $170&65535;
     $172 = $171 & 255;
     $173 = $172&255;
     $174 = $0;
     $175 = (($174) + 20|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + 1)|0;
     HEAP32[$175>>2] = $177;
     $178 = $0;
     $179 = (($178) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + ($176)|0);
     HEAP8[$181>>0] = $173;
     $182 = $0;
     $183 = (($182) + 5816|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&65535;
     $186 = $185 >> 8;
     $187 = $186&255;
     $188 = $0;
     $189 = (($188) + 20|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + 1)|0;
     HEAP32[$189>>2] = $191;
     $192 = $0;
     $193 = (($192) + 8|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($190)|0);
     HEAP8[$195>>0] = $187;
     $196 = $val2;
     $197 = $196&65535;
     $198 = $197&65535;
     $199 = $0;
     $200 = (($199) + 5820|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (16 - ($201))|0;
     $203 = $198 >> $202;
     $204 = $203&65535;
     $205 = $0;
     $206 = (($205) + 5816|0);
     HEAP16[$206>>1] = $204;
     $207 = $len1;
     $208 = (($207) - 16)|0;
     $209 = $0;
     $210 = (($209) + 5820|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($208))|0;
     HEAP32[$210>>2] = $212;
    } else {
     $213 = $3;
     $214 = (4 + ($213))|0;
     $215 = $214&65535;
     $216 = $215&65535;
     $217 = $0;
     $218 = (($217) + 5820|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $216 << $219;
     $221 = $0;
     $222 = (($221) + 5816|0);
     $223 = HEAP16[$222>>1]|0;
     $224 = $223&65535;
     $225 = $224 | $220;
     $226 = $225&65535;
     HEAP16[$222>>1] = $226;
     $227 = $len1;
     $228 = $0;
     $229 = (($228) + 5820|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + ($227))|0;
     HEAP32[$229>>2] = $231;
    }
    $232 = $0;
    $233 = $0;
    $234 = (($233) + 2840|0);
    $235 = (($234) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + 1)|0;
    $238 = $0;
    $239 = (($238) + 2852|0);
    $240 = (($239) + 4|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($241) + 1)|0;
    $243 = $max_blindex;
    $244 = (($243) + 1)|0;
    _send_all_trees($232,$237,$242,$244);
    $245 = $0;
    $246 = $0;
    $247 = (($246) + 148|0);
    $248 = $0;
    $249 = (($248) + 2440|0);
    _compress_block($245,$247,$249);
   }
  }
  if ((label|0) == 13) {
   $len = 3;
   $61 = $0;
   $62 = (($61) + 5820|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $len;
   $65 = (16 - ($64))|0;
   $66 = ($63|0)>($65|0);
   if ($66) {
    $67 = $3;
    $68 = (2 + ($67))|0;
    $val = $68;
    $69 = $val;
    $70 = $69&65535;
    $71 = $70&65535;
    $72 = $0;
    $73 = (($72) + 5820|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $71 << $74;
    $76 = $0;
    $77 = (($76) + 5816|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78&65535;
    $80 = $79 | $75;
    $81 = $80&65535;
    HEAP16[$77>>1] = $81;
    $82 = $0;
    $83 = (($82) + 5816|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = $85 & 255;
    $87 = $86&255;
    $88 = $0;
    $89 = (($88) + 20|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 1)|0;
    HEAP32[$89>>2] = $91;
    $92 = $0;
    $93 = (($92) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($90)|0);
    HEAP8[$95>>0] = $87;
    $96 = $0;
    $97 = (($96) + 5816|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = $99 >> 8;
    $101 = $100&255;
    $102 = $0;
    $103 = (($102) + 20|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1)|0;
    HEAP32[$103>>2] = $105;
    $106 = $0;
    $107 = (($106) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + ($104)|0);
    HEAP8[$109>>0] = $101;
    $110 = $val;
    $111 = $110&65535;
    $112 = $111&65535;
    $113 = $0;
    $114 = (($113) + 5820|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (16 - ($115))|0;
    $117 = $112 >> $116;
    $118 = $117&65535;
    $119 = $0;
    $120 = (($119) + 5816|0);
    HEAP16[$120>>1] = $118;
    $121 = $len;
    $122 = (($121) - 16)|0;
    $123 = $0;
    $124 = (($123) + 5820|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + ($122))|0;
    HEAP32[$124>>2] = $126;
   } else {
    $127 = $3;
    $128 = (2 + ($127))|0;
    $129 = $128&65535;
    $130 = $129&65535;
    $131 = $0;
    $132 = (($131) + 5820|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $130 << $133;
    $135 = $0;
    $136 = (($135) + 5816|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = $137&65535;
    $139 = $138 | $134;
    $140 = $139&65535;
    HEAP16[$136>>1] = $140;
    $141 = $len;
    $142 = $0;
    $143 = (($142) + 5820|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + ($141))|0;
    HEAP32[$143>>2] = $145;
   }
   $146 = $0;
   _compress_block($146,25600,26752);
  }
 }
 $250 = $0;
 _init_block($250);
 $251 = $3;
 $252 = ($251|0)!=(0);
 if (!($252)) {
  STACKTOP = sp;return;
 }
 $253 = $0;
 _bi_windup($253);
 STACKTOP = sp;return;
}
function _tr_static_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _init_block($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $n = 0;
 while(1) {
  $1 = $n;
  $2 = ($1|0)<(286);
  if (!($2)) {
   break;
  }
  $3 = $n;
  $4 = $0;
  $5 = (($4) + 148|0);
  $6 = (($5) + ($3<<2)|0);
  HEAP16[$6>>1] = 0;
  $7 = $n;
  $8 = (($7) + 1)|0;
  $n = $8;
 }
 $n = 0;
 while(1) {
  $9 = $n;
  $10 = ($9|0)<(30);
  if (!($10)) {
   break;
  }
  $11 = $n;
  $12 = $0;
  $13 = (($12) + 2440|0);
  $14 = (($13) + ($11<<2)|0);
  HEAP16[$14>>1] = 0;
  $15 = $n;
  $16 = (($15) + 1)|0;
  $n = $16;
 }
 $n = 0;
 while(1) {
  $17 = $n;
  $18 = ($17|0)<(19);
  if (!($18)) {
   break;
  }
  $19 = $n;
  $20 = $0;
  $21 = (($20) + 2684|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP16[$22>>1] = 0;
  $23 = $n;
  $24 = (($23) + 1)|0;
  $n = $24;
 }
 $25 = $0;
 $26 = (($25) + 148|0);
 $27 = (($26) + 1024|0);
 HEAP16[$27>>1] = 1;
 $28 = $0;
 $29 = (($28) + 5804|0);
 HEAP32[$29>>2] = 0;
 $30 = $0;
 $31 = (($30) + 5800|0);
 HEAP32[$31>>2] = 0;
 $32 = $0;
 $33 = (($32) + 5808|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = (($34) + 5792|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _copy_block($s,$buf,$len,$header) {
 $s = $s|0;
 $buf = $buf|0;
 $len = $len|0;
 $header = $header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $len;
 $3 = $header;
 $4 = $0;
 _bi_windup($4);
 $5 = $3;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = $7&65535;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $0;
  $13 = (($12) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $2;
  $21 = $20&65535;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $33 = $2;
  $34 = $33 ^ -1;
  $35 = $34&65535;
  $36 = $35&65535;
  $37 = $36 & 255;
  $38 = $37&255;
  $39 = $0;
  $40 = (($39) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = $0;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($41)|0);
  HEAP8[$46>>0] = $38;
  $47 = $2;
  $48 = $47 ^ -1;
  $49 = $48&65535;
  $50 = $49&65535;
  $51 = $50 >> 8;
  $52 = $51&255;
  $53 = $0;
  $54 = (($53) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$54>>2] = $56;
  $57 = $0;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55)|0);
  HEAP8[$60>>0] = $52;
 }
 while(1) {
  $61 = $2;
  $62 = (($61) + -1)|0;
  $2 = $62;
  $63 = ($61|0)!=(0);
  if (!($63)) {
   break;
  }
  $64 = $1;
  $65 = (($64) + 1|0);
  $1 = $65;
  $66 = HEAP8[$64>>0]|0;
  $67 = $0;
  $68 = (($67) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($69)|0);
  HEAP8[$74>>0] = $66;
 }
 STACKTOP = sp;return;
}
function _bi_flush($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(16);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 5816|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 255;
  $10 = $9&255;
  $11 = $0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13)|0);
  HEAP8[$18>>0] = $10;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $33 = $0;
  $34 = (($33) + 5816|0);
  HEAP16[$34>>1] = 0;
  $35 = $0;
  $36 = (($35) + 5820|0);
  HEAP32[$36>>2] = 0;
  STACKTOP = sp;return;
 }
 $37 = $0;
 $38 = (($37) + 5820|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(8);
 if ($40) {
  $41 = $0;
  $42 = (($41) + 5816|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $0;
  $54 = (($53) + 5816|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = $56 >> 8;
  $58 = $57&65535;
  HEAP16[$54>>1] = $58;
  $59 = $0;
  $60 = (($59) + 5820|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) - 8)|0;
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function _detect_data_type($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $black_mask = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $black_mask = -201342849;
 $n = 0;
 while(1) {
  $2 = $n;
  $3 = ($2|0)<=(31);
  if (!($3)) {
   break;
  }
  $4 = $black_mask;
  $5 = $4 & 1;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $n;
   $8 = $1;
   $9 = (($8) + 148|0);
   $10 = (($9) + ($7<<2)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = ($12|0)!=(0);
   if ($13) {
    label = 5;
    break;
   }
  }
  $14 = $n;
  $15 = (($14) + 1)|0;
  $n = $15;
  $16 = $black_mask;
  $17 = $16 >>> 1;
  $black_mask = $17;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $18 = $1;
 $19 = (($18) + 148|0);
 $20 = (($19) + 36|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $1;
  $25 = (($24) + 148|0);
  $26 = (($25) + 40|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $1;
   $31 = (($30) + 148|0);
   $32 = (($31) + 52|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    $n = 32;
    while(1) {
     $36 = $n;
     $37 = ($36|0)<(256);
     if (!($37)) {
      label = 18;
      break;
     }
     $38 = $n;
     $39 = $1;
     $40 = (($39) + 148|0);
     $41 = (($40) + ($38<<2)|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42&65535;
     $44 = ($43|0)!=(0);
     if ($44) {
      label = 15;
      break;
     }
     $45 = $n;
     $46 = (($45) + 1)|0;
     $n = $46;
    }
    if ((label|0) == 15) {
     $0 = 1;
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
    else if ((label|0) == 18) {
     $0 = 0;
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
   }
  }
 }
 $0 = 1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _build_tree($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $elems = 0, $m = 0, $max_code = 0, $n = 0, $node = 0, $stree = 0, $tree = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $desc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $tree = $3;
 $4 = $1;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $stree = $7;
 $8 = $1;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $elems = $12;
 $max_code = -1;
 $13 = $0;
 $14 = (($13) + 5200|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (($15) + 5204|0);
 HEAP32[$16>>2] = 573;
 $n = 0;
 while(1) {
  $17 = $n;
  $18 = $elems;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $n;
  $21 = $tree;
  $22 = (($21) + ($20<<2)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $n;
   $max_code = $26;
   $27 = $0;
   $28 = (($27) + 5200|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$28>>2] = $30;
   $31 = $0;
   $32 = (($31) + 2908|0);
   $33 = (($32) + ($30<<2)|0);
   HEAP32[$33>>2] = $26;
   $34 = $n;
   $35 = $0;
   $36 = (($35) + 5208|0);
   $37 = (($36) + ($34)|0);
   HEAP8[$37>>0] = 0;
  } else {
   $38 = $n;
   $39 = $tree;
   $40 = (($39) + ($38<<2)|0);
   $41 = (($40) + 2|0);
   HEAP16[$41>>1] = 0;
  }
  $42 = $n;
  $43 = (($42) + 1)|0;
  $n = $43;
 }
 while(1) {
  $44 = $0;
  $45 = (($44) + 5200|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)<(2);
  if (!($47)) {
   break;
  }
  $48 = $max_code;
  $49 = ($48|0)<(2);
  if ($49) {
   $50 = $max_code;
   $51 = (($50) + 1)|0;
   $max_code = $51;
   $59 = $51;
  } else {
   $59 = 0;
  }
  $52 = $0;
  $53 = (($52) + 5200|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  $56 = $0;
  $57 = (($56) + 2908|0);
  $58 = (($57) + ($55<<2)|0);
  HEAP32[$58>>2] = $59;
  $node = $59;
  $60 = $node;
  $61 = $tree;
  $62 = (($61) + ($60<<2)|0);
  HEAP16[$62>>1] = 1;
  $63 = $node;
  $64 = $0;
  $65 = (($64) + 5208|0);
  $66 = (($65) + ($63)|0);
  HEAP8[$66>>0] = 0;
  $67 = $0;
  $68 = (($67) + 5800|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + -1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $stree;
  $72 = ($71|0)!=(0|0);
  if ($72) {
   $73 = $node;
   $74 = $stree;
   $75 = (($74) + ($73<<2)|0);
   $76 = (($75) + 2|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $77&65535;
   $79 = $0;
   $80 = (($79) + 5804|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) - ($78))|0;
   HEAP32[$80>>2] = $82;
  }
 }
 $83 = $max_code;
 $84 = $1;
 $85 = (($84) + 4|0);
 HEAP32[$85>>2] = $83;
 $86 = $0;
 $87 = (($86) + 5200|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88|0) / 2)&-1;
 $n = $89;
 while(1) {
  $90 = $n;
  $91 = ($90|0)>=(1);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = $tree;
  $94 = $n;
  _pqdownheap($92,$93,$94);
  $95 = $n;
  $96 = (($95) + -1)|0;
  $n = $96;
 }
 $97 = $elems;
 $node = $97;
 while(1) {
  $98 = $0;
  $99 = (($98) + 2908|0);
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $n = $101;
  $102 = $0;
  $103 = (($102) + 5200|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + -1)|0;
  HEAP32[$103>>2] = $105;
  $106 = $0;
  $107 = (($106) + 2908|0);
  $108 = (($107) + ($104<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $0;
  $111 = (($110) + 2908|0);
  $112 = (($111) + 4|0);
  HEAP32[$112>>2] = $109;
  $113 = $0;
  $114 = $tree;
  _pqdownheap($113,$114,1);
  $115 = $0;
  $116 = (($115) + 2908|0);
  $117 = (($116) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $m = $118;
  $119 = $n;
  $120 = $0;
  $121 = (($120) + 5204|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + -1)|0;
  HEAP32[$121>>2] = $123;
  $124 = $0;
  $125 = (($124) + 2908|0);
  $126 = (($125) + ($123<<2)|0);
  HEAP32[$126>>2] = $119;
  $127 = $m;
  $128 = $0;
  $129 = (($128) + 5204|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + -1)|0;
  HEAP32[$129>>2] = $131;
  $132 = $0;
  $133 = (($132) + 2908|0);
  $134 = (($133) + ($131<<2)|0);
  HEAP32[$134>>2] = $127;
  $135 = $n;
  $136 = $tree;
  $137 = (($136) + ($135<<2)|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138&65535;
  $140 = $m;
  $141 = $tree;
  $142 = (($141) + ($140<<2)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143&65535;
  $145 = (($139) + ($144))|0;
  $146 = $145&65535;
  $147 = $node;
  $148 = $tree;
  $149 = (($148) + ($147<<2)|0);
  HEAP16[$149>>1] = $146;
  $150 = $n;
  $151 = $0;
  $152 = (($151) + 5208|0);
  $153 = (($152) + ($150)|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = $m;
  $157 = $0;
  $158 = (($157) + 5208|0);
  $159 = (($158) + ($156)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = ($155|0)>=($161|0);
  if ($162) {
   $163 = $n;
   $164 = $0;
   $165 = (($164) + 5208|0);
   $166 = (($165) + ($163)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $176 = $168;
  } else {
   $169 = $m;
   $170 = $0;
   $171 = (($170) + 5208|0);
   $172 = (($171) + ($169)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $176 = $174;
  }
  $175 = (($176) + 1)|0;
  $177 = $175&255;
  $178 = $node;
  $179 = $0;
  $180 = (($179) + 5208|0);
  $181 = (($180) + ($178)|0);
  HEAP8[$181>>0] = $177;
  $182 = $node;
  $183 = $182&65535;
  $184 = $m;
  $185 = $tree;
  $186 = (($185) + ($184<<2)|0);
  $187 = (($186) + 2|0);
  HEAP16[$187>>1] = $183;
  $188 = $n;
  $189 = $tree;
  $190 = (($189) + ($188<<2)|0);
  $191 = (($190) + 2|0);
  HEAP16[$191>>1] = $183;
  $192 = $node;
  $193 = (($192) + 1)|0;
  $node = $193;
  $194 = $0;
  $195 = (($194) + 2908|0);
  $196 = (($195) + 4|0);
  HEAP32[$196>>2] = $192;
  $197 = $0;
  $198 = $tree;
  _pqdownheap($197,$198,1);
  $199 = $0;
  $200 = (($199) + 5200|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)>=(2);
  if (!($202)) {
   break;
  }
 }
 $203 = $0;
 $204 = (($203) + 2908|0);
 $205 = (($204) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $0;
 $208 = (($207) + 5204|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($209) + -1)|0;
 HEAP32[$208>>2] = $210;
 $211 = $0;
 $212 = (($211) + 2908|0);
 $213 = (($212) + ($210<<2)|0);
 HEAP32[$213>>2] = $206;
 $214 = $0;
 $215 = $1;
 _gen_bitlen($214,$215);
 $216 = $tree;
 $217 = $max_code;
 $218 = $0;
 $219 = (($218) + 2876|0);
 _gen_codes($216,$217,$219);
 STACKTOP = sp;return;
}
function _build_bl_tree($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max_blindex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 148|0);
 $4 = $0;
 $5 = (($4) + 2840|0);
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _scan_tree($1,$3,$7);
 $8 = $0;
 $9 = $0;
 $10 = (($9) + 2440|0);
 $11 = $0;
 $12 = (($11) + 2852|0);
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 _scan_tree($8,$10,$14);
 $15 = $0;
 $16 = $0;
 $17 = (($16) + 2864|0);
 _build_tree($15,$17);
 $max_blindex = 18;
 while(1) {
  $18 = $max_blindex;
  $19 = ($18|0)>=(3);
  if (!($19)) {
   break;
  }
  $20 = $max_blindex;
  $21 = (27352 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $0;
  $25 = (($24) + 2684|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = (($26) + 2|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 4;
   break;
  }
  $31 = $max_blindex;
  $32 = (($31) + -1)|0;
  $max_blindex = $32;
 }
 if ((label|0) == 4) {
 }
 $33 = $max_blindex;
 $34 = (($33) + 1)|0;
 $35 = ($34*3)|0;
 $36 = (($35) + 5)|0;
 $37 = (($36) + 5)|0;
 $38 = (($37) + 4)|0;
 $39 = $0;
 $40 = (($39) + 5800|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $max_blindex;
 STACKTOP = sp;return ($43|0);
}
function _compress_block($s,$ltree,$dtree) {
 $s = $s|0;
 $ltree = $ltree|0;
 $dtree = $dtree|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0;
 var $dist = 0, $extra = 0, $lc = 0, $len = 0, $len1 = 0, $len3 = 0, $len5 = 0, $len7 = 0, $len9 = 0, $lx = 0, $val = 0, $val10 = 0, $val2 = 0, $val4 = 0, $val6 = 0, $val8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $ltree;
 $2 = $dtree;
 $lx = 0;
 $3 = $0;
 $4 = (($3) + 5792|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  while(1) {
   $7 = $lx;
   $8 = $0;
   $9 = (($8) + 5796|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($7<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $dist = $13;
   $14 = $lx;
   $15 = (($14) + 1)|0;
   $lx = $15;
   $16 = $0;
   $17 = (($16) + 5784|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($14)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $lc = $21;
   $22 = $dist;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $lc;
    $25 = $1;
    $26 = (($25) + ($24<<2)|0);
    $27 = (($26) + 2|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $len = $29;
    $30 = $0;
    $31 = (($30) + 5820|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $len;
    $34 = (16 - ($33))|0;
    $35 = ($32|0)>($34|0);
    if ($35) {
     $36 = $lc;
     $37 = $1;
     $38 = (($37) + ($36<<2)|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39&65535;
     $val = $40;
     $41 = $val;
     $42 = $41&65535;
     $43 = $42&65535;
     $44 = $0;
     $45 = (($44) + 5820|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43 << $46;
     $48 = $0;
     $49 = (($48) + 5816|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = $50&65535;
     $52 = $51 | $47;
     $53 = $52&65535;
     HEAP16[$49>>1] = $53;
     $54 = $0;
     $55 = (($54) + 5816|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = $57 & 255;
     $59 = $58&255;
     $60 = $0;
     $61 = (($60) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + 1)|0;
     HEAP32[$61>>2] = $63;
     $64 = $0;
     $65 = (($64) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + ($62)|0);
     HEAP8[$67>>0] = $59;
     $68 = $0;
     $69 = (($68) + 5816|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $70&65535;
     $72 = $71 >> 8;
     $73 = $72&255;
     $74 = $0;
     $75 = (($74) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + 1)|0;
     HEAP32[$75>>2] = $77;
     $78 = $0;
     $79 = (($78) + 8|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + ($76)|0);
     HEAP8[$81>>0] = $73;
     $82 = $val;
     $83 = $82&65535;
     $84 = $83&65535;
     $85 = $0;
     $86 = (($85) + 5820|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (16 - ($87))|0;
     $89 = $84 >> $88;
     $90 = $89&65535;
     $91 = $0;
     $92 = (($91) + 5816|0);
     HEAP16[$92>>1] = $90;
     $93 = $len;
     $94 = (($93) - 16)|0;
     $95 = $0;
     $96 = (($95) + 5820|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($94))|0;
     HEAP32[$96>>2] = $98;
    } else {
     $99 = $lc;
     $100 = $1;
     $101 = (($100) + ($99<<2)|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $102&65535;
     $104 = $0;
     $105 = (($104) + 5820|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $103 << $106;
     $108 = $0;
     $109 = (($108) + 5816|0);
     $110 = HEAP16[$109>>1]|0;
     $111 = $110&65535;
     $112 = $111 | $107;
     $113 = $112&65535;
     HEAP16[$109>>1] = $113;
     $114 = $len;
     $115 = $0;
     $116 = (($115) + 5820|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + ($114))|0;
     HEAP32[$116>>2] = $118;
    }
   } else {
    $119 = $lc;
    $120 = (25272 + ($119)|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $code = $122;
    $123 = $code;
    $124 = (($123) + 256)|0;
    $125 = (($124) + 1)|0;
    $126 = $1;
    $127 = (($126) + ($125<<2)|0);
    $128 = (($127) + 2|0);
    $129 = HEAP16[$128>>1]|0;
    $130 = $129&65535;
    $len1 = $130;
    $131 = $0;
    $132 = (($131) + 5820|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $len1;
    $135 = (16 - ($134))|0;
    $136 = ($133|0)>($135|0);
    if ($136) {
     $137 = $code;
     $138 = (($137) + 256)|0;
     $139 = (($138) + 1)|0;
     $140 = $1;
     $141 = (($140) + ($139<<2)|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $val2 = $143;
     $144 = $val2;
     $145 = $144&65535;
     $146 = $145&65535;
     $147 = $0;
     $148 = (($147) + 5820|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $146 << $149;
     $151 = $0;
     $152 = (($151) + 5816|0);
     $153 = HEAP16[$152>>1]|0;
     $154 = $153&65535;
     $155 = $154 | $150;
     $156 = $155&65535;
     HEAP16[$152>>1] = $156;
     $157 = $0;
     $158 = (($157) + 5816|0);
     $159 = HEAP16[$158>>1]|0;
     $160 = $159&65535;
     $161 = $160 & 255;
     $162 = $161&255;
     $163 = $0;
     $164 = (($163) + 20|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 1)|0;
     HEAP32[$164>>2] = $166;
     $167 = $0;
     $168 = (($167) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($169) + ($165)|0);
     HEAP8[$170>>0] = $162;
     $171 = $0;
     $172 = (($171) + 5816|0);
     $173 = HEAP16[$172>>1]|0;
     $174 = $173&65535;
     $175 = $174 >> 8;
     $176 = $175&255;
     $177 = $0;
     $178 = (($177) + 20|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) + 1)|0;
     HEAP32[$178>>2] = $180;
     $181 = $0;
     $182 = (($181) + 8|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + ($179)|0);
     HEAP8[$184>>0] = $176;
     $185 = $val2;
     $186 = $185&65535;
     $187 = $186&65535;
     $188 = $0;
     $189 = (($188) + 5820|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (16 - ($190))|0;
     $192 = $187 >> $191;
     $193 = $192&65535;
     $194 = $0;
     $195 = (($194) + 5816|0);
     HEAP16[$195>>1] = $193;
     $196 = $len1;
     $197 = (($196) - 16)|0;
     $198 = $0;
     $199 = (($198) + 5820|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197))|0;
     HEAP32[$199>>2] = $201;
    } else {
     $202 = $code;
     $203 = (($202) + 256)|0;
     $204 = (($203) + 1)|0;
     $205 = $1;
     $206 = (($205) + ($204<<2)|0);
     $207 = HEAP16[$206>>1]|0;
     $208 = $207&65535;
     $209 = $0;
     $210 = (($209) + 5820|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $208 << $211;
     $213 = $0;
     $214 = (($213) + 5816|0);
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = $216 | $212;
     $218 = $217&65535;
     HEAP16[$214>>1] = $218;
     $219 = $len1;
     $220 = $0;
     $221 = (($220) + 5820|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = (($222) + ($219))|0;
     HEAP32[$221>>2] = $223;
    }
    $224 = $code;
    $225 = (26872 + ($224<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    $extra = $226;
    $227 = $extra;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $code;
     $230 = (26992 + ($229<<2)|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = $lc;
     $233 = (($232) - ($231))|0;
     $lc = $233;
     $234 = $extra;
     $len3 = $234;
     $235 = $0;
     $236 = (($235) + 5820|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = $len3;
     $239 = (16 - ($238))|0;
     $240 = ($237|0)>($239|0);
     if ($240) {
      $241 = $lc;
      $val4 = $241;
      $242 = $val4;
      $243 = $242&65535;
      $244 = $243&65535;
      $245 = $0;
      $246 = (($245) + 5820|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = $244 << $247;
      $249 = $0;
      $250 = (($249) + 5816|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = $251&65535;
      $253 = $252 | $248;
      $254 = $253&65535;
      HEAP16[$250>>1] = $254;
      $255 = $0;
      $256 = (($255) + 5816|0);
      $257 = HEAP16[$256>>1]|0;
      $258 = $257&65535;
      $259 = $258 & 255;
      $260 = $259&255;
      $261 = $0;
      $262 = (($261) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[$262>>2] = $264;
      $265 = $0;
      $266 = (($265) + 8|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (($267) + ($263)|0);
      HEAP8[$268>>0] = $260;
      $269 = $0;
      $270 = (($269) + 5816|0);
      $271 = HEAP16[$270>>1]|0;
      $272 = $271&65535;
      $273 = $272 >> 8;
      $274 = $273&255;
      $275 = $0;
      $276 = (($275) + 20|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = (($277) + 1)|0;
      HEAP32[$276>>2] = $278;
      $279 = $0;
      $280 = (($279) + 8|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (($281) + ($277)|0);
      HEAP8[$282>>0] = $274;
      $283 = $val4;
      $284 = $283&65535;
      $285 = $284&65535;
      $286 = $0;
      $287 = (($286) + 5820|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (16 - ($288))|0;
      $290 = $285 >> $289;
      $291 = $290&65535;
      $292 = $0;
      $293 = (($292) + 5816|0);
      HEAP16[$293>>1] = $291;
      $294 = $len3;
      $295 = (($294) - 16)|0;
      $296 = $0;
      $297 = (($296) + 5820|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + ($295))|0;
      HEAP32[$297>>2] = $299;
     } else {
      $300 = $lc;
      $301 = $300&65535;
      $302 = $301&65535;
      $303 = $0;
      $304 = (($303) + 5820|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $302 << $305;
      $307 = $0;
      $308 = (($307) + 5816|0);
      $309 = HEAP16[$308>>1]|0;
      $310 = $309&65535;
      $311 = $310 | $306;
      $312 = $311&65535;
      HEAP16[$308>>1] = $312;
      $313 = $len3;
      $314 = $0;
      $315 = (($314) + 5820|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = (($316) + ($313))|0;
      HEAP32[$315>>2] = $317;
     }
    }
    $318 = $dist;
    $319 = (($318) + -1)|0;
    $dist = $319;
    $320 = $dist;
    $321 = ($320>>>0)<(256);
    if ($321) {
     $322 = $dist;
     $323 = (24760 + ($322)|0);
     $324 = HEAP8[$323>>0]|0;
     $325 = $324&255;
     $332 = $325;
    } else {
     $326 = $dist;
     $327 = $326 >>> 7;
     $328 = (256 + ($327))|0;
     $329 = (24760 + ($328)|0);
     $330 = HEAP8[$329>>0]|0;
     $331 = $330&255;
     $332 = $331;
    }
    $code = $332;
    $333 = $code;
    $334 = $2;
    $335 = (($334) + ($333<<2)|0);
    $336 = (($335) + 2|0);
    $337 = HEAP16[$336>>1]|0;
    $338 = $337&65535;
    $len5 = $338;
    $339 = $0;
    $340 = (($339) + 5820|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $len5;
    $343 = (16 - ($342))|0;
    $344 = ($341|0)>($343|0);
    if ($344) {
     $345 = $code;
     $346 = $2;
     $347 = (($346) + ($345<<2)|0);
     $348 = HEAP16[$347>>1]|0;
     $349 = $348&65535;
     $val6 = $349;
     $350 = $val6;
     $351 = $350&65535;
     $352 = $351&65535;
     $353 = $0;
     $354 = (($353) + 5820|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $352 << $355;
     $357 = $0;
     $358 = (($357) + 5816|0);
     $359 = HEAP16[$358>>1]|0;
     $360 = $359&65535;
     $361 = $360 | $356;
     $362 = $361&65535;
     HEAP16[$358>>1] = $362;
     $363 = $0;
     $364 = (($363) + 5816|0);
     $365 = HEAP16[$364>>1]|0;
     $366 = $365&65535;
     $367 = $366 & 255;
     $368 = $367&255;
     $369 = $0;
     $370 = (($369) + 20|0);
     $371 = HEAP32[$370>>2]|0;
     $372 = (($371) + 1)|0;
     HEAP32[$370>>2] = $372;
     $373 = $0;
     $374 = (($373) + 8|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = (($375) + ($371)|0);
     HEAP8[$376>>0] = $368;
     $377 = $0;
     $378 = (($377) + 5816|0);
     $379 = HEAP16[$378>>1]|0;
     $380 = $379&65535;
     $381 = $380 >> 8;
     $382 = $381&255;
     $383 = $0;
     $384 = (($383) + 20|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = (($385) + 1)|0;
     HEAP32[$384>>2] = $386;
     $387 = $0;
     $388 = (($387) + 8|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = (($389) + ($385)|0);
     HEAP8[$390>>0] = $382;
     $391 = $val6;
     $392 = $391&65535;
     $393 = $392&65535;
     $394 = $0;
     $395 = (($394) + 5820|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = (16 - ($396))|0;
     $398 = $393 >> $397;
     $399 = $398&65535;
     $400 = $0;
     $401 = (($400) + 5816|0);
     HEAP16[$401>>1] = $399;
     $402 = $len5;
     $403 = (($402) - 16)|0;
     $404 = $0;
     $405 = (($404) + 5820|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($406) + ($403))|0;
     HEAP32[$405>>2] = $407;
    } else {
     $408 = $code;
     $409 = $2;
     $410 = (($409) + ($408<<2)|0);
     $411 = HEAP16[$410>>1]|0;
     $412 = $411&65535;
     $413 = $0;
     $414 = (($413) + 5820|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = $412 << $415;
     $417 = $0;
     $418 = (($417) + 5816|0);
     $419 = HEAP16[$418>>1]|0;
     $420 = $419&65535;
     $421 = $420 | $416;
     $422 = $421&65535;
     HEAP16[$418>>1] = $422;
     $423 = $len5;
     $424 = $0;
     $425 = (($424) + 5820|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (($426) + ($423))|0;
     HEAP32[$425>>2] = $427;
    }
    $428 = $code;
    $429 = (27112 + ($428<<2)|0);
    $430 = HEAP32[$429>>2]|0;
    $extra = $430;
    $431 = $extra;
    $432 = ($431|0)!=(0);
    if ($432) {
     $433 = $code;
     $434 = (27232 + ($433<<2)|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = $dist;
     $437 = (($436) - ($435))|0;
     $dist = $437;
     $438 = $extra;
     $len7 = $438;
     $439 = $0;
     $440 = (($439) + 5820|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = $len7;
     $443 = (16 - ($442))|0;
     $444 = ($441|0)>($443|0);
     if ($444) {
      $445 = $dist;
      $val8 = $445;
      $446 = $val8;
      $447 = $446&65535;
      $448 = $447&65535;
      $449 = $0;
      $450 = (($449) + 5820|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $448 << $451;
      $453 = $0;
      $454 = (($453) + 5816|0);
      $455 = HEAP16[$454>>1]|0;
      $456 = $455&65535;
      $457 = $456 | $452;
      $458 = $457&65535;
      HEAP16[$454>>1] = $458;
      $459 = $0;
      $460 = (($459) + 5816|0);
      $461 = HEAP16[$460>>1]|0;
      $462 = $461&65535;
      $463 = $462 & 255;
      $464 = $463&255;
      $465 = $0;
      $466 = (($465) + 20|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = (($467) + 1)|0;
      HEAP32[$466>>2] = $468;
      $469 = $0;
      $470 = (($469) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = (($471) + ($467)|0);
      HEAP8[$472>>0] = $464;
      $473 = $0;
      $474 = (($473) + 5816|0);
      $475 = HEAP16[$474>>1]|0;
      $476 = $475&65535;
      $477 = $476 >> 8;
      $478 = $477&255;
      $479 = $0;
      $480 = (($479) + 20|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = (($481) + 1)|0;
      HEAP32[$480>>2] = $482;
      $483 = $0;
      $484 = (($483) + 8|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = (($485) + ($481)|0);
      HEAP8[$486>>0] = $478;
      $487 = $val8;
      $488 = $487&65535;
      $489 = $488&65535;
      $490 = $0;
      $491 = (($490) + 5820|0);
      $492 = HEAP32[$491>>2]|0;
      $493 = (16 - ($492))|0;
      $494 = $489 >> $493;
      $495 = $494&65535;
      $496 = $0;
      $497 = (($496) + 5816|0);
      HEAP16[$497>>1] = $495;
      $498 = $len7;
      $499 = (($498) - 16)|0;
      $500 = $0;
      $501 = (($500) + 5820|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = (($502) + ($499))|0;
      HEAP32[$501>>2] = $503;
     } else {
      $504 = $dist;
      $505 = $504&65535;
      $506 = $505&65535;
      $507 = $0;
      $508 = (($507) + 5820|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = $506 << $509;
      $511 = $0;
      $512 = (($511) + 5816|0);
      $513 = HEAP16[$512>>1]|0;
      $514 = $513&65535;
      $515 = $514 | $510;
      $516 = $515&65535;
      HEAP16[$512>>1] = $516;
      $517 = $len7;
      $518 = $0;
      $519 = (($518) + 5820|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = (($520) + ($517))|0;
      HEAP32[$519>>2] = $521;
     }
    }
   }
   $522 = $lx;
   $523 = $0;
   $524 = (($523) + 5792|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = ($522>>>0)<($525>>>0);
   if (!($526)) {
    break;
   }
  }
 }
 $527 = $1;
 $528 = (($527) + 1024|0);
 $529 = (($528) + 2|0);
 $530 = HEAP16[$529>>1]|0;
 $531 = $530&65535;
 $len9 = $531;
 $532 = $0;
 $533 = (($532) + 5820|0);
 $534 = HEAP32[$533>>2]|0;
 $535 = $len9;
 $536 = (16 - ($535))|0;
 $537 = ($534|0)>($536|0);
 if ($537) {
  $538 = $1;
  $539 = (($538) + 1024|0);
  $540 = HEAP16[$539>>1]|0;
  $541 = $540&65535;
  $val10 = $541;
  $542 = $val10;
  $543 = $542&65535;
  $544 = $543&65535;
  $545 = $0;
  $546 = (($545) + 5820|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = $544 << $547;
  $549 = $0;
  $550 = (($549) + 5816|0);
  $551 = HEAP16[$550>>1]|0;
  $552 = $551&65535;
  $553 = $552 | $548;
  $554 = $553&65535;
  HEAP16[$550>>1] = $554;
  $555 = $0;
  $556 = (($555) + 5816|0);
  $557 = HEAP16[$556>>1]|0;
  $558 = $557&65535;
  $559 = $558 & 255;
  $560 = $559&255;
  $561 = $0;
  $562 = (($561) + 20|0);
  $563 = HEAP32[$562>>2]|0;
  $564 = (($563) + 1)|0;
  HEAP32[$562>>2] = $564;
  $565 = $0;
  $566 = (($565) + 8|0);
  $567 = HEAP32[$566>>2]|0;
  $568 = (($567) + ($563)|0);
  HEAP8[$568>>0] = $560;
  $569 = $0;
  $570 = (($569) + 5816|0);
  $571 = HEAP16[$570>>1]|0;
  $572 = $571&65535;
  $573 = $572 >> 8;
  $574 = $573&255;
  $575 = $0;
  $576 = (($575) + 20|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = (($577) + 1)|0;
  HEAP32[$576>>2] = $578;
  $579 = $0;
  $580 = (($579) + 8|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = (($581) + ($577)|0);
  HEAP8[$582>>0] = $574;
  $583 = $val10;
  $584 = $583&65535;
  $585 = $584&65535;
  $586 = $0;
  $587 = (($586) + 5820|0);
  $588 = HEAP32[$587>>2]|0;
  $589 = (16 - ($588))|0;
  $590 = $585 >> $589;
  $591 = $590&65535;
  $592 = $0;
  $593 = (($592) + 5816|0);
  HEAP16[$593>>1] = $591;
  $594 = $len9;
  $595 = (($594) - 16)|0;
  $596 = $0;
  $597 = (($596) + 5820|0);
  $598 = HEAP32[$597>>2]|0;
  $599 = (($598) + ($595))|0;
  HEAP32[$597>>2] = $599;
  STACKTOP = sp;return;
 } else {
  $600 = $1;
  $601 = (($600) + 1024|0);
  $602 = HEAP16[$601>>1]|0;
  $603 = $602&65535;
  $604 = $0;
  $605 = (($604) + 5820|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = $603 << $606;
  $608 = $0;
  $609 = (($608) + 5816|0);
  $610 = HEAP16[$609>>1]|0;
  $611 = $610&65535;
  $612 = $611 | $607;
  $613 = $612&65535;
  HEAP16[$609>>1] = $613;
  $614 = $len9;
  $615 = $0;
  $616 = (($615) + 5820|0);
  $617 = HEAP32[$616>>2]|0;
  $618 = (($617) + ($614))|0;
  HEAP32[$616>>2] = $618;
  STACKTOP = sp;return;
 }
}
function _send_all_trees($s,$lcodes,$dcodes,$blcodes) {
 $s = $s|0;
 $lcodes = $lcodes|0;
 $dcodes = $dcodes|0;
 $blcodes = $blcodes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $len3 = 0, $len5 = 0, $rank = 0, $val = 0, $val2 = 0;
 var $val4 = 0, $val6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $lcodes;
 $2 = $dcodes;
 $3 = $blcodes;
 $len = 5;
 $4 = $0;
 $5 = (($4) + 5820|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $len;
 $8 = (16 - ($7))|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) - 257)|0;
  $val = $11;
  $12 = $val;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $0;
  $16 = (($15) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $0;
  $26 = (($25) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $0;
  $32 = (($31) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $0;
  $40 = (($39) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $val;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $0;
  $57 = (($56) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $0;
  $63 = (($62) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $len;
  $65 = (($64) - 16)|0;
  $66 = $0;
  $67 = (($66) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
 } else {
  $70 = $1;
  $71 = (($70) - 257)|0;
  $72 = $71&65535;
  $73 = $72&65535;
  $74 = $0;
  $75 = (($74) + 5820|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73 << $76;
  $78 = $0;
  $79 = (($78) + 5816|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | $77;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
  $84 = $len;
  $85 = $0;
  $86 = (($85) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84))|0;
  HEAP32[$86>>2] = $88;
 }
 $len1 = 5;
 $89 = $0;
 $90 = (($89) + 5820|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $len1;
 $93 = (16 - ($92))|0;
 $94 = ($91|0)>($93|0);
 if ($94) {
  $95 = $2;
  $96 = (($95) - 1)|0;
  $val2 = $96;
  $97 = $val2;
  $98 = $97&65535;
  $99 = $98&65535;
  $100 = $0;
  $101 = (($100) + 5820|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99 << $102;
  $104 = $0;
  $105 = (($104) + 5816|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106&65535;
  $108 = $107 | $103;
  $109 = $108&65535;
  HEAP16[$105>>1] = $109;
  $110 = $0;
  $111 = (($110) + 5816|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = $113 & 255;
  $115 = $114&255;
  $116 = $0;
  $117 = (($116) + 20|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 1)|0;
  HEAP32[$117>>2] = $119;
  $120 = $0;
  $121 = (($120) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($118)|0);
  HEAP8[$123>>0] = $115;
  $124 = $0;
  $125 = (($124) + 5816|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126&65535;
  $128 = $127 >> 8;
  $129 = $128&255;
  $130 = $0;
  $131 = (($130) + 20|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 1)|0;
  HEAP32[$131>>2] = $133;
  $134 = $0;
  $135 = (($134) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($132)|0);
  HEAP8[$137>>0] = $129;
  $138 = $val2;
  $139 = $138&65535;
  $140 = $139&65535;
  $141 = $0;
  $142 = (($141) + 5820|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (16 - ($143))|0;
  $145 = $140 >> $144;
  $146 = $145&65535;
  $147 = $0;
  $148 = (($147) + 5816|0);
  HEAP16[$148>>1] = $146;
  $149 = $len1;
  $150 = (($149) - 16)|0;
  $151 = $0;
  $152 = (($151) + 5820|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($150))|0;
  HEAP32[$152>>2] = $154;
 } else {
  $155 = $2;
  $156 = (($155) - 1)|0;
  $157 = $156&65535;
  $158 = $157&65535;
  $159 = $0;
  $160 = (($159) + 5820|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $158 << $161;
  $163 = $0;
  $164 = (($163) + 5816|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165&65535;
  $167 = $166 | $162;
  $168 = $167&65535;
  HEAP16[$164>>1] = $168;
  $169 = $len1;
  $170 = $0;
  $171 = (($170) + 5820|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + ($169))|0;
  HEAP32[$171>>2] = $173;
 }
 $len3 = 4;
 $174 = $0;
 $175 = (($174) + 5820|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $len3;
 $178 = (16 - ($177))|0;
 $179 = ($176|0)>($178|0);
 if ($179) {
  $180 = $3;
  $181 = (($180) - 4)|0;
  $val4 = $181;
  $182 = $val4;
  $183 = $182&65535;
  $184 = $183&65535;
  $185 = $0;
  $186 = (($185) + 5820|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $184 << $187;
  $189 = $0;
  $190 = (($189) + 5816|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = $192 | $188;
  $194 = $193&65535;
  HEAP16[$190>>1] = $194;
  $195 = $0;
  $196 = (($195) + 5816|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = $198 & 255;
  $200 = $199&255;
  $201 = $0;
  $202 = (($201) + 20|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + 1)|0;
  HEAP32[$202>>2] = $204;
  $205 = $0;
  $206 = (($205) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + ($203)|0);
  HEAP8[$208>>0] = $200;
  $209 = $0;
  $210 = (($209) + 5816|0);
  $211 = HEAP16[$210>>1]|0;
  $212 = $211&65535;
  $213 = $212 >> 8;
  $214 = $213&255;
  $215 = $0;
  $216 = (($215) + 20|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + 1)|0;
  HEAP32[$216>>2] = $218;
  $219 = $0;
  $220 = (($219) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + ($217)|0);
  HEAP8[$222>>0] = $214;
  $223 = $val4;
  $224 = $223&65535;
  $225 = $224&65535;
  $226 = $0;
  $227 = (($226) + 5820|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (16 - ($228))|0;
  $230 = $225 >> $229;
  $231 = $230&65535;
  $232 = $0;
  $233 = (($232) + 5816|0);
  HEAP16[$233>>1] = $231;
  $234 = $len3;
  $235 = (($234) - 16)|0;
  $236 = $0;
  $237 = (($236) + 5820|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + ($235))|0;
  HEAP32[$237>>2] = $239;
 } else {
  $240 = $3;
  $241 = (($240) - 4)|0;
  $242 = $241&65535;
  $243 = $242&65535;
  $244 = $0;
  $245 = (($244) + 5820|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $243 << $246;
  $248 = $0;
  $249 = (($248) + 5816|0);
  $250 = HEAP16[$249>>1]|0;
  $251 = $250&65535;
  $252 = $251 | $247;
  $253 = $252&65535;
  HEAP16[$249>>1] = $253;
  $254 = $len3;
  $255 = $0;
  $256 = (($255) + 5820|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + ($254))|0;
  HEAP32[$256>>2] = $258;
 }
 $rank = 0;
 while(1) {
  $259 = $rank;
  $260 = $3;
  $261 = ($259|0)<($260|0);
  if (!($261)) {
   break;
  }
  $len5 = 3;
  $262 = $0;
  $263 = (($262) + 5820|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = $len5;
  $266 = (16 - ($265))|0;
  $267 = ($264|0)>($266|0);
  if ($267) {
   $268 = $rank;
   $269 = (27352 + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270&255;
   $272 = $0;
   $273 = (($272) + 2684|0);
   $274 = (($273) + ($271<<2)|0);
   $275 = (($274) + 2|0);
   $276 = HEAP16[$275>>1]|0;
   $277 = $276&65535;
   $val6 = $277;
   $278 = $val6;
   $279 = $278&65535;
   $280 = $279&65535;
   $281 = $0;
   $282 = (($281) + 5820|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $280 << $283;
   $285 = $0;
   $286 = (($285) + 5816|0);
   $287 = HEAP16[$286>>1]|0;
   $288 = $287&65535;
   $289 = $288 | $284;
   $290 = $289&65535;
   HEAP16[$286>>1] = $290;
   $291 = $0;
   $292 = (($291) + 5816|0);
   $293 = HEAP16[$292>>1]|0;
   $294 = $293&65535;
   $295 = $294 & 255;
   $296 = $295&255;
   $297 = $0;
   $298 = (($297) + 20|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($299) + 1)|0;
   HEAP32[$298>>2] = $300;
   $301 = $0;
   $302 = (($301) + 8|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($299)|0);
   HEAP8[$304>>0] = $296;
   $305 = $0;
   $306 = (($305) + 5816|0);
   $307 = HEAP16[$306>>1]|0;
   $308 = $307&65535;
   $309 = $308 >> 8;
   $310 = $309&255;
   $311 = $0;
   $312 = (($311) + 20|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = (($313) + 1)|0;
   HEAP32[$312>>2] = $314;
   $315 = $0;
   $316 = (($315) + 8|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = (($317) + ($313)|0);
   HEAP8[$318>>0] = $310;
   $319 = $val6;
   $320 = $319&65535;
   $321 = $320&65535;
   $322 = $0;
   $323 = (($322) + 5820|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (16 - ($324))|0;
   $326 = $321 >> $325;
   $327 = $326&65535;
   $328 = $0;
   $329 = (($328) + 5816|0);
   HEAP16[$329>>1] = $327;
   $330 = $len5;
   $331 = (($330) - 16)|0;
   $332 = $0;
   $333 = (($332) + 5820|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($334) + ($331))|0;
   HEAP32[$333>>2] = $335;
  } else {
   $336 = $rank;
   $337 = (27352 + ($336)|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = $338&255;
   $340 = $0;
   $341 = (($340) + 2684|0);
   $342 = (($341) + ($339<<2)|0);
   $343 = (($342) + 2|0);
   $344 = HEAP16[$343>>1]|0;
   $345 = $344&65535;
   $346 = $0;
   $347 = (($346) + 5820|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $345 << $348;
   $350 = $0;
   $351 = (($350) + 5816|0);
   $352 = HEAP16[$351>>1]|0;
   $353 = $352&65535;
   $354 = $353 | $349;
   $355 = $354&65535;
   HEAP16[$351>>1] = $355;
   $356 = $len5;
   $357 = $0;
   $358 = (($357) + 5820|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (($359) + ($356))|0;
   HEAP32[$358>>2] = $360;
  }
  $361 = $rank;
  $362 = (($361) + 1)|0;
  $rank = $362;
 }
 $363 = $0;
 $364 = $0;
 $365 = (($364) + 148|0);
 $366 = $1;
 $367 = (($366) - 1)|0;
 _send_tree($363,$365,$367);
 $368 = $0;
 $369 = $0;
 $370 = (($369) + 2440|0);
 $371 = $2;
 $372 = (($371) - 1)|0;
 _send_tree($368,$370,$372);
 STACKTOP = sp;return;
}
function _bi_windup($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(8);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 5816|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 255;
  $10 = $9&255;
  $11 = $0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13)|0);
  HEAP8[$18>>0] = $10;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $49 = $0;
  $50 = (($49) + 5816|0);
  HEAP16[$50>>1] = 0;
  $51 = $0;
  $52 = (($51) + 5820|0);
  HEAP32[$52>>2] = 0;
  STACKTOP = sp;return;
 }
 $33 = $0;
 $34 = (($33) + 5820|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)>(0);
 if ($36) {
  $37 = $0;
  $38 = (($37) + 5816|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&255;
  $41 = $0;
  $42 = (($41) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$42>>2] = $44;
  $45 = $0;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($43)|0);
  HEAP8[$48>>0] = $40;
 }
 $49 = $0;
 $50 = (($49) + 5816|0);
 HEAP16[$50>>1] = 0;
 $51 = $0;
 $52 = (($51) + 5820|0);
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function _pqdownheap($s,$tree,$k) {
 $s = $s|0;
 $tree = $tree|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $k;
 $3 = $2;
 $4 = $0;
 $5 = (($4) + 2908|0);
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $v = $7;
 $8 = $2;
 $9 = $8 << 1;
 $j = $9;
 while(1) {
  $10 = $j;
  $11 = $0;
  $12 = (($11) + 5200|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<=($13|0);
  if (!($14)) {
   label = 13;
   break;
  }
  $15 = $j;
  $16 = $0;
  $17 = (($16) + 5200|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  do {
   if ($19) {
    $20 = $j;
    $21 = (($20) + 1)|0;
    $22 = $0;
    $23 = (($22) + 2908|0);
    $24 = (($23) + ($21<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = (($26) + ($25<<2)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = $j;
    $31 = $0;
    $32 = (($31) + 2908|0);
    $33 = (($32) + ($30<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + ($34<<2)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = ($29|0)<($38|0);
    if (!($39)) {
     $40 = $j;
     $41 = (($40) + 1)|0;
     $42 = $0;
     $43 = (($42) + 2908|0);
     $44 = (($43) + ($41<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $1;
     $47 = (($46) + ($45<<2)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = $j;
     $51 = $0;
     $52 = (($51) + 2908|0);
     $53 = (($52) + ($50<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $1;
     $56 = (($55) + ($54<<2)|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57&65535;
     $59 = ($49|0)==($58|0);
     if (!($59)) {
      break;
     }
     $60 = $j;
     $61 = (($60) + 1)|0;
     $62 = $0;
     $63 = (($62) + 2908|0);
     $64 = (($63) + ($61<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $0;
     $67 = (($66) + 5208|0);
     $68 = (($67) + ($65)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $j;
     $72 = $0;
     $73 = (($72) + 2908|0);
     $74 = (($73) + ($71<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $0;
     $77 = (($76) + 5208|0);
     $78 = (($77) + ($75)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = ($70|0)<=($80|0);
     if (!($81)) {
      break;
     }
    }
    $82 = $j;
    $83 = (($82) + 1)|0;
    $j = $83;
   }
  } while(0);
  $84 = $v;
  $85 = $1;
  $86 = (($85) + ($84<<2)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $89 = $j;
  $90 = $0;
  $91 = (($90) + 2908|0);
  $92 = (($91) + ($89<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $1;
  $95 = (($94) + ($93<<2)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96&65535;
  $98 = ($88|0)<($97|0);
  if ($98) {
   break;
  }
  $99 = $v;
  $100 = $1;
  $101 = (($100) + ($99<<2)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = $j;
  $105 = $0;
  $106 = (($105) + 2908|0);
  $107 = (($106) + ($104<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $1;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = ($103|0)==($112|0);
  if ($113) {
   $114 = $v;
   $115 = $0;
   $116 = (($115) + 5208|0);
   $117 = (($116) + ($114)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $j;
   $121 = $0;
   $122 = (($121) + 2908|0);
   $123 = (($122) + ($120<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $0;
   $126 = (($125) + 5208|0);
   $127 = (($126) + ($124)|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = ($119|0)<=($129|0);
   if ($130) {
    break;
   }
  }
  $131 = $j;
  $132 = $0;
  $133 = (($132) + 2908|0);
  $134 = (($133) + ($131<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $2;
  $137 = $0;
  $138 = (($137) + 2908|0);
  $139 = (($138) + ($136<<2)|0);
  HEAP32[$139>>2] = $135;
  $140 = $j;
  $2 = $140;
  $141 = $j;
  $142 = $141 << 1;
  $j = $142;
 }
 if ((label|0) == 13) {
  $143 = $v;
  $144 = $2;
  $145 = $0;
  $146 = (($145) + 2908|0);
  $147 = (($146) + ($144<<2)|0);
  HEAP32[$147>>2] = $143;
  STACKTOP = sp;return;
 }
 $143 = $v;
 $144 = $2;
 $145 = $0;
 $146 = (($145) + 2908|0);
 $147 = (($146) + ($144<<2)|0);
 HEAP32[$147>>2] = $143;
 STACKTOP = sp;return;
}
function _gen_bitlen($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $bits = 0, $extra = 0, $f = 0, $h = 0, $m = 0, $max_code = 0, $max_length = 0, $n = 0, $overflow = 0, $stree = 0, $tree = 0, $xbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $desc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $tree = $3;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $max_code = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $stree = $10;
 $11 = $1;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $extra = $15;
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $base = $20;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $max_length = $25;
 $overflow = 0;
 $bits = 0;
 while(1) {
  $26 = $bits;
  $27 = ($26|0)<=(15);
  if (!($27)) {
   break;
  }
  $28 = $bits;
  $29 = $0;
  $30 = (($29) + 2876|0);
  $31 = (($30) + ($28<<1)|0);
  HEAP16[$31>>1] = 0;
  $32 = $bits;
  $33 = (($32) + 1)|0;
  $bits = $33;
 }
 $34 = $0;
 $35 = (($34) + 5204|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = (($37) + 2908|0);
 $39 = (($38) + ($36<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $tree;
 $42 = (($41) + ($40<<2)|0);
 $43 = (($42) + 2|0);
 HEAP16[$43>>1] = 0;
 $44 = $0;
 $45 = (($44) + 5204|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 $h = $47;
 while(1) {
  $48 = $h;
  $49 = ($48|0)<(573);
  if (!($49)) {
   break;
  }
  $50 = $h;
  $51 = $0;
  $52 = (($51) + 2908|0);
  $53 = (($52) + ($50<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $n = $54;
  $55 = $n;
  $56 = $tree;
  $57 = (($56) + ($55<<2)|0);
  $58 = (($57) + 2|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = $tree;
  $62 = (($61) + ($60<<2)|0);
  $63 = (($62) + 2|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = (($65) + 1)|0;
  $bits = $66;
  $67 = $bits;
  $68 = $max_length;
  $69 = ($67|0)>($68|0);
  if ($69) {
   $70 = $max_length;
   $bits = $70;
   $71 = $overflow;
   $72 = (($71) + 1)|0;
   $overflow = $72;
  }
  $73 = $bits;
  $74 = $73&65535;
  $75 = $n;
  $76 = $tree;
  $77 = (($76) + ($75<<2)|0);
  $78 = (($77) + 2|0);
  HEAP16[$78>>1] = $74;
  $79 = $n;
  $80 = $max_code;
  $81 = ($79|0)>($80|0);
  if ($81) {
  } else {
   $82 = $bits;
   $83 = $0;
   $84 = (($83) + 2876|0);
   $85 = (($84) + ($82<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = (($86) + 1)<<16>>16;
   HEAP16[$85>>1] = $87;
   $xbits = 0;
   $88 = $n;
   $89 = $base;
   $90 = ($88|0)>=($89|0);
   if ($90) {
    $91 = $n;
    $92 = $base;
    $93 = (($91) - ($92))|0;
    $94 = $extra;
    $95 = (($94) + ($93<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $xbits = $96;
   }
   $97 = $n;
   $98 = $tree;
   $99 = (($98) + ($97<<2)|0);
   $100 = HEAP16[$99>>1]|0;
   $f = $100;
   $101 = $f;
   $102 = $101&65535;
   $103 = $bits;
   $104 = $xbits;
   $105 = (($103) + ($104))|0;
   $106 = Math_imul($102, $105)|0;
   $107 = $0;
   $108 = (($107) + 5800|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($106))|0;
   HEAP32[$108>>2] = $110;
   $111 = $stree;
   $112 = ($111|0)!=(0|0);
   if ($112) {
    $113 = $f;
    $114 = $113&65535;
    $115 = $n;
    $116 = $stree;
    $117 = (($116) + ($115<<2)|0);
    $118 = (($117) + 2|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = $119&65535;
    $121 = $xbits;
    $122 = (($120) + ($121))|0;
    $123 = Math_imul($114, $122)|0;
    $124 = $0;
    $125 = (($124) + 5804|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123))|0;
    HEAP32[$125>>2] = $127;
   }
  }
  $128 = $h;
  $129 = (($128) + 1)|0;
  $h = $129;
 }
 $130 = $overflow;
 $131 = ($130|0)==(0);
 if ($131) {
  STACKTOP = sp;return;
 }
 while(1) {
  $132 = $max_length;
  $133 = (($132) - 1)|0;
  $bits = $133;
  while(1) {
   $134 = $bits;
   $135 = $0;
   $136 = (($135) + 2876|0);
   $137 = (($136) + ($134<<1)|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $138&65535;
   $140 = ($139|0)==(0);
   if (!($140)) {
    break;
   }
   $141 = $bits;
   $142 = (($141) + -1)|0;
   $bits = $142;
  }
  $143 = $bits;
  $144 = $0;
  $145 = (($144) + 2876|0);
  $146 = (($145) + ($143<<1)|0);
  $147 = HEAP16[$146>>1]|0;
  $148 = (($147) + -1)<<16>>16;
  HEAP16[$146>>1] = $148;
  $149 = $bits;
  $150 = (($149) + 1)|0;
  $151 = $0;
  $152 = (($151) + 2876|0);
  $153 = (($152) + ($150<<1)|0);
  $154 = HEAP16[$153>>1]|0;
  $155 = $154&65535;
  $156 = (($155) + 2)|0;
  $157 = $156&65535;
  HEAP16[$153>>1] = $157;
  $158 = $max_length;
  $159 = $0;
  $160 = (($159) + 2876|0);
  $161 = (($160) + ($158<<1)|0);
  $162 = HEAP16[$161>>1]|0;
  $163 = (($162) + -1)<<16>>16;
  HEAP16[$161>>1] = $163;
  $164 = $overflow;
  $165 = (($164) - 2)|0;
  $overflow = $165;
  $166 = $overflow;
  $167 = ($166|0)>(0);
  if (!($167)) {
   break;
  }
 }
 $168 = $max_length;
 $bits = $168;
 while(1) {
  $169 = $bits;
  $170 = ($169|0)!=(0);
  if (!($170)) {
   break;
  }
  $171 = $bits;
  $172 = $0;
  $173 = (($172) + 2876|0);
  $174 = (($173) + ($171<<1)|0);
  $175 = HEAP16[$174>>1]|0;
  $176 = $175&65535;
  $n = $176;
  while(1) {
   $177 = $n;
   $178 = ($177|0)!=(0);
   if (!($178)) {
    break;
   }
   $179 = $h;
   $180 = (($179) + -1)|0;
   $h = $180;
   $181 = $0;
   $182 = (($181) + 2908|0);
   $183 = (($182) + ($180<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $m = $184;
   $185 = $m;
   $186 = $max_code;
   $187 = ($185|0)>($186|0);
   if ($187) {
    continue;
   }
   $188 = $m;
   $189 = $tree;
   $190 = (($189) + ($188<<2)|0);
   $191 = (($190) + 2|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192&65535;
   $194 = $bits;
   $195 = ($193|0)!=($194|0);
   if ($195) {
    $196 = $bits;
    $197 = $m;
    $198 = $tree;
    $199 = (($198) + ($197<<2)|0);
    $200 = (($199) + 2|0);
    $201 = HEAP16[$200>>1]|0;
    $202 = $201&65535;
    $203 = (($196) - ($202))|0;
    $204 = $m;
    $205 = $tree;
    $206 = (($205) + ($204<<2)|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207&65535;
    $209 = Math_imul($203, $208)|0;
    $210 = $0;
    $211 = (($210) + 5800|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = (($212) + ($209))|0;
    HEAP32[$211>>2] = $213;
    $214 = $bits;
    $215 = $214&65535;
    $216 = $m;
    $217 = $tree;
    $218 = (($217) + ($216<<2)|0);
    $219 = (($218) + 2|0);
    HEAP16[$219>>1] = $215;
   }
   $220 = $n;
   $221 = (($220) + -1)|0;
   $n = $221;
  }
  $222 = $bits;
  $223 = (($222) + -1)|0;
  $bits = $223;
 }
 STACKTOP = sp;return;
}
function _gen_codes($tree,$max_code,$bl_count) {
 $tree = $tree|0;
 $max_code = $max_code|0;
 $bl_count = $bl_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $code = 0, $len = 0, $n = 0, $next_code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 32|0;
 $0 = $tree;
 $1 = $max_code;
 $2 = $bl_count;
 $code = 0;
 $bits = 1;
 while(1) {
  $3 = $bits;
  $4 = ($3|0)<=(15);
  if (!($4)) {
   break;
  }
  $5 = $code;
  $6 = $5&65535;
  $7 = $bits;
  $8 = (($7) - 1)|0;
  $9 = $2;
  $10 = (($9) + ($8<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = (($6) + ($12))|0;
  $14 = $13 << 1;
  $15 = $14&65535;
  $code = $15;
  $16 = $bits;
  $17 = (($next_code) + ($16<<1)|0);
  HEAP16[$17>>1] = $15;
  $18 = $bits;
  $19 = (($18) + 1)|0;
  $bits = $19;
 }
 $n = 0;
 while(1) {
  $20 = $n;
  $21 = $1;
  $22 = ($20|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $n;
  $24 = $0;
  $25 = (($24) + ($23<<2)|0);
  $26 = (($25) + 2|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $len = $28;
  $29 = $len;
  $30 = ($29|0)==(0);
  if ($30) {
  } else {
   $31 = $len;
   $32 = (($next_code) + ($31<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = (($33) + 1)<<16>>16;
   HEAP16[$32>>1] = $34;
   $35 = $33&65535;
   $36 = $len;
   $37 = (_bi_reverse($35,$36)|0);
   $38 = $37&65535;
   $39 = $n;
   $40 = $0;
   $41 = (($40) + ($39<<2)|0);
   HEAP16[$41>>1] = $38;
  }
  $42 = $n;
  $43 = (($42) + 1)|0;
  $n = $43;
 }
 STACKTOP = sp;return;
}
function _scan_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $count = 0, $curlen = 0, $max_count = 0, $min_count = 0, $n = 0, $nextlen = 0, $prevlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $max_code;
 $prevlen = -1;
 $3 = $1;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $nextlen = $6;
 $count = 0;
 $max_count = 7;
 $min_count = 4;
 $7 = $nextlen;
 $8 = ($7|0)==(0);
 if ($8) {
  $max_count = 138;
  $min_count = 3;
 }
 $9 = $2;
 $10 = (($9) + 1)|0;
 $11 = $1;
 $12 = (($11) + ($10<<2)|0);
 $13 = (($12) + 2|0);
 HEAP16[$13>>1] = -1;
 $n = 0;
 while(1) {
  $14 = $n;
  $15 = $2;
  $16 = ($14|0)<=($15|0);
  if (!($16)) {
   break;
  }
  $17 = $nextlen;
  $curlen = $17;
  $18 = $n;
  $19 = (($18) + 1)|0;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = (($21) + 2|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $nextlen = $24;
  $25 = $count;
  $26 = (($25) + 1)|0;
  $count = $26;
  $27 = $max_count;
  $28 = ($26|0)<($27|0);
  if ($28) {
   $29 = $curlen;
   $30 = $nextlen;
   $31 = ($29|0)==($30|0);
   if ($31) {
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = $count;
   $33 = $min_count;
   $34 = ($32|0)<($33|0);
   if ($34) {
    $35 = $count;
    $36 = $curlen;
    $37 = $0;
    $38 = (($37) + 2684|0);
    $39 = (($38) + ($36<<2)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = (($41) + ($35))|0;
    $43 = $42&65535;
    HEAP16[$39>>1] = $43;
   } else {
    $44 = $curlen;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $curlen;
     $47 = $prevlen;
     $48 = ($46|0)!=($47|0);
     if ($48) {
      $49 = $curlen;
      $50 = $0;
      $51 = (($50) + 2684|0);
      $52 = (($51) + ($49<<2)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = (($53) + 1)<<16>>16;
      HEAP16[$52>>1] = $54;
     }
     $55 = $0;
     $56 = (($55) + 2684|0);
     $57 = (($56) + 64|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = (($58) + 1)<<16>>16;
     HEAP16[$57>>1] = $59;
    } else {
     $60 = $count;
     $61 = ($60|0)<=(10);
     if ($61) {
      $62 = $0;
      $63 = (($62) + 2684|0);
      $64 = (($63) + 68|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = (($65) + 1)<<16>>16;
      HEAP16[$64>>1] = $66;
     } else {
      $67 = $0;
      $68 = (($67) + 2684|0);
      $69 = (($68) + 72|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = (($70) + 1)<<16>>16;
      HEAP16[$69>>1] = $71;
     }
    }
   }
   $count = 0;
   $72 = $curlen;
   $prevlen = $72;
   $73 = $nextlen;
   $74 = ($73|0)==(0);
   if ($74) {
    $max_count = 138;
    $min_count = 3;
   } else {
    $75 = $curlen;
    $76 = $nextlen;
    $77 = ($75|0)==($76|0);
    if ($77) {
     $max_count = 6;
     $min_count = 3;
    } else {
     $max_count = 7;
     $min_count = 4;
    }
   }
  }
  $78 = $n;
  $79 = (($78) + 1)|0;
  $n = $79;
 }
 STACKTOP = sp;return;
}
function _send_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $curlen = 0, $len = 0, $len1 = 0, $len11 = 0, $len13 = 0, $len3 = 0, $len5 = 0, $len7 = 0, $len9 = 0, $max_count = 0, $min_count = 0, $n = 0, $nextlen = 0;
 var $prevlen = 0, $val = 0, $val10 = 0, $val12 = 0, $val14 = 0, $val2 = 0, $val4 = 0, $val6 = 0, $val8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $max_code;
 $prevlen = -1;
 $3 = $1;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $nextlen = $6;
 $count = 0;
 $max_count = 7;
 $min_count = 4;
 $7 = $nextlen;
 $8 = ($7|0)==(0);
 if ($8) {
  $max_count = 138;
  $min_count = 3;
 }
 $n = 0;
 while(1) {
  $9 = $n;
  $10 = $2;
  $11 = ($9|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = $nextlen;
  $curlen = $12;
  $13 = $n;
  $14 = (($13) + 1)|0;
  $15 = $1;
  $16 = (($15) + ($14<<2)|0);
  $17 = (($16) + 2|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $nextlen = $19;
  $20 = $count;
  $21 = (($20) + 1)|0;
  $count = $21;
  $22 = $max_count;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $24 = $curlen;
   $25 = $nextlen;
   $26 = ($24|0)==($25|0);
   if ($26) {
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $27 = $count;
   $28 = $min_count;
   $29 = ($27|0)<($28|0);
   if ($29) {
    while(1) {
     $30 = $curlen;
     $31 = $0;
     $32 = (($31) + 2684|0);
     $33 = (($32) + ($30<<2)|0);
     $34 = (($33) + 2|0);
     $35 = HEAP16[$34>>1]|0;
     $36 = $35&65535;
     $len = $36;
     $37 = $0;
     $38 = (($37) + 5820|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $len;
     $41 = (16 - ($40))|0;
     $42 = ($39|0)>($41|0);
     if ($42) {
      $43 = $curlen;
      $44 = $0;
      $45 = (($44) + 2684|0);
      $46 = (($45) + ($43<<2)|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = $47&65535;
      $val = $48;
      $49 = $val;
      $50 = $49&65535;
      $51 = $50&65535;
      $52 = $0;
      $53 = (($52) + 5820|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $51 << $54;
      $56 = $0;
      $57 = (($56) + 5816|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = $58&65535;
      $60 = $59 | $55;
      $61 = $60&65535;
      HEAP16[$57>>1] = $61;
      $62 = $0;
      $63 = (($62) + 5816|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = $65 & 255;
      $67 = $66&255;
      $68 = $0;
      $69 = (($68) + 20|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + 1)|0;
      HEAP32[$69>>2] = $71;
      $72 = $0;
      $73 = (($72) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($74) + ($70)|0);
      HEAP8[$75>>0] = $67;
      $76 = $0;
      $77 = (($76) + 5816|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = $78&65535;
      $80 = $79 >> 8;
      $81 = $80&255;
      $82 = $0;
      $83 = (($82) + 20|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[$83>>2] = $85;
      $86 = $0;
      $87 = (($86) + 8|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($88) + ($84)|0);
      HEAP8[$89>>0] = $81;
      $90 = $val;
      $91 = $90&65535;
      $92 = $91&65535;
      $93 = $0;
      $94 = (($93) + 5820|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (16 - ($95))|0;
      $97 = $92 >> $96;
      $98 = $97&65535;
      $99 = $0;
      $100 = (($99) + 5816|0);
      HEAP16[$100>>1] = $98;
      $101 = $len;
      $102 = (($101) - 16)|0;
      $103 = $0;
      $104 = (($103) + 5820|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102))|0;
      HEAP32[$104>>2] = $106;
     } else {
      $107 = $curlen;
      $108 = $0;
      $109 = (($108) + 2684|0);
      $110 = (($109) + ($107<<2)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111&65535;
      $113 = $0;
      $114 = (($113) + 5820|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $112 << $115;
      $117 = $0;
      $118 = (($117) + 5816|0);
      $119 = HEAP16[$118>>1]|0;
      $120 = $119&65535;
      $121 = $120 | $116;
      $122 = $121&65535;
      HEAP16[$118>>1] = $122;
      $123 = $len;
      $124 = $0;
      $125 = (($124) + 5820|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (($126) + ($123))|0;
      HEAP32[$125>>2] = $127;
     }
     $128 = $count;
     $129 = (($128) + -1)|0;
     $count = $129;
     $130 = ($129|0)!=(0);
     if (!($130)) {
      break;
     }
    }
   } else {
    $131 = $curlen;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = $curlen;
     $134 = $prevlen;
     $135 = ($133|0)!=($134|0);
     if ($135) {
      $136 = $curlen;
      $137 = $0;
      $138 = (($137) + 2684|0);
      $139 = (($138) + ($136<<2)|0);
      $140 = (($139) + 2|0);
      $141 = HEAP16[$140>>1]|0;
      $142 = $141&65535;
      $len1 = $142;
      $143 = $0;
      $144 = (($143) + 5820|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $len1;
      $147 = (16 - ($146))|0;
      $148 = ($145|0)>($147|0);
      if ($148) {
       $149 = $curlen;
       $150 = $0;
       $151 = (($150) + 2684|0);
       $152 = (($151) + ($149<<2)|0);
       $153 = HEAP16[$152>>1]|0;
       $154 = $153&65535;
       $val2 = $154;
       $155 = $val2;
       $156 = $155&65535;
       $157 = $156&65535;
       $158 = $0;
       $159 = (($158) + 5820|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = $157 << $160;
       $162 = $0;
       $163 = (($162) + 5816|0);
       $164 = HEAP16[$163>>1]|0;
       $165 = $164&65535;
       $166 = $165 | $161;
       $167 = $166&65535;
       HEAP16[$163>>1] = $167;
       $168 = $0;
       $169 = (($168) + 5816|0);
       $170 = HEAP16[$169>>1]|0;
       $171 = $170&65535;
       $172 = $171 & 255;
       $173 = $172&255;
       $174 = $0;
       $175 = (($174) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (($176) + 1)|0;
       HEAP32[$175>>2] = $177;
       $178 = $0;
       $179 = (($178) + 8|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (($180) + ($176)|0);
       HEAP8[$181>>0] = $173;
       $182 = $0;
       $183 = (($182) + 5816|0);
       $184 = HEAP16[$183>>1]|0;
       $185 = $184&65535;
       $186 = $185 >> 8;
       $187 = $186&255;
       $188 = $0;
       $189 = (($188) + 20|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = (($190) + 1)|0;
       HEAP32[$189>>2] = $191;
       $192 = $0;
       $193 = (($192) + 8|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = (($194) + ($190)|0);
       HEAP8[$195>>0] = $187;
       $196 = $val2;
       $197 = $196&65535;
       $198 = $197&65535;
       $199 = $0;
       $200 = (($199) + 5820|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = (16 - ($201))|0;
       $203 = $198 >> $202;
       $204 = $203&65535;
       $205 = $0;
       $206 = (($205) + 5816|0);
       HEAP16[$206>>1] = $204;
       $207 = $len1;
       $208 = (($207) - 16)|0;
       $209 = $0;
       $210 = (($209) + 5820|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (($211) + ($208))|0;
       HEAP32[$210>>2] = $212;
      } else {
       $213 = $curlen;
       $214 = $0;
       $215 = (($214) + 2684|0);
       $216 = (($215) + ($213<<2)|0);
       $217 = HEAP16[$216>>1]|0;
       $218 = $217&65535;
       $219 = $0;
       $220 = (($219) + 5820|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $218 << $221;
       $223 = $0;
       $224 = (($223) + 5816|0);
       $225 = HEAP16[$224>>1]|0;
       $226 = $225&65535;
       $227 = $226 | $222;
       $228 = $227&65535;
       HEAP16[$224>>1] = $228;
       $229 = $len1;
       $230 = $0;
       $231 = (($230) + 5820|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($232) + ($229))|0;
       HEAP32[$231>>2] = $233;
      }
      $234 = $count;
      $235 = (($234) + -1)|0;
      $count = $235;
     }
     $236 = $0;
     $237 = (($236) + 2684|0);
     $238 = (($237) + 64|0);
     $239 = (($238) + 2|0);
     $240 = HEAP16[$239>>1]|0;
     $241 = $240&65535;
     $len3 = $241;
     $242 = $0;
     $243 = (($242) + 5820|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = $len3;
     $246 = (16 - ($245))|0;
     $247 = ($244|0)>($246|0);
     if ($247) {
      $248 = $0;
      $249 = (($248) + 2684|0);
      $250 = (($249) + 64|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = $251&65535;
      $val4 = $252;
      $253 = $val4;
      $254 = $253&65535;
      $255 = $254&65535;
      $256 = $0;
      $257 = (($256) + 5820|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $255 << $258;
      $260 = $0;
      $261 = (($260) + 5816|0);
      $262 = HEAP16[$261>>1]|0;
      $263 = $262&65535;
      $264 = $263 | $259;
      $265 = $264&65535;
      HEAP16[$261>>1] = $265;
      $266 = $0;
      $267 = (($266) + 5816|0);
      $268 = HEAP16[$267>>1]|0;
      $269 = $268&65535;
      $270 = $269 & 255;
      $271 = $270&255;
      $272 = $0;
      $273 = (($272) + 20|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = (($274) + 1)|0;
      HEAP32[$273>>2] = $275;
      $276 = $0;
      $277 = (($276) + 8|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($278) + ($274)|0);
      HEAP8[$279>>0] = $271;
      $280 = $0;
      $281 = (($280) + 5816|0);
      $282 = HEAP16[$281>>1]|0;
      $283 = $282&65535;
      $284 = $283 >> 8;
      $285 = $284&255;
      $286 = $0;
      $287 = (($286) + 20|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($288) + 1)|0;
      HEAP32[$287>>2] = $289;
      $290 = $0;
      $291 = (($290) + 8|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = (($292) + ($288)|0);
      HEAP8[$293>>0] = $285;
      $294 = $val4;
      $295 = $294&65535;
      $296 = $295&65535;
      $297 = $0;
      $298 = (($297) + 5820|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (16 - ($299))|0;
      $301 = $296 >> $300;
      $302 = $301&65535;
      $303 = $0;
      $304 = (($303) + 5816|0);
      HEAP16[$304>>1] = $302;
      $305 = $len3;
      $306 = (($305) - 16)|0;
      $307 = $0;
      $308 = (($307) + 5820|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($309) + ($306))|0;
      HEAP32[$308>>2] = $310;
     } else {
      $311 = $0;
      $312 = (($311) + 2684|0);
      $313 = (($312) + 64|0);
      $314 = HEAP16[$313>>1]|0;
      $315 = $314&65535;
      $316 = $0;
      $317 = (($316) + 5820|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = $315 << $318;
      $320 = $0;
      $321 = (($320) + 5816|0);
      $322 = HEAP16[$321>>1]|0;
      $323 = $322&65535;
      $324 = $323 | $319;
      $325 = $324&65535;
      HEAP16[$321>>1] = $325;
      $326 = $len3;
      $327 = $0;
      $328 = (($327) + 5820|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = (($329) + ($326))|0;
      HEAP32[$328>>2] = $330;
     }
     $len5 = 2;
     $331 = $0;
     $332 = (($331) + 5820|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = $len5;
     $335 = (16 - ($334))|0;
     $336 = ($333|0)>($335|0);
     if ($336) {
      $337 = $count;
      $338 = (($337) - 3)|0;
      $val6 = $338;
      $339 = $val6;
      $340 = $339&65535;
      $341 = $340&65535;
      $342 = $0;
      $343 = (($342) + 5820|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = $341 << $344;
      $346 = $0;
      $347 = (($346) + 5816|0);
      $348 = HEAP16[$347>>1]|0;
      $349 = $348&65535;
      $350 = $349 | $345;
      $351 = $350&65535;
      HEAP16[$347>>1] = $351;
      $352 = $0;
      $353 = (($352) + 5816|0);
      $354 = HEAP16[$353>>1]|0;
      $355 = $354&65535;
      $356 = $355 & 255;
      $357 = $356&255;
      $358 = $0;
      $359 = (($358) + 20|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = (($360) + 1)|0;
      HEAP32[$359>>2] = $361;
      $362 = $0;
      $363 = (($362) + 8|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + ($360)|0);
      HEAP8[$365>>0] = $357;
      $366 = $0;
      $367 = (($366) + 5816|0);
      $368 = HEAP16[$367>>1]|0;
      $369 = $368&65535;
      $370 = $369 >> 8;
      $371 = $370&255;
      $372 = $0;
      $373 = (($372) + 20|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($374) + 1)|0;
      HEAP32[$373>>2] = $375;
      $376 = $0;
      $377 = (($376) + 8|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($378) + ($374)|0);
      HEAP8[$379>>0] = $371;
      $380 = $val6;
      $381 = $380&65535;
      $382 = $381&65535;
      $383 = $0;
      $384 = (($383) + 5820|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = (16 - ($385))|0;
      $387 = $382 >> $386;
      $388 = $387&65535;
      $389 = $0;
      $390 = (($389) + 5816|0);
      HEAP16[$390>>1] = $388;
      $391 = $len5;
      $392 = (($391) - 16)|0;
      $393 = $0;
      $394 = (($393) + 5820|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = (($395) + ($392))|0;
      HEAP32[$394>>2] = $396;
     } else {
      $397 = $count;
      $398 = (($397) - 3)|0;
      $399 = $398&65535;
      $400 = $399&65535;
      $401 = $0;
      $402 = (($401) + 5820|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = $400 << $403;
      $405 = $0;
      $406 = (($405) + 5816|0);
      $407 = HEAP16[$406>>1]|0;
      $408 = $407&65535;
      $409 = $408 | $404;
      $410 = $409&65535;
      HEAP16[$406>>1] = $410;
      $411 = $len5;
      $412 = $0;
      $413 = (($412) + 5820|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = (($414) + ($411))|0;
      HEAP32[$413>>2] = $415;
     }
    } else {
     $416 = $count;
     $417 = ($416|0)<=(10);
     if ($417) {
      $418 = $0;
      $419 = (($418) + 2684|0);
      $420 = (($419) + 68|0);
      $421 = (($420) + 2|0);
      $422 = HEAP16[$421>>1]|0;
      $423 = $422&65535;
      $len7 = $423;
      $424 = $0;
      $425 = (($424) + 5820|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = $len7;
      $428 = (16 - ($427))|0;
      $429 = ($426|0)>($428|0);
      if ($429) {
       $430 = $0;
       $431 = (($430) + 2684|0);
       $432 = (($431) + 68|0);
       $433 = HEAP16[$432>>1]|0;
       $434 = $433&65535;
       $val8 = $434;
       $435 = $val8;
       $436 = $435&65535;
       $437 = $436&65535;
       $438 = $0;
       $439 = (($438) + 5820|0);
       $440 = HEAP32[$439>>2]|0;
       $441 = $437 << $440;
       $442 = $0;
       $443 = (($442) + 5816|0);
       $444 = HEAP16[$443>>1]|0;
       $445 = $444&65535;
       $446 = $445 | $441;
       $447 = $446&65535;
       HEAP16[$443>>1] = $447;
       $448 = $0;
       $449 = (($448) + 5816|0);
       $450 = HEAP16[$449>>1]|0;
       $451 = $450&65535;
       $452 = $451 & 255;
       $453 = $452&255;
       $454 = $0;
       $455 = (($454) + 20|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = (($456) + 1)|0;
       HEAP32[$455>>2] = $457;
       $458 = $0;
       $459 = (($458) + 8|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = (($460) + ($456)|0);
       HEAP8[$461>>0] = $453;
       $462 = $0;
       $463 = (($462) + 5816|0);
       $464 = HEAP16[$463>>1]|0;
       $465 = $464&65535;
       $466 = $465 >> 8;
       $467 = $466&255;
       $468 = $0;
       $469 = (($468) + 20|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = (($470) + 1)|0;
       HEAP32[$469>>2] = $471;
       $472 = $0;
       $473 = (($472) + 8|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($474) + ($470)|0);
       HEAP8[$475>>0] = $467;
       $476 = $val8;
       $477 = $476&65535;
       $478 = $477&65535;
       $479 = $0;
       $480 = (($479) + 5820|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (16 - ($481))|0;
       $483 = $478 >> $482;
       $484 = $483&65535;
       $485 = $0;
       $486 = (($485) + 5816|0);
       HEAP16[$486>>1] = $484;
       $487 = $len7;
       $488 = (($487) - 16)|0;
       $489 = $0;
       $490 = (($489) + 5820|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($491) + ($488))|0;
       HEAP32[$490>>2] = $492;
      } else {
       $493 = $0;
       $494 = (($493) + 2684|0);
       $495 = (($494) + 68|0);
       $496 = HEAP16[$495>>1]|0;
       $497 = $496&65535;
       $498 = $0;
       $499 = (($498) + 5820|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = $497 << $500;
       $502 = $0;
       $503 = (($502) + 5816|0);
       $504 = HEAP16[$503>>1]|0;
       $505 = $504&65535;
       $506 = $505 | $501;
       $507 = $506&65535;
       HEAP16[$503>>1] = $507;
       $508 = $len7;
       $509 = $0;
       $510 = (($509) + 5820|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511) + ($508))|0;
       HEAP32[$510>>2] = $512;
      }
      $len9 = 3;
      $513 = $0;
      $514 = (($513) + 5820|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = $len9;
      $517 = (16 - ($516))|0;
      $518 = ($515|0)>($517|0);
      if ($518) {
       $519 = $count;
       $520 = (($519) - 3)|0;
       $val10 = $520;
       $521 = $val10;
       $522 = $521&65535;
       $523 = $522&65535;
       $524 = $0;
       $525 = (($524) + 5820|0);
       $526 = HEAP32[$525>>2]|0;
       $527 = $523 << $526;
       $528 = $0;
       $529 = (($528) + 5816|0);
       $530 = HEAP16[$529>>1]|0;
       $531 = $530&65535;
       $532 = $531 | $527;
       $533 = $532&65535;
       HEAP16[$529>>1] = $533;
       $534 = $0;
       $535 = (($534) + 5816|0);
       $536 = HEAP16[$535>>1]|0;
       $537 = $536&65535;
       $538 = $537 & 255;
       $539 = $538&255;
       $540 = $0;
       $541 = (($540) + 20|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($542) + 1)|0;
       HEAP32[$541>>2] = $543;
       $544 = $0;
       $545 = (($544) + 8|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($546) + ($542)|0);
       HEAP8[$547>>0] = $539;
       $548 = $0;
       $549 = (($548) + 5816|0);
       $550 = HEAP16[$549>>1]|0;
       $551 = $550&65535;
       $552 = $551 >> 8;
       $553 = $552&255;
       $554 = $0;
       $555 = (($554) + 20|0);
       $556 = HEAP32[$555>>2]|0;
       $557 = (($556) + 1)|0;
       HEAP32[$555>>2] = $557;
       $558 = $0;
       $559 = (($558) + 8|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($560) + ($556)|0);
       HEAP8[$561>>0] = $553;
       $562 = $val10;
       $563 = $562&65535;
       $564 = $563&65535;
       $565 = $0;
       $566 = (($565) + 5820|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (16 - ($567))|0;
       $569 = $564 >> $568;
       $570 = $569&65535;
       $571 = $0;
       $572 = (($571) + 5816|0);
       HEAP16[$572>>1] = $570;
       $573 = $len9;
       $574 = (($573) - 16)|0;
       $575 = $0;
       $576 = (($575) + 5820|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = (($577) + ($574))|0;
       HEAP32[$576>>2] = $578;
      } else {
       $579 = $count;
       $580 = (($579) - 3)|0;
       $581 = $580&65535;
       $582 = $581&65535;
       $583 = $0;
       $584 = (($583) + 5820|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = $582 << $585;
       $587 = $0;
       $588 = (($587) + 5816|0);
       $589 = HEAP16[$588>>1]|0;
       $590 = $589&65535;
       $591 = $590 | $586;
       $592 = $591&65535;
       HEAP16[$588>>1] = $592;
       $593 = $len9;
       $594 = $0;
       $595 = (($594) + 5820|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = (($596) + ($593))|0;
       HEAP32[$595>>2] = $597;
      }
     } else {
      $598 = $0;
      $599 = (($598) + 2684|0);
      $600 = (($599) + 72|0);
      $601 = (($600) + 2|0);
      $602 = HEAP16[$601>>1]|0;
      $603 = $602&65535;
      $len11 = $603;
      $604 = $0;
      $605 = (($604) + 5820|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = $len11;
      $608 = (16 - ($607))|0;
      $609 = ($606|0)>($608|0);
      if ($609) {
       $610 = $0;
       $611 = (($610) + 2684|0);
       $612 = (($611) + 72|0);
       $613 = HEAP16[$612>>1]|0;
       $614 = $613&65535;
       $val12 = $614;
       $615 = $val12;
       $616 = $615&65535;
       $617 = $616&65535;
       $618 = $0;
       $619 = (($618) + 5820|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = $617 << $620;
       $622 = $0;
       $623 = (($622) + 5816|0);
       $624 = HEAP16[$623>>1]|0;
       $625 = $624&65535;
       $626 = $625 | $621;
       $627 = $626&65535;
       HEAP16[$623>>1] = $627;
       $628 = $0;
       $629 = (($628) + 5816|0);
       $630 = HEAP16[$629>>1]|0;
       $631 = $630&65535;
       $632 = $631 & 255;
       $633 = $632&255;
       $634 = $0;
       $635 = (($634) + 20|0);
       $636 = HEAP32[$635>>2]|0;
       $637 = (($636) + 1)|0;
       HEAP32[$635>>2] = $637;
       $638 = $0;
       $639 = (($638) + 8|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($640) + ($636)|0);
       HEAP8[$641>>0] = $633;
       $642 = $0;
       $643 = (($642) + 5816|0);
       $644 = HEAP16[$643>>1]|0;
       $645 = $644&65535;
       $646 = $645 >> 8;
       $647 = $646&255;
       $648 = $0;
       $649 = (($648) + 20|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = (($650) + 1)|0;
       HEAP32[$649>>2] = $651;
       $652 = $0;
       $653 = (($652) + 8|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = (($654) + ($650)|0);
       HEAP8[$655>>0] = $647;
       $656 = $val12;
       $657 = $656&65535;
       $658 = $657&65535;
       $659 = $0;
       $660 = (($659) + 5820|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = (16 - ($661))|0;
       $663 = $658 >> $662;
       $664 = $663&65535;
       $665 = $0;
       $666 = (($665) + 5816|0);
       HEAP16[$666>>1] = $664;
       $667 = $len11;
       $668 = (($667) - 16)|0;
       $669 = $0;
       $670 = (($669) + 5820|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = (($671) + ($668))|0;
       HEAP32[$670>>2] = $672;
      } else {
       $673 = $0;
       $674 = (($673) + 2684|0);
       $675 = (($674) + 72|0);
       $676 = HEAP16[$675>>1]|0;
       $677 = $676&65535;
       $678 = $0;
       $679 = (($678) + 5820|0);
       $680 = HEAP32[$679>>2]|0;
       $681 = $677 << $680;
       $682 = $0;
       $683 = (($682) + 5816|0);
       $684 = HEAP16[$683>>1]|0;
       $685 = $684&65535;
       $686 = $685 | $681;
       $687 = $686&65535;
       HEAP16[$683>>1] = $687;
       $688 = $len11;
       $689 = $0;
       $690 = (($689) + 5820|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = (($691) + ($688))|0;
       HEAP32[$690>>2] = $692;
      }
      $len13 = 7;
      $693 = $0;
      $694 = (($693) + 5820|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = $len13;
      $697 = (16 - ($696))|0;
      $698 = ($695|0)>($697|0);
      if ($698) {
       $699 = $count;
       $700 = (($699) - 11)|0;
       $val14 = $700;
       $701 = $val14;
       $702 = $701&65535;
       $703 = $702&65535;
       $704 = $0;
       $705 = (($704) + 5820|0);
       $706 = HEAP32[$705>>2]|0;
       $707 = $703 << $706;
       $708 = $0;
       $709 = (($708) + 5816|0);
       $710 = HEAP16[$709>>1]|0;
       $711 = $710&65535;
       $712 = $711 | $707;
       $713 = $712&65535;
       HEAP16[$709>>1] = $713;
       $714 = $0;
       $715 = (($714) + 5816|0);
       $716 = HEAP16[$715>>1]|0;
       $717 = $716&65535;
       $718 = $717 & 255;
       $719 = $718&255;
       $720 = $0;
       $721 = (($720) + 20|0);
       $722 = HEAP32[$721>>2]|0;
       $723 = (($722) + 1)|0;
       HEAP32[$721>>2] = $723;
       $724 = $0;
       $725 = (($724) + 8|0);
       $726 = HEAP32[$725>>2]|0;
       $727 = (($726) + ($722)|0);
       HEAP8[$727>>0] = $719;
       $728 = $0;
       $729 = (($728) + 5816|0);
       $730 = HEAP16[$729>>1]|0;
       $731 = $730&65535;
       $732 = $731 >> 8;
       $733 = $732&255;
       $734 = $0;
       $735 = (($734) + 20|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = (($736) + 1)|0;
       HEAP32[$735>>2] = $737;
       $738 = $0;
       $739 = (($738) + 8|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = (($740) + ($736)|0);
       HEAP8[$741>>0] = $733;
       $742 = $val14;
       $743 = $742&65535;
       $744 = $743&65535;
       $745 = $0;
       $746 = (($745) + 5820|0);
       $747 = HEAP32[$746>>2]|0;
       $748 = (16 - ($747))|0;
       $749 = $744 >> $748;
       $750 = $749&65535;
       $751 = $0;
       $752 = (($751) + 5816|0);
       HEAP16[$752>>1] = $750;
       $753 = $len13;
       $754 = (($753) - 16)|0;
       $755 = $0;
       $756 = (($755) + 5820|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = (($757) + ($754))|0;
       HEAP32[$756>>2] = $758;
      } else {
       $759 = $count;
       $760 = (($759) - 11)|0;
       $761 = $760&65535;
       $762 = $761&65535;
       $763 = $0;
       $764 = (($763) + 5820|0);
       $765 = HEAP32[$764>>2]|0;
       $766 = $762 << $765;
       $767 = $0;
       $768 = (($767) + 5816|0);
       $769 = HEAP16[$768>>1]|0;
       $770 = $769&65535;
       $771 = $770 | $766;
       $772 = $771&65535;
       HEAP16[$768>>1] = $772;
       $773 = $len13;
       $774 = $0;
       $775 = (($774) + 5820|0);
       $776 = HEAP32[$775>>2]|0;
       $777 = (($776) + ($773))|0;
       HEAP32[$775>>2] = $777;
      }
     }
    }
   }
   $count = 0;
   $778 = $curlen;
   $prevlen = $778;
   $779 = $nextlen;
   $780 = ($779|0)==(0);
   if ($780) {
    $max_count = 138;
    $min_count = 3;
   } else {
    $781 = $curlen;
    $782 = $nextlen;
    $783 = ($781|0)==($782|0);
    if ($783) {
     $max_count = 6;
     $min_count = 3;
    } else {
     $max_count = 7;
     $min_count = 4;
    }
   }
  }
  $784 = $n;
  $785 = (($784) + 1)|0;
  $n = $785;
 }
 STACKTOP = sp;return;
}
function _bi_reverse($code,$len) {
 $code = $code|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $len;
 $res = 0;
 while(1) {
  $2 = $0;
  $3 = $2 & 1;
  $4 = $res;
  $5 = $4 | $3;
  $res = $5;
  $6 = $0;
  $7 = $6 >>> 1;
  $0 = $7;
  $8 = $res;
  $9 = $8 << 1;
  $res = $9;
  $10 = $1;
  $11 = (($10) + -1)|0;
  $1 = $11;
  $12 = ($11|0)>(0);
  if (!($12)) {
   break;
  }
 }
 $13 = $res;
 $14 = $13 >>> 1;
 STACKTOP = sp;return ($14|0);
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $items;
 $2 = $size;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $2;
  $7 = (($5) - ($6))|0;
  $8 = $1;
  $9 = (($8) + ($7))|0;
  $1 = $9;
 }
 $10 = $1;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $13 = (_malloc($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $ptr;
 $2 = $1;
 _free($2);
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
 }
 STACKTOP = sp;return;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $sum2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $adler;
 $2 = $buf;
 $3 = $len;
 $4 = $1;
 $5 = $4 >>> 16;
 $6 = $5 & 65535;
 $sum2 = $6;
 $7 = $1;
 $8 = $7 & 65535;
 $1 = $8;
 $9 = $3;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $1;
  $15 = (($14) + ($13))|0;
  $1 = $15;
  $16 = $1;
  $17 = ($16>>>0)>=(65521);
  if ($17) {
   $18 = $1;
   $19 = (($18) - 65521)|0;
   $1 = $19;
  }
  $20 = $1;
  $21 = $sum2;
  $22 = (($21) + ($20))|0;
  $sum2 = $22;
  $23 = $sum2;
  $24 = ($23>>>0)>=(65521);
  if ($24) {
   $25 = $sum2;
   $26 = (($25) - 65521)|0;
   $sum2 = $26;
  }
  $27 = $1;
  $28 = $sum2;
  $29 = $28 << 16;
  $30 = $27 | $29;
  $0 = $30;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $31 = $2;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $0 = 1;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $33 = $3;
 $34 = ($33>>>0)<(16);
 if ($34) {
  while(1) {
   $35 = $3;
   $36 = (($35) + -1)|0;
   $3 = $36;
   $37 = ($35|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $2;
   $39 = (($38) + 1|0);
   $2 = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40&255;
   $42 = $1;
   $43 = (($42) + ($41))|0;
   $1 = $43;
   $44 = $1;
   $45 = $sum2;
   $46 = (($45) + ($44))|0;
   $sum2 = $46;
  }
  $47 = $1;
  $48 = ($47>>>0)>=(65521);
  if ($48) {
   $49 = $1;
   $50 = (($49) - 65521)|0;
   $1 = $50;
  }
  $51 = $sum2;
  $52 = (($51>>>0) % 65521)&-1;
  $sum2 = $52;
  $53 = $1;
  $54 = $sum2;
  $55 = $54 << 16;
  $56 = $53 | $55;
  $0 = $56;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 while(1) {
  $57 = $3;
  $58 = ($57>>>0)>=(5552);
  if (!($58)) {
   break;
  }
  $59 = $3;
  $60 = (($59) - 5552)|0;
  $3 = $60;
  $n = 347;
  while(1) {
   $61 = $2;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $1;
   $65 = (($64) + ($63))|0;
   $1 = $65;
   $66 = $1;
   $67 = $sum2;
   $68 = (($67) + ($66))|0;
   $sum2 = $68;
   $69 = $2;
   $70 = (($69) + 1|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $1;
   $74 = (($73) + ($72))|0;
   $1 = $74;
   $75 = $1;
   $76 = $sum2;
   $77 = (($76) + ($75))|0;
   $sum2 = $77;
   $78 = $2;
   $79 = (($78) + 2|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $1;
   $83 = (($82) + ($81))|0;
   $1 = $83;
   $84 = $1;
   $85 = $sum2;
   $86 = (($85) + ($84))|0;
   $sum2 = $86;
   $87 = $2;
   $88 = (($87) + 3|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = $1;
   $92 = (($91) + ($90))|0;
   $1 = $92;
   $93 = $1;
   $94 = $sum2;
   $95 = (($94) + ($93))|0;
   $sum2 = $95;
   $96 = $2;
   $97 = (($96) + 4|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = $1;
   $101 = (($100) + ($99))|0;
   $1 = $101;
   $102 = $1;
   $103 = $sum2;
   $104 = (($103) + ($102))|0;
   $sum2 = $104;
   $105 = $2;
   $106 = (($105) + 5|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = $1;
   $110 = (($109) + ($108))|0;
   $1 = $110;
   $111 = $1;
   $112 = $sum2;
   $113 = (($112) + ($111))|0;
   $sum2 = $113;
   $114 = $2;
   $115 = (($114) + 6|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = $1;
   $119 = (($118) + ($117))|0;
   $1 = $119;
   $120 = $1;
   $121 = $sum2;
   $122 = (($121) + ($120))|0;
   $sum2 = $122;
   $123 = $2;
   $124 = (($123) + 7|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = $1;
   $128 = (($127) + ($126))|0;
   $1 = $128;
   $129 = $1;
   $130 = $sum2;
   $131 = (($130) + ($129))|0;
   $sum2 = $131;
   $132 = $2;
   $133 = (($132) + 8|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = $1;
   $137 = (($136) + ($135))|0;
   $1 = $137;
   $138 = $1;
   $139 = $sum2;
   $140 = (($139) + ($138))|0;
   $sum2 = $140;
   $141 = $2;
   $142 = (($141) + 9|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $1;
   $146 = (($145) + ($144))|0;
   $1 = $146;
   $147 = $1;
   $148 = $sum2;
   $149 = (($148) + ($147))|0;
   $sum2 = $149;
   $150 = $2;
   $151 = (($150) + 10|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = $1;
   $155 = (($154) + ($153))|0;
   $1 = $155;
   $156 = $1;
   $157 = $sum2;
   $158 = (($157) + ($156))|0;
   $sum2 = $158;
   $159 = $2;
   $160 = (($159) + 11|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = $1;
   $164 = (($163) + ($162))|0;
   $1 = $164;
   $165 = $1;
   $166 = $sum2;
   $167 = (($166) + ($165))|0;
   $sum2 = $167;
   $168 = $2;
   $169 = (($168) + 12|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $1;
   $173 = (($172) + ($171))|0;
   $1 = $173;
   $174 = $1;
   $175 = $sum2;
   $176 = (($175) + ($174))|0;
   $sum2 = $176;
   $177 = $2;
   $178 = (($177) + 13|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $1;
   $182 = (($181) + ($180))|0;
   $1 = $182;
   $183 = $1;
   $184 = $sum2;
   $185 = (($184) + ($183))|0;
   $sum2 = $185;
   $186 = $2;
   $187 = (($186) + 14|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = $1;
   $191 = (($190) + ($189))|0;
   $1 = $191;
   $192 = $1;
   $193 = $sum2;
   $194 = (($193) + ($192))|0;
   $sum2 = $194;
   $195 = $2;
   $196 = (($195) + 15|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = $1;
   $200 = (($199) + ($198))|0;
   $1 = $200;
   $201 = $1;
   $202 = $sum2;
   $203 = (($202) + ($201))|0;
   $sum2 = $203;
   $204 = $2;
   $205 = (($204) + 16|0);
   $2 = $205;
   $206 = $n;
   $207 = (($206) + -1)|0;
   $n = $207;
   $208 = ($207|0)!=(0);
   if (!($208)) {
    break;
   }
  }
  $209 = $1;
  $210 = (($209>>>0) % 65521)&-1;
  $1 = $210;
  $211 = $sum2;
  $212 = (($211>>>0) % 65521)&-1;
  $sum2 = $212;
 }
 $213 = $3;
 $214 = ($213|0)!=(0);
 if ($214) {
  while(1) {
   $215 = $3;
   $216 = ($215>>>0)>=(16);
   if (!($216)) {
    break;
   }
   $217 = $3;
   $218 = (($217) - 16)|0;
   $3 = $218;
   $219 = $2;
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = $1;
   $223 = (($222) + ($221))|0;
   $1 = $223;
   $224 = $1;
   $225 = $sum2;
   $226 = (($225) + ($224))|0;
   $sum2 = $226;
   $227 = $2;
   $228 = (($227) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = $1;
   $232 = (($231) + ($230))|0;
   $1 = $232;
   $233 = $1;
   $234 = $sum2;
   $235 = (($234) + ($233))|0;
   $sum2 = $235;
   $236 = $2;
   $237 = (($236) + 2|0);
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $1;
   $241 = (($240) + ($239))|0;
   $1 = $241;
   $242 = $1;
   $243 = $sum2;
   $244 = (($243) + ($242))|0;
   $sum2 = $244;
   $245 = $2;
   $246 = (($245) + 3|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $247&255;
   $249 = $1;
   $250 = (($249) + ($248))|0;
   $1 = $250;
   $251 = $1;
   $252 = $sum2;
   $253 = (($252) + ($251))|0;
   $sum2 = $253;
   $254 = $2;
   $255 = (($254) + 4|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = $1;
   $259 = (($258) + ($257))|0;
   $1 = $259;
   $260 = $1;
   $261 = $sum2;
   $262 = (($261) + ($260))|0;
   $sum2 = $262;
   $263 = $2;
   $264 = (($263) + 5|0);
   $265 = HEAP8[$264>>0]|0;
   $266 = $265&255;
   $267 = $1;
   $268 = (($267) + ($266))|0;
   $1 = $268;
   $269 = $1;
   $270 = $sum2;
   $271 = (($270) + ($269))|0;
   $sum2 = $271;
   $272 = $2;
   $273 = (($272) + 6|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $1;
   $277 = (($276) + ($275))|0;
   $1 = $277;
   $278 = $1;
   $279 = $sum2;
   $280 = (($279) + ($278))|0;
   $sum2 = $280;
   $281 = $2;
   $282 = (($281) + 7|0);
   $283 = HEAP8[$282>>0]|0;
   $284 = $283&255;
   $285 = $1;
   $286 = (($285) + ($284))|0;
   $1 = $286;
   $287 = $1;
   $288 = $sum2;
   $289 = (($288) + ($287))|0;
   $sum2 = $289;
   $290 = $2;
   $291 = (($290) + 8|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = $292&255;
   $294 = $1;
   $295 = (($294) + ($293))|0;
   $1 = $295;
   $296 = $1;
   $297 = $sum2;
   $298 = (($297) + ($296))|0;
   $sum2 = $298;
   $299 = $2;
   $300 = (($299) + 9|0);
   $301 = HEAP8[$300>>0]|0;
   $302 = $301&255;
   $303 = $1;
   $304 = (($303) + ($302))|0;
   $1 = $304;
   $305 = $1;
   $306 = $sum2;
   $307 = (($306) + ($305))|0;
   $sum2 = $307;
   $308 = $2;
   $309 = (($308) + 10|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310&255;
   $312 = $1;
   $313 = (($312) + ($311))|0;
   $1 = $313;
   $314 = $1;
   $315 = $sum2;
   $316 = (($315) + ($314))|0;
   $sum2 = $316;
   $317 = $2;
   $318 = (($317) + 11|0);
   $319 = HEAP8[$318>>0]|0;
   $320 = $319&255;
   $321 = $1;
   $322 = (($321) + ($320))|0;
   $1 = $322;
   $323 = $1;
   $324 = $sum2;
   $325 = (($324) + ($323))|0;
   $sum2 = $325;
   $326 = $2;
   $327 = (($326) + 12|0);
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = $1;
   $331 = (($330) + ($329))|0;
   $1 = $331;
   $332 = $1;
   $333 = $sum2;
   $334 = (($333) + ($332))|0;
   $sum2 = $334;
   $335 = $2;
   $336 = (($335) + 13|0);
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   $339 = $1;
   $340 = (($339) + ($338))|0;
   $1 = $340;
   $341 = $1;
   $342 = $sum2;
   $343 = (($342) + ($341))|0;
   $sum2 = $343;
   $344 = $2;
   $345 = (($344) + 14|0);
   $346 = HEAP8[$345>>0]|0;
   $347 = $346&255;
   $348 = $1;
   $349 = (($348) + ($347))|0;
   $1 = $349;
   $350 = $1;
   $351 = $sum2;
   $352 = (($351) + ($350))|0;
   $sum2 = $352;
   $353 = $2;
   $354 = (($353) + 15|0);
   $355 = HEAP8[$354>>0]|0;
   $356 = $355&255;
   $357 = $1;
   $358 = (($357) + ($356))|0;
   $1 = $358;
   $359 = $1;
   $360 = $sum2;
   $361 = (($360) + ($359))|0;
   $sum2 = $361;
   $362 = $2;
   $363 = (($362) + 16|0);
   $2 = $363;
  }
  while(1) {
   $364 = $3;
   $365 = (($364) + -1)|0;
   $3 = $365;
   $366 = ($364|0)!=(0);
   if (!($366)) {
    break;
   }
   $367 = $2;
   $368 = (($367) + 1|0);
   $2 = $368;
   $369 = HEAP8[$367>>0]|0;
   $370 = $369&255;
   $371 = $1;
   $372 = (($371) + ($370))|0;
   $1 = $372;
   $373 = $1;
   $374 = $sum2;
   $375 = (($374) + ($373))|0;
   $sum2 = $375;
  }
  $376 = $1;
  $377 = (($376>>>0) % 65521)&-1;
  $1 = $377;
  $378 = $sum2;
  $379 = (($378>>>0) % 65521)&-1;
  $sum2 = $379;
 }
 $380 = $1;
 $381 = $sum2;
 $382 = $381 << 16;
 $383 = $380 | $382;
 $0 = $383;
 $384 = $0;
 STACKTOP = sp;return ($384|0);
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$0$lcssa$ph = 0, $i$04 = 0, $k$0 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[27648>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[27664>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[27664>>2] = 0;
  HEAP32[27672>>2] = 0;
  HEAP32[27648>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($7) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 if ((($12<<24>>24) == 45)) {
  label = 7;
 } else if ((($12<<24>>24) == 0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 7) {
  $13 = (($7) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $16 = (($4) + 1)|0;
   HEAP32[27648>>2] = $16;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = HEAP32[27672>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[27672>>2] = 1;
  $20 = 1;
 } else {
  $20 = $17;
 }
 $19 = (($7) + ($20)|0);
 $21 = (_mbtowc($c,$19,4)|0);
 $22 = ($21|0)<(0);
 if ($22) {
  HEAP32[$c>>2] = 65533;
  $28 = 65533;$k$0 = 1;
 } else {
  $$pre = HEAP32[$c>>2]|0;
  $28 = $$pre;$k$0 = $21;
 }
 $23 = HEAP32[27648>>2]|0;
 $24 = (($argv) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[27672>>2]|0;
 $27 = (($25) + ($26)|0);
 HEAP32[27680>>2] = $28;
 $29 = (($26) + ($k$0))|0;
 HEAP32[27672>>2] = $29;
 $30 = (($25) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = (($23) + 1)|0;
  HEAP32[27648>>2] = $33;
  HEAP32[27672>>2] = 0;
 }
 $34 = (_mbtowc($d,$optstring,4)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  $i$0$lcssa = 0;
 } else {
  $39 = $34;$i$04 = 0;
  while(1) {
   $36 = HEAP32[$d>>2]|0;
   $37 = HEAP32[$c>>2]|0;
   $38 = ($36|0)==($37|0);
   if ($38) {
    $i$0$lcssa$ph = $i$04;
    break;
   }
   $40 = ($39|0)<(1);
   $41 = $40 ? 1 : $39;
   $42 = (($41) + ($i$04))|0;
   $43 = (($optstring) + ($42)|0);
   $44 = (_mbtowc($d,$43,4)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $i$0$lcssa$ph = $42;
    break;
   } else {
    $39 = $44;$i$04 = $42;
   }
  }
  $i$0$lcssa = $i$0$lcssa$ph;
 }
 $46 = HEAP32[$d>>2]|0;
 $47 = HEAP32[$c>>2]|0;
 $48 = ($46|0)==($47|0);
 if (!($48)) {
  $49 = HEAP8[$optstring>>0]|0;
  $50 = ($49<<24>>24)!=(58);
  $51 = HEAP32[27656>>2]|0;
  $52 = ($51|0)!=(0);
  $or$cond3 = $50 & $52;
  if (!($or$cond3)) {
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = HEAP32[$argv>>2]|0;
  $54 = (_strlen(($53|0))|0);
  (_write(2,($53|0),($54|0))|0);
  (_write(2,(27688|0),18)|0);
  (_write(2,($27|0),($k$0|0))|0);
  (_write(2,(27712|0),1)|0);
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = (($i$0$lcssa) + 1)|0;
 $56 = (($optstring) + ($55)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)==(58);
 if (!($58)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[27648>>2]|0;
 $60 = ($59|0)<($argc|0);
 if ($60) {
  $67 = (($59) + 1)|0;
  HEAP32[27648>>2] = $67;
  $68 = (($argv) + ($59<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[27672>>2]|0;
  $71 = (($69) + ($70)|0);
  HEAP32[27752>>2] = $71;
  HEAP32[27672>>2] = 0;
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP8[$optstring>>0]|0;
 $62 = ($61<<24>>24)==(58);
 if ($62) {
  $$0 = 58;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[27656>>2]|0;
 $64 = ($63|0)==(0);
 if ($64) {
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = HEAP32[$argv>>2]|0;
 $66 = (_strlen(($65|0))|0);
 (_write(2,($65|0),($66|0))|0);
 (_write(2,(27720|0),31)|0);
 (_write(2,($27|0),($k$0|0))|0);
 (_write(2,(27712|0),1)|0);
 $$0 = 63;
 STACKTOP = sp;return ($$0|0);
}
function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
 return ($0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa16 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 27968 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (27760 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     }
     $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa16 = $35;
       label = 15;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $$lcssa14 = $34;
       label = 18;
       break;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 15) {
      HEAP32[$$st>>2] = 0;
      HEAP32[$11>>2] = $$lcssa;
      $37 = (($n) - ($$lcssa16))|0;
      $$0 = $37;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 18) {
      $c$2 = $$lcssa14;
      break;
     }
     else if ((label|0) == 20) {
      break L1;
     }
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (27760 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa231 = 0, $$lcssa232 = 0, $$lcssa233 = 0, $$lcssa234 = 0, $$lcssa280 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi219Z2D = 0, $$pre205 = 0, $$pre207 = 0, $$pre211 = 0;
 var $$pre213 = 0, $$pre214 = 0, $$pre216 = 0, $$pre217 = 0, $$pre218 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0$lcssa = 0, $alloc$0$lcssa295 = 0, $alloc$0$lcssa296 = 0, $alloc$0$lcssa297 = 0;
 var $alloc$0$lcssa299 = 0, $alloc$0$lcssa300 = 0, $alloc$0$lcssa301 = 0, $alloc$0200 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph$lcssa247 = 0;
 var $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$lcssa250 = 0, $i$0$ph21$us106 = 0, $i$0$ph21$us106$lcssa = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$lcssa = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$3$lcssa = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111$lcssa252 = 0, $matches$0111$lcssa253 = 0, $matches$0111$lcssa254 = 0, $matches$0111$lcssa255 = 0, $matches$0111$lcssa256 = 0, $matches$0111$lcssa257 = 0, $matches$0111$lcssa258 = 0, $matches$0111$lcssa259 = 0, $matches$0111261 = 0, $matches$1 = 0, $matches$1$lcssa = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$lcssa = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0;
 var $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0, $s$1 = 0, $s$1$lcssa282 = 0, $s$2$ph = 0, $s$2$ph$lcssa = 0, $s$2$ph$lcssa237 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$6$ph = 0, $s$7 = 0, $s$8 = 0, $s$8$ph = 0, $scanset = 0, $size$0 = 0, $st = 0;
 var $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$1$lcssa289 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph$lcssa$lcssa = 0, $wcs$3$ph$lcssa240 = 0, $wcs$3$ph$lcssa241 = 0, $wcs$3$ph$lcssa244 = 0, $wcs$3$ph141 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$7$ph = 0, $wcs$8 = 0;
 var $wcs$9 = 0, $wcs$9$ph = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L22: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L22;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            $$lcssa = $72;
            break;
           }
          }
          $74 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp695 = (($77) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $81 = $77;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $78 = ($width$098*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$397) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$397 = $82;$width$098 = $80;
        } else {
         $$lcssa231 = $80;$$lcssa232 = $82;$$lcssa233 = $83;
         break;
        }
       }
       $$lcssa39 = $$lcssa233;$p$3$lcssa = $$lcssa232;$width$0$lcssa = $$lcssa231;
      } else {
       $$lcssa39 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa39<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      default: {
       $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
       label = 188;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0116|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $107 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0116;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre205 = HEAP32[$3>>2]|0;
       if ($124) {
        $128 = $$pre205;
       } else {
        $125 = (($$pre205) + -1|0);
        HEAP32[$3>>2] = $125;
        $128 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $129 = $128;
       $130 = $127;
       $131 = (($126) + ($pos$0116))|0;
       $132 = (($131) + ($129))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $140 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
        label = 188;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $140 = $$pre207;
      }
      $141 = ($140|0)==(0|0);
      if (!($141)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L81: do {
       switch ($$|0) {
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $325 = (+___floatscan($f,$$size$0,0));
        $326 = HEAP32[$5>>2]|0;
        $327 = HEAP32[$3>>2]|0;
        $328 = HEAP32[$6>>2]|0;
        $329 = $327;
        $330 = $328;
        $331 = (($330) - ($329))|0;
        $332 = ($326|0)==($331|0);
        if ($332) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $333 = ($dest$0|0)==(0|0);
        if ($333) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $334 = $325;
          HEAPF32[$dest$0>>2] = $334;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        if ($146) {
         $147 = ($$|0)==(115);
         _memset(($scanset|0),-1,257)|0;
         HEAP8[$scanset>>0] = 0;
         if ($147) {
          HEAP8[$8>>0] = 0;
          ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
          $p$9 = $p$5;
         } else {
          $p$9 = $p$5;
         }
        } else {
         $148 = (($p$5) + 1|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = ($149<<24>>24)==(94);
         $151 = (($p$5) + 2|0);
         $invert$0 = $150&1;
         $152 = $150 ? $148 : $p$5;
         $p$6 = $150 ? $151 : $148;
         $153 = $150&1;
         _memset(($scanset|0),($153|0),257)|0;
         HEAP8[$scanset>>0] = 0;
         $154 = HEAP8[$p$6>>0]|0;
         if ((($154<<24>>24) == 93)) {
          $158 = (($152) + 2|0);
          $159 = $invert$0 ^ 1;
          $160 = $159&255;
          HEAP8[$11>>0] = $160;
          $$pre$phi219Z2D = $160;$p$7$ph = $158;
         } else if ((($154<<24>>24) == 45)) {
          $155 = (($152) + 2|0);
          $156 = $invert$0 ^ 1;
          $157 = $156&255;
          HEAP8[$10>>0] = $157;
          $$pre$phi219Z2D = $157;$p$7$ph = $155;
         } else {
          $$pre217 = $invert$0 ^ 1;
          $$pre218 = $$pre217&255;
          $$pre$phi219Z2D = $$pre218;$p$7$ph = $p$6;
         }
         $p$7 = $p$7$ph;
         while(1) {
          $161 = HEAP8[$p$7>>0]|0;
          if ((($161<<24>>24) == 45)) {
           $162 = (($p$7) + 1|0);
           $163 = HEAP8[$162>>0]|0;
           if ((($163<<24>>24) == 93) | (($163<<24>>24) == 0)) {
            $174 = 45;$p$8 = $p$7;
           } else {
            $164 = (($p$7) + -1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165&255)<($163&255);
            if ($166) {
             $167 = $165&255;
             $c$0101 = $167;
             while(1) {
              $168 = (($c$0101) + 1)|0;
              $169 = (($scanset) + ($168)|0);
              HEAP8[$169>>0] = $$pre$phi219Z2D;
              $170 = HEAP8[$162>>0]|0;
              $171 = $170&255;
              $172 = ($168|0)<($171|0);
              if ($172) {
               $c$0101 = $168;
              } else {
               $$lcssa234 = $170;
               break;
              }
             }
             $174 = $$lcssa234;$p$8 = $162;
            } else {
             $174 = $163;$p$8 = $162;
            }
           }
          } else if ((($161<<24>>24) == 93)) {
           $p$7$lcssa = $p$7;
           break;
          } else if ((($161<<24>>24) == 0)) {
           $alloc$0$lcssa296 = $alloc$0;$matches$0111$lcssa254 = $matches$0111;$s$1$lcssa282 = $s$1;$wcs$1$lcssa289 = $wcs$1;
           label = 187;
           break L4;
          } else {
           $174 = $161;$p$8 = $p$7;
          }
          $173 = $174&255;
          $175 = (($173) + 1)|0;
          $176 = (($scanset) + ($175)|0);
          HEAP8[$176>>0] = $$pre$phi219Z2D;
          $177 = (($p$8) + 1|0);
          $p$7 = $177;
         }
         $p$9 = $p$7$lcssa;
        }
        $178 = (($width$1) + 1)|0;
        $$8 = $144 ? $178 : 31;
        $179 = ($$size$0|0)==(1);
        $180 = ($alloc$0|0)!=(0);
        do {
         if ($179) {
          if ($180) {
           $181 = $$8 << 2;
           $182 = (_malloc($181)|0);
           $183 = ($182|0)==(0|0);
           if ($183) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $182;
            label = 188;
            break L4;
           } else {
            $wcs$2 = $182;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L117: while(1) {
           $184 = ($wcs$3$ph|0)==(0|0);
           if ($184) {
            while(1) {
             $187 = HEAP32[$3>>2]|0;
             $198 = HEAP32[$4>>2]|0;
             $199 = ($187>>>0)<($198>>>0);
             if ($199) {
              $186 = (($187) + 1|0);
              HEAP32[$3>>2] = $186;
              $188 = HEAP8[$187>>0]|0;
              $189 = $188&255;
              $191 = $189;
             } else {
              $185 = (___shgetc($f)|0);
              $191 = $185;
             }
             $190 = (($191) + 1)|0;
             $192 = (($scanset) + ($190)|0);
             $193 = HEAP8[$192>>0]|0;
             $194 = ($193<<24>>24)==(0);
             if ($194) {
              $i$0$ph$lcssa247 = $i$0$ph;
              label = 120;
              break L117;
             }
             $195 = $191&255;
             HEAP8[$0>>0] = $195;
             $196 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($196|0) == -1)) {
              $alloc$0$lcssa300 = $alloc$0;$matches$0111$lcssa258 = $matches$0111;
              label = 184;
              break L4;
             } else if (!((($196|0) == -2))) {
              $197 = ($i$0$ph|0)==($k$0$ph|0);
              $or$cond$us = $180 & $197;
              if ($or$cond$us) {
               break;
              }
             }
            }
            $i$1$lcssa = $i$0$ph;
           } else {
            if (!($180)) {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 91;
             break;
            }
            $i$0$ph21$us106 = $i$0$ph;
            while(1) {
             while(1) {
              $202 = HEAP32[$3>>2]|0;
              $216 = HEAP32[$4>>2]|0;
              $217 = ($202>>>0)<($216>>>0);
              if ($217) {
               $201 = (($202) + 1|0);
               HEAP32[$3>>2] = $201;
               $203 = HEAP8[$202>>0]|0;
               $204 = $203&255;
               $206 = $204;
              } else {
               $200 = (___shgetc($f)|0);
               $206 = $200;
              }
              $205 = (($206) + 1)|0;
              $207 = (($scanset) + ($205)|0);
              $208 = HEAP8[$207>>0]|0;
              $209 = ($208<<24>>24)==(0);
              if ($209) {
               $i$0$ph21$us106$lcssa = $i$0$ph21$us106;$wcs$3$ph$lcssa240 = $wcs$3$ph;
               label = 118;
               break L117;
              }
              $210 = $206&255;
              HEAP8[$0>>0] = $210;
              $211 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($211|0) == -1)) {
               $alloc$0$lcssa299 = $alloc$0;$matches$0111$lcssa257 = $matches$0111;$wcs$3$ph$lcssa241 = $wcs$3$ph;
               label = 182;
               break L4;
              } else if (!((($211|0) == -2))) {
               break;
              }
             }
             $212 = HEAP32[$wc>>2]|0;
             $213 = (($i$0$ph21$us106) + 1)|0;
             $214 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$214>>2] = $212;
             $215 = ($213|0)==($k$0$ph|0);
             if ($215) {
              break;
             } else {
              $i$0$ph21$us106 = $213;
             }
            }
            $i$1$lcssa = $k$0$ph;
           }
           $factor = $k$0$ph << 1;
           $235 = $factor | 1;
           $236 = $235 << 2;
           $237 = (_realloc($wcs$3$ph,$236)|0);
           $238 = ($237|0)==(0|0);
           if ($238) {
            $alloc$0$lcssa301 = $alloc$0;$matches$0111$lcssa259 = $matches$0111;$wcs$3$ph$lcssa244 = $wcs$3$ph;
            label = 185;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $235;$wcs$3$ph = $237;
          }
          if ((label|0) == 91) {
           label = 0;
           $i$0$ph21 = $i$0$ph$lcssa;
           L149: while(1) {
            while(1) {
             $218 = HEAP32[$3>>2]|0;
             $219 = HEAP32[$4>>2]|0;
             $220 = ($218>>>0)<($219>>>0);
             if ($220) {
              $221 = (($218) + 1|0);
              HEAP32[$3>>2] = $221;
              $222 = HEAP8[$218>>0]|0;
              $223 = $222&255;
              $226 = $223;
             } else {
              $224 = (___shgetc($f)|0);
              $226 = $224;
             }
             $225 = (($226) + 1)|0;
             $227 = (($scanset) + ($225)|0);
             $228 = HEAP8[$227>>0]|0;
             $229 = ($228<<24>>24)==(0);
             if ($229) {
              $i$0$ph21$lcssa250 = $i$0$ph21;
              break L149;
             }
             $230 = $226&255;
             HEAP8[$0>>0] = $230;
             $231 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($231|0) == -1)) {
              $matches$0111$lcssa256 = $matches$0111;$wcs$3$ph$lcssa$lcssa = $wcs$3$ph$lcssa;
              label = 183;
              break L4;
             } else if (!((($231|0) == -2))) {
              break;
             }
            }
            $232 = HEAP32[$wc>>2]|0;
            $233 = (($i$0$ph21) + 1)|0;
            $234 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
            HEAP32[$234>>2] = $232;
            $i$0$ph21 = $233;
           }
           $i$0$ph21$lcssa = $i$0$ph21$lcssa250;$wcs$3$ph141 = $wcs$3$ph$lcssa;
          }
          else if ((label|0) == 118) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph21$us106$lcssa;$wcs$3$ph141 = $wcs$3$ph$lcssa240;
          }
          else if ((label|0) == 120) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph$lcssa247;$wcs$3$ph141 = 0;
          }
          $239 = (_mbsinit($st)|0);
          $240 = ($239|0)==(0);
          if ($240) {
           $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $wcs$3$ph141;
           label = 188;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph141;
          }
         } else {
          if ($180) {
           $241 = (_malloc($$8)|0);
           $242 = ($241|0)==(0|0);
           if ($242) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = 0;
            label = 188;
            break L4;
           }
           $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $241;
           L167: while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $243 = HEAP32[$3>>2]|0;
             $244 = HEAP32[$4>>2]|0;
             $245 = ($243>>>0)<($244>>>0);
             if ($245) {
              $246 = (($243) + 1|0);
              HEAP32[$3>>2] = $246;
              $247 = HEAP8[$243>>0]|0;
              $248 = $247&255;
              $251 = $248;
             } else {
              $249 = (___shgetc($f)|0);
              $251 = $249;
             }
             $250 = (($251) + 1)|0;
             $252 = (($scanset) + ($250)|0);
             $253 = HEAP8[$252>>0]|0;
             $254 = ($253<<24>>24)==(0);
             if ($254) {
              $i$2$lcssa = $i$2;$s$2$ph$lcssa = $s$2$ph;
              break L167;
             }
             $255 = $251&255;
             $256 = (($i$2) + 1)|0;
             $257 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$257>>0] = $255;
             $258 = ($256|0)==($k$1$ph|0);
             if ($258) {
              break;
             } else {
              $i$2 = $256;
             }
            }
            $factor17 = $k$1$ph << 1;
            $259 = $factor17 | 1;
            $260 = (_realloc($s$2$ph,$259)|0);
            $261 = ($260|0)==(0|0);
            if ($261) {
             $alloc$0$lcssa297 = $alloc$0;$matches$0111$lcssa255 = $matches$0111;$s$2$ph$lcssa237 = $s$2$ph;
             label = 186;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $259;$s$2$ph = $260;$i$2$ph = $i$2$ph$phi;
            }
           }
           $i$4 = $i$2$lcssa;$s$3 = $s$2$ph$lcssa;$wcs$4 = 0;
           break;
          }
          $262 = ($dest$0|0)==(0|0);
          if ($262) {
           $280 = $140;
           while(1) {
            $278 = HEAP32[$3>>2]|0;
            $279 = ($278>>>0)<($280>>>0);
            if ($279) {
             $281 = (($278) + 1|0);
             HEAP32[$3>>2] = $281;
             $282 = HEAP8[$278>>0]|0;
             $283 = $282&255;
             $286 = $283;
            } else {
             $284 = (___shgetc($f)|0);
             $286 = $284;
            }
            $285 = (($286) + 1)|0;
            $287 = (($scanset) + ($285)|0);
            $288 = HEAP8[$287>>0]|0;
            $289 = ($288<<24>>24)==(0);
            if ($289) {
             break;
            }
            $$pre213 = HEAP32[$4>>2]|0;
            $280 = $$pre213;
           }
           $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
           break;
          } else {
           $265 = $140;$i$3 = 0;
           while(1) {
            $263 = HEAP32[$3>>2]|0;
            $264 = ($263>>>0)<($265>>>0);
            if ($264) {
             $266 = (($263) + 1|0);
             HEAP32[$3>>2] = $266;
             $267 = HEAP8[$263>>0]|0;
             $268 = $267&255;
             $271 = $268;
            } else {
             $269 = (___shgetc($f)|0);
             $271 = $269;
            }
            $270 = (($271) + 1)|0;
            $272 = (($scanset) + ($270)|0);
            $273 = HEAP8[$272>>0]|0;
            $274 = ($273<<24>>24)==(0);
            if ($274) {
             $i$3$lcssa = $i$3;
             break;
            }
            $275 = $271&255;
            $276 = (($i$3) + 1)|0;
            $277 = (($dest$0) + ($i$3)|0);
            HEAP8[$277>>0] = $275;
            $$pre214 = HEAP32[$4>>2]|0;
            $265 = $$pre214;$i$3 = $276;
           }
           $i$4 = $i$3$lcssa;$s$3 = $dest$0;$wcs$4 = 0;
           break;
          }
         }
        } while(0);
        $290 = HEAP32[$4>>2]|0;
        $291 = ($290|0)==(0|0);
        $$pre211 = HEAP32[$3>>2]|0;
        if ($291) {
         $295 = $$pre211;
        } else {
         $292 = (($$pre211) + -1|0);
         HEAP32[$3>>2] = $292;
         $295 = $292;
        }
        $293 = HEAP32[$5>>2]|0;
        $294 = HEAP32[$6>>2]|0;
        $296 = $295;
        $297 = $294;
        $298 = (($296) - ($297))|0;
        $299 = (($298) + ($293))|0;
        $300 = ($299|0)==(0);
        if ($300) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        $$not = $144 ^ 1;
        $301 = ($299|0)==($width$1|0);
        $or$cond9 = $301 | $$not;
        if (!($or$cond9)) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        do {
         if ($180) {
          if ($179) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $302 = ($wcs$4|0)==(0|0);
         if (!($302)) {
          $303 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$303>>2] = 0;
         }
         $304 = ($s$3|0)==(0|0);
         if ($304) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $305 = (($s$3) + ($i$4)|0);
          HEAP8[$305>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 164;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 164;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 164;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 164;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L218: do {
       if ((label|0) == 164) {
        label = 0;
        $306 = (___intscan($f,$base$0,0,-1,-1)|0);
        $307 = tempRet0;
        $308 = HEAP32[$5>>2]|0;
        $309 = HEAP32[$3>>2]|0;
        $310 = HEAP32[$6>>2]|0;
        $311 = $309;
        $312 = $310;
        $313 = (($312) - ($311))|0;
        $314 = ($308|0)==($313|0);
        if ($314) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $315 = ($$|0)==(112);
        $316 = ($dest$0|0)!=(0|0);
        $or$cond3 = $315 & $316;
        if ($or$cond3) {
         $317 = $306;
         HEAP32[$dest$0>>2] = $317;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $318 = ($dest$0|0)==(0|0);
        if ($318) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $319 = $306&255;
          HEAP8[$dest$0>>0] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case -1:  {
          $320 = $306&65535;
          HEAP16[$dest$0>>1] = $320;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 3:  {
          $321 = $dest$0;
          $322 = $321;
          HEAP32[$322>>2] = $306;
          $323 = (($321) + 4)|0;
          $324 = $323;
          HEAP32[$324>>2] = $307;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
         }
         }
        }
       }
      } while(0);
      $335 = HEAP32[$5>>2]|0;
      $336 = HEAP32[$3>>2]|0;
      $337 = HEAP32[$6>>2]|0;
      $338 = $336;
      $339 = $337;
      $340 = (($335) + ($pos$1))|0;
      $341 = (($340) + ($338))|0;
      $342 = (($341) - ($339))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $343 = $not$&1;
      $matches$0$ = (($343) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $342;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     $$lcssa280 = $57;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 20;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre216 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre216;
    } else {
     $33 = (($$pre216) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $344 = (($p$11) + 1|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = ($345<<24>>24)==(0);
  if ($346) {
   $matches$1$lcssa = $matches$1;
   label = 194;
   break;
  } else {
   $13 = $345;$matches$0111 = $matches$1;$p$0117 = $344;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 switch (label|0) {
  case 20: {
   $59 = HEAP32[$4>>2]|0;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = HEAP32[$3>>2]|0;
    $62 = (($61) + -1|0);
    HEAP32[$3>>2] = $62;
   }
   $63 = ($$lcssa280|0)>(-1);
   $64 = ($matches$0111$lcssa|0)!=(0);
   $or$cond5 = $63 | $64;
   if ($or$cond5) {
    $matches$3 = $matches$0111$lcssa;
    STACKTOP = sp;return ($matches$3|0);
   } else {
    $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
    label = 190;
   }
   break;
  }
  case 182: {
   $alloc$0200 = $alloc$0$lcssa299;$matches$0111261 = $matches$0111$lcssa257;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa241;
   label = 189;
   break;
  }
  case 183: {
   $alloc$0200 = 0;$matches$0111261 = $matches$0111$lcssa256;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa$lcssa;
   label = 189;
   break;
  }
  case 184: {
   $alloc$0200 = $alloc$0$lcssa300;$matches$0111261 = $matches$0111$lcssa258;$s$6 = 0;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 185: {
   $alloc$0200 = $alloc$0$lcssa301;$matches$0111261 = $matches$0111$lcssa259;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa244;
   label = 189;
   break;
  }
  case 186: {
   $alloc$0200 = $alloc$0$lcssa297;$matches$0111261 = $matches$0111$lcssa255;$s$6 = $s$2$ph$lcssa237;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 187: {
   $alloc$0200 = $alloc$0$lcssa296;$matches$0111261 = $matches$0111$lcssa254;$s$6 = $s$1$lcssa282;$wcs$7 = $wcs$1$lcssa289;
   label = 189;
   break;
  }
  case 188: {
   $alloc$0200 = $alloc$0$lcssa;$matches$0111261 = $matches$0111$lcssa252;$s$6 = $s$6$ph;$wcs$7 = $wcs$7$ph;
   label = 189;
   break;
  }
  case 191: {
   $alloc$2 = $alloc$0$lcssa295;$matches$2 = $matches$0111$lcssa253;$s$8 = $s$8$ph;$wcs$9 = $wcs$9$ph;
   break;
  }
  case 194: {
   $matches$3 = $matches$1$lcssa;
   STACKTOP = sp;return ($matches$3|0);
   break;
  }
 }
 if ((label|0) == 189) {
  $$old4 = ($matches$0111261|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0200;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 190;
  } else {
   $alloc$2 = $alloc$0200;$matches$2 = $matches$0111261;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 if ((label|0) == 190) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $347 = ($alloc$2|0)==(0);
 if ($347) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 53;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 if ($2) {
  $$0$lcssa = $1;
  HEAP8[$$0$lcssa>>0] = 0;
  return ($d|0);
 }
 $$014 = $n;$$023 = $s;$$05 = $1;
 while(1) {
  $3 = HEAP8[$$023>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$0$lcssa$ph = $$05;
   break;
  }
  $5 = (($$014) + -1)|0;
  $6 = (($$023) + 1|0);
  $7 = (($$05) + 1|0);
  HEAP8[$$05>>0] = $3;
  $8 = ($5|0)==(0);
  if ($8) {
   $$0$lcssa$ph = $7;
   break;
  } else {
   $$014 = $5;$$023 = $6;$$05 = $7;
  }
 }
 $$0$lcssa = $$0$lcssa$ph;
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 $longonly = $longonly|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa40 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$018 = 0, $i$018$lcssa = 0, $i$018$lcssa36 = 0, $i$01838 = 0, $name$016 = 0, $opt$017 = 0, $opt$017$lcssa = 0, $opt$04 = 0, $opt$04$lcssa39 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[27648>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[27664>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[27664>>2] = 0;
  HEAP32[27672>>2] = 0;
  HEAP32[27648>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 if (!($5)) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = (($argv) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ($longonly|0)==(0);
 $$phi$trans$insert = (($7) + 1|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 if ($11) {
  $phitmp = ($$pre<<24>>24)==(45);
  if ($phitmp) {
   $13 = (($7) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(0);
   if (!($15)) {
    $19 = 45;
    label = 10;
   }
  }
 } else {
  $12 = ($$pre<<24>>24)==(0);
  if (!($12)) {
   $19 = $$pre;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $16 = HEAP32[$longopts>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = (($7) + 1|0);
  $20 = ($19<<24>>24)==(45);
  L19: do {
   if (!($17)) {
    $23 = $16;$i$018 = 0;
    while(1) {
     $21 = (($7) + 2|0);
     $$ = $20 ? $21 : $18;
     $22 = HEAP8[$23>>0]|0;
     $24 = ($22<<24>>24)==(0);
     do {
      if ($24) {
       $opt$04 = $$;
       label = 18;
      } else {
       $$pr = $22;$name$016 = $23;$opt$017 = $$;
       while(1) {
        $25 = HEAP8[$opt$017>>0]|0;
        $26 = ($$pr<<24>>24)==($25<<24>>24);
        if (!($26)) {
         $$pr$lcssa = $$pr;$opt$017$lcssa = $opt$017;
         label = 16;
         break;
        }
        $27 = (($name$016) + 1|0);
        $28 = (($opt$017) + 1|0);
        $29 = HEAP8[$27>>0]|0;
        $30 = ($29<<24>>24)==(0);
        if ($30) {
         $$lcssa = $28;
         label = 17;
         break;
        } else {
         $$pr = $29;$name$016 = $27;$opt$017 = $28;
        }
       }
       if ((label|0) == 16) {
        label = 0;
        $31 = ($$pr$lcssa<<24>>24)==(0);
        if ($31) {
         $opt$04 = $opt$017$lcssa;
         label = 18;
         break;
        } else {
         break;
        }
       }
       else if ((label|0) == 17) {
        label = 0;
        $opt$04 = $$lcssa;
        label = 18;
        break;
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      $32 = HEAP8[$opt$04>>0]|0;
      if ((($32<<24>>24) == 61) | (($32<<24>>24) == 0)) {
       $33 = ($32<<24>>24)==(61);
       $34 = ((($longopts) + ($i$018<<4)|0) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       if (!($33)) {
        $$lcssa40 = $35;$i$018$lcssa = $i$018;
        label = 22;
        break;
       }
       $36 = ($35|0)==(0);
       if (!($36)) {
        $i$018$lcssa36 = $i$018;$opt$04$lcssa39 = $opt$04;
        label = 21;
        break;
       }
      }
     }
     $51 = (($i$018) + 1)|0;
     $52 = (($longopts) + ($51<<4)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      label = 30;
      break;
     } else {
      $23 = $53;$i$018 = $51;
     }
    }
    do {
     if ((label|0) == 21) {
      $37 = (($opt$04$lcssa39) + 1|0);
      HEAP32[27752>>2] = $37;
      $44 = $4;$i$01838 = $i$018$lcssa36;
     }
     else if ((label|0) == 22) {
      $38 = ($$lcssa40|0)==(1);
      if (!($38)) {
       HEAP32[27752>>2] = 0;
       $44 = $4;$i$01838 = $i$018$lcssa;
       break;
      }
      $39 = (($4) + 1)|0;
      HEAP32[27648>>2] = $39;
      $40 = (($argv) + ($39<<2)|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[27752>>2] = $41;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$0 = 58;
       return ($$0|0);
      } else {
       $44 = $39;$i$01838 = $i$018$lcssa;
      }
     }
     else if ((label|0) == 30) {
      break L19;
     }
    } while(0);
    $43 = (($44) + 1)|0;
    HEAP32[27648>>2] = $43;
    $45 = ($idx|0)==(0|0);
    if (!($45)) {
     HEAP32[$idx>>2] = $i$01838;
    }
    $46 = ((($longopts) + ($i$01838<<4)|0) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    $49 = ((($longopts) + ($i$01838<<4)|0) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    if ($48) {
     $$0 = $50;
     return ($$0|0);
    }
    HEAP32[$47>>2] = $50;
    $$0 = 0;
    return ($$0|0);
   }
  } while(0);
  if ($20) {
   $55 = (($4) + 1)|0;
   HEAP32[27648>>2] = $55;
   $$0 = 63;
   return ($$0|0);
  }
 }
 $56 = (_getopt($argc,$argv,$optstring)|0);
 $$0 = $56;
 return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[27976>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((27976 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((27976 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[27976>>2] = $22;
     } else {
      $23 = HEAP32[((27976 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((27976 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((27976 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((27976 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[27976>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((27976 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((27976 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((27976 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((27976 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[27976>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[27976>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((27976 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((27976 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((27976 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((27976 + 8|0))>>2] = $81;
     HEAP32[((27976 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((27976 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((27976 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((27976 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((27976 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((27976 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((27976 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((27976 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((27976 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((27976 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((27976 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((27976 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((27976 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[27976>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[27976>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((27976 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((27976 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((27976 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((27976 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((27976 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((27976 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((27976 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((27976 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((27976 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((27976 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((27976 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((27976 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((27976 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((27976 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((27976 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((27976 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L215: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((27976 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[27976>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[27976>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((27976 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((27976 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((27976 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((27976 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((27976 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((27976 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((27976 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L215;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((27976 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((27976 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((27976 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((27976 + 20|0))>>2] = $514;
   HEAP32[((27976 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((27976 + 8|0))>>2] = 0;
   HEAP32[((27976 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((27976 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((27976 + 12|0))>>2] = $528;
  $529 = HEAP32[((27976 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((27976 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[28448>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((28448 + 8|0))>>2] = $538;
    HEAP32[((28448 + 4|0))>>2] = $538;
    HEAP32[((28448 + 12|0))>>2] = -1;
    HEAP32[((28448 + 16|0))>>2] = -1;
    HEAP32[((28448 + 20|0))>>2] = 0;
    HEAP32[((27976 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[28448>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((28448 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((27976 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((27976 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((27976 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((27976 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((27976 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((27976 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((28448 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((27976 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((27976 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((28448 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((27976 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((27976 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((27976 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((27976 + 432|0))>>2] = $633;
  $634 = HEAP32[((27976 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((27976 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((27976 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((27976 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((27976 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((27976 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((27976 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((27976 + 460|0))>>2] = 0;
    $641 = HEAP32[28448>>2]|0;
    HEAP32[((27976 + 36|0))>>2] = $641;
    HEAP32[((27976 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((27976 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((27976 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((27976 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((27976 + 24|0))>>2] = $654;
    HEAP32[((27976 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((28448 + 16|0))>>2]|0;
    HEAP32[((27976 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((27976 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((27976 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((27976 + 24|0))>>2] = $684;
       HEAP32[((27976 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((28448 + 16|0))>>2]|0;
       HEAP32[((27976 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((27976 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((27976 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((27976 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L353: do {
       if ($729) {
        $730 = HEAP32[((27976 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((27976 + 12|0))>>2] = $731;
        HEAP32[((27976 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((27976 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((27976 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((27976 + 8|0))>>2] = $737;
         HEAP32[((27976 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L361: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((27976 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[27976>>2]|0;
            $764 = $763 & $762;
            HEAP32[27976>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((27976 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((27976 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((27976 + 4|0))>>2] = $807;
             break L361;
            } else {
             $808 = HEAP32[((27976 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L361;
             }
            }
           } while(0);
           $815 = HEAP32[((27976 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((27976 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((27976 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[27976>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[27976>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((27976 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((27976 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((27976 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((27976 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((27976 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((27976 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((27976 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L353;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((27976 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((27976 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((27976 + 24|0))>>2] = $953;
    HEAP32[((27976 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((28448 + 16|0))>>2]|0;
    HEAP32[((27976 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((27976 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((27976 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((27976 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((27976 + 448|0))+12>>2]|0;
    HEAP32[((27976 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((27976 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((27976 + 460|0))>>2] = 0;
    HEAP32[((27976 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((27976 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[27976>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[27976>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((27976 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((27976 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((27976 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((27976 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((27976 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((27976 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((27976 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((27976 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((27976 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((27976 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((27976 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((27976 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((27976 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((27976 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((27976 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((27976 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[27976>>2]|0;
     $36 = $35 & $34;
     HEAP32[27976>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((27976 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((27976 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((27976 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((27976 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((27976 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((27976 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((27976 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((27976 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((27976 + 12|0))>>2] = $120;
   HEAP32[((27976 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((27976 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((27976 + 20|0))>>2] = 0;
   HEAP32[((27976 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((27976 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((27976 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((27976 + 8|0))>>2] = $128;
   HEAP32[((27976 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((27976 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((27976 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[27976>>2]|0;
     $152 = $151 & $150;
     HEAP32[27976>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((27976 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((27976 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((27976 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((27976 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((27976 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((27976 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((27976 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((27976 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((27976 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((27976 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((27976 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((27976 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[27976>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[27976>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((27976 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((27976 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((27976 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((27976 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((27976 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((27976 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((27976 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((27976 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((27976 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((27976 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((27976 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((27976 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$5$be$lcssa = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$8$ph = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa114 = $13;
   break;
  }
 }
 $16 = ($$lcssa114|0)==(45);
 do {
  if ((($$lcssa114|0) == 43) | (($$lcssa114|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa114;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 48;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (28472 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 48;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (28472 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa113 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa113;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 79;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 48;
  }
 }
 do {
  if ((label|0) == 48) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (28736 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (28472 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (28472 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $145 & $146;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa109 = $133;$$lcssa110 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa110;$152 = 0;$154 = $$lcssa109;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 79;
     break;
    }
    $159 = $154;$160 = $152;$164 = $150;
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (28472 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $289 = $165;$290 = $162;$c$5$be$lcssa = $c$5$be;
      break;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
    $$124 = $$125;$285 = $289;$286 = $290;$c$8 = $c$5$be$lcssa;
    label = 79;
    break;
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (28472 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (28472 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $195 & $196;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa111 = $183;$$lcssa112 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa112;$287 = $$lcssa111;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (28472 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $291 = $219;$292 = $220;$c$8$ph = $c$7$be;
      break;
     }
    }
    $$124 = $$125;$285 = $291;$286 = $292;$c$8 = $c$8$ph;
    label = 79;
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 79;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (28472 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (28472 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (28752 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (29336 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $156;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $167 = 0;$169 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L91: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L91;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $169;$722 = $167;$723 = $169;$724 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L91;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $167 = $724;$169 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $213 = $210 ? $212 : $211;
      $216 = $210 ? $215 : $214;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($213|0),($216|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L204: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L204;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$389 = $750;$390 = $748;$392 = $751;$393 = $749;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$389 = $727;$390 = 0;$392 = $728;$393 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $391 = $388 ? $390 : $389;
      $394 = $388 ? $393 : $392;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $391;$746 = $394;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $391;$756 = $394;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($391|0),($394|0))|0);
      $411 = tempRet0;
      $422 = $410;$424 = $390;$425 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $422 = $745;$424 = $743;$425 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $422 = $755;$424 = $752;$425 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $423 = ($422|0)==($424|0);
    $426 = ($425|0)==($427|0);
    $428 = $423 & $426;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($425|0)>($442|0);
    $444 = ($422>>>0)>($440>>>0);
    $445 = ($425|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($425|0)<($454|0);
    $456 = ($422>>>0)<($452>>>0);
    $457 = ($425|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($422|0);
     $473 = ($422|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($422|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($422|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($422))|0;
       $485 = (28776 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($422, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($422) + -10)|0;
       $498 = (28776 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($422|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $422;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($422|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (28776 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $422;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $422;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L299: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L299;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L338: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $629 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (28768 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $596 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $597 = ($596|0)<(2);
        if ($597) {
         $i$081$i = $596;
        } else {
         $i$1$i = $596;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $629;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L338;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $630 = ($629|0)==($a$5$i$lcssa|0);
       if (!($630)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $629;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $647 = (($690) - ($emin$0$ph))|0;
    $714 = ($647|0)<($bits$0$ph|0);
    if ($714) {
     $648 = ($647|0)<(0);
     if ($648) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $647;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($647|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if (!($75)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=29376+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 }
 $$12 = $$1$ph;$n$03 = 0;
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $n$0$lcssa = $$lcssa;
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa10&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa18 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$04 = 0, $r$04$lcssa17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$ph = $5;$r$0$lcssa$ph = $r$04;
     label = 8;
     break;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa18 = $l$03;$r$04$lcssa17 = $r$04;
      label = 7;
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $$ph = 0;$r$0$lcssa$ph = $14;
     label = 8;
     break;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   if ((label|0) == 7) {
    $$pre = HEAP8[$l$03$lcssa18>>0]|0;
    $19 = $$pre;$r$0$lcssa = $r$04$lcssa17;
    break;
   }
   else if ((label|0) == 8) {
    $19 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
    break;
   }
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((27976 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((28448 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((27976 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((27976 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((27976 + 24|0))>>2] = $36;
  HEAP32[((27976 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((27976 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((27976 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((27976 + 8|0))>>2] = $storemerge21;
  HEAP32[((27976 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((27976 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[27976>>2]|0;
    $88 = $87 & $86;
    HEAP32[27976>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((27976 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((27976 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((27976 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((27976 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((27976 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((27976 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0;
 var $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((27976 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((27976 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((27976 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((27976 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[27976>>2]|0;
     $32 = $31 & $30;
     HEAP32[27976>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((27976 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((27976 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((27976 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((27976 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((27976 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((27976 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((27976 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((27976 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((27976 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((27976 + 12|0))>>2] = $115;
   HEAP32[((27976 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((27976 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((27976 + 20|0))>>2] = 0;
   HEAP32[((27976 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((27976 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((27976 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((27976 + 8|0))>>2] = $123;
   HEAP32[((27976 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((27976 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[27976>>2]|0;
     $146 = $145 & $144;
     HEAP32[27976>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((27976 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((27976 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((27976 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((27976 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((27976 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((27976 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((27976 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((27976 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((27976 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[27976>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[27976>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((27976 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((27976 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((27976 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((27976 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((27976 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((27976 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa64 = $287;
     label = 134;
     break;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa64;
    break;
   }
   $294 = HEAP32[((27976 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((27976 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph285 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0;
 var $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be286 = 0, $$be287 = 0;
 var $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa106 = 0, $$lcssa106$ph = 0, $$lcssa283$i = 0, $$lcssa289 = 0, $$lcssa290 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa295 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0;
 var $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0, $$lcssa311 = 0, $$lcssa312 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0.0, $$lcssa326 = 0;
 var $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa333 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre267 = 0, $$pre268 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0.0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $128$phi = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $584$phi = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $884$phi = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0;
 var $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0;
 var $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0;
 var $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0;
 var $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0;
 var $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0110 = 0, $fl$0110$ph = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0;
 var $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1230$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2217$i = 0, $i$3160 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond277 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa296 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8108$ph = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1044 = 0;$1045 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1046 = $22;$26 = $23;
  while(1) {
   if ((($1046<<24>>24) == 37)) {
    $$lcssa = $26;
    label = 9;
    break;
   } else if ((($1046<<24>>24) == 0)) {
    $$lcssa289 = $26;
    label = 14;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1046 = $$pre;$26 = $25;
  }
  if ((label|0) == 9) {
   label = 0;
   $28 = $$lcssa;$z$0163 = $$lcssa;
   while(1) {
    $27 = (($28) + 1|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(37);
    if (!($30)) {
     $$lcssa106$ph = $28;$z$0$lcssa$ph = $z$0163;
     break;
    }
    $31 = (($z$0163) + 1|0);
    $32 = (($28) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(37);
    if ($34) {
     $28 = $32;$z$0163 = $31;
    } else {
     $$lcssa106$ph = $32;$z$0$lcssa$ph = $31;
     break;
    }
   }
   $$lcssa106 = $$lcssa106$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $$lcssa106 = $$lcssa289;$z$0$lcssa = $$lcssa289;
  }
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  L24: do {
   if ($38) {
    $39 = (($$lcssa106) + 1|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $isdigittmp = (($41) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $42 = (($$lcssa106) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(36);
     $45 = (($$lcssa106) + 3|0);
     $$92 = $44 ? $45 : $39;
     $$l10n$0 = $44 ? 1 : $l10n$0;
     $isdigittmp$ = $44 ? $isdigittmp : -1;
     $$pre267 = HEAP8[$$92>>0]|0;
     $47 = $$pre267;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
    } else {
     $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
    }
    $46 = $47 << 24 >> 24;
    $48 = $46 & -32;
    $49 = ($48|0)==(32);
    if ($49) {
     $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
     while(1) {
      $50 = (($51) + -32)|0;
      $52 = 1 << $50;
      $53 = $52 & 75913;
      $54 = ($53|0)==(0);
      if ($54) {
       $$ph = $56;$fl$0110$ph = $fl$0170;$storemerge8108$ph = $storemerge8169;
       break;
      }
      $55 = $56 << 24 >> 24;
      $57 = (($55) + -32)|0;
      $58 = 1 << $57;
      $59 = $58 | $fl$0170;
      $60 = (($storemerge8169) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = $62 & -32;
      $64 = ($63|0)==(32);
      if ($64) {
       $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
      } else {
       $$ph = $61;$fl$0110$ph = $59;$storemerge8108$ph = $60;
       break;
      }
     }
     $65 = $$ph;$fl$0110 = $fl$0110$ph;$storemerge8108 = $storemerge8108$ph;
    } else {
     $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
    }
    $66 = ($65<<24>>24)==(42);
    do {
     if ($66) {
      $67 = (($storemerge8108) + 1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $isdigittmp11 = (($69) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $70 = (($storemerge8108) + 2|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)==(36);
       if ($72) {
        $73 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$73>>2] = 10;
        $74 = HEAP8[$67>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = (($75) + -48)|0;
        $77 = (($nl_arg) + ($76<<3)|0);
        $78 = $77;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($storemerge8108) + 3|0);
        $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $85 = ($l10n$1|0)==(0);
       if (!($85)) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $99 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $86 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $67;$w$0 = $86;
      }
      $87 = ($w$0|0)<(0);
      if ($87) {
       $88 = $fl$0110 | 8192;
       $89 = (0 - ($w$0))|0;
       $99 = $storemerge13;$fl$1 = $88;$l10n$3 = $l10n$2;$w$1 = $89;
      } else {
       $99 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $90 = $65 << 24 >> 24;
      $isdigittmp1$i = (($90) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $94 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $91 = ($i$03$i*10)|0;
        $92 = (($91) + ($isdigittmp4$i))|0;
        $93 = (($94) + 1|0);
        $95 = HEAP8[$93>>0]|0;
        $96 = $95 << 24 >> 24;
        $isdigittmp$i = (($96) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $94 = $93;$i$03$i = $92;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa290 = $92;$$lcssa291 = $93;
         break;
        }
       }
       $97 = ($$lcssa290|0)<(0);
       if ($97) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       } else {
        $99 = $$lcssa291;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa290;
       }
      } else {
       $99 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $98 = HEAP8[$99>>0]|0;
    $100 = ($98<<24>>24)==(46);
    do {
     if ($100) {
      $101 = (($99) + 1|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = ($102<<24>>24)==(42);
      if (!($103)) {
       $124 = $102 << 24 >> 24;
       $isdigittmp1$i28 = (($124) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $1047 = $101;$p$0 = 0;
        break;
       }
       $1048 = $101;$128 = $99;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $125 = ($i$03$i31*10)|0;
        $126 = (($125) + ($isdigittmp4$i30))|0;
        $127 = (($128) + 2|0);
        $129 = HEAP8[$127>>0]|0;
        $130 = $129 << 24 >> 24;
        $isdigittmp$i32 = (($130) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $128$phi = $1048;$1048 = $127;$i$03$i31 = $126;$isdigittmp4$i30 = $isdigittmp$i32;$128 = $128$phi;
        } else {
         $$lcssa292 = $126;$$lcssa293 = $127;
         break;
        }
       }
       $1047 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $104 = (($99) + 2|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105 << 24 >> 24;
      $isdigittmp9 = (($106) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $107 = (($99) + 3|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = ($108<<24>>24)==(36);
       if ($109) {
        $110 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$110>>2] = 10;
        $111 = HEAP8[$104>>0]|0;
        $112 = $111 << 24 >> 24;
        $113 = (($112) + -48)|0;
        $114 = (($nl_arg) + ($113<<3)|0);
        $115 = $114;
        $116 = $115;
        $117 = HEAP32[$116>>2]|0;
        $118 = (($115) + 4)|0;
        $119 = $118;
        $120 = HEAP32[$119>>2]|0;
        $121 = (($99) + 4|0);
        $1047 = $121;$p$0 = $117;
        break;
       }
      }
      $122 = ($l10n$3|0)==(0);
      if (!($122)) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $123 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $1047 = $104;$p$0 = $123;
      } else {
       $1047 = $104;$p$0 = 0;
      }
     } else {
      $1047 = $99;$p$0 = -1;
     }
    } while(0);
    $132 = $1047;$st$0 = 0;
    while(1) {
     $131 = HEAP8[$132>>0]|0;
     $133 = $131 << 24 >> 24;
     $134 = (($133) + -65)|0;
     $135 = ($134>>>0)>(57);
     if ($135) {
      label = 448;
      break L1;
     }
     $136 = (($132) + 1|0);
     $137 = ((28808 + (($st$0*58)|0)|0) + ($134)|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = (($139) + -1)|0;
     $141 = ($140>>>0)<(8);
     if ($141) {
      $132 = $136;$st$0 = $139;
     } else {
      $$lcssa295 = $132;$$lcssa298 = $131;$$lcssa299 = $136;$$lcssa300 = $138;$$lcssa301 = $139;$st$0$lcssa296 = $st$0;
      break;
     }
    }
    $142 = ($$lcssa300<<24>>24)==(0);
    if ($142) {
     $$0$ph285 = -1;
     label = 449;
     break L1;
    }
    $143 = ($$lcssa300<<24>>24)==(19);
    $144 = ($argpos$0|0)>(-1);
    L74: do {
     if ($143) {
      if ($144) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1049 = $1044;$1050 = $1045;
       label = 71;
      }
     } else {
      if ($144) {
       $145 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$145>>2] = $$lcssa301;
       $146 = (($nl_arg) + ($argpos$0<<3)|0);
       $147 = $146;
       $148 = $147;
       $149 = HEAP32[$148>>2]|0;
       $150 = (($147) + 4)|0;
       $151 = $150;
       $152 = HEAP32[$151>>2]|0;
       $1049 = $149;$1050 = $152;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph285 = 0;
       label = 449;
       break L1;
      }
      $153 = ($$lcssa300&255)>(20);
      if ($153) {
       $187 = $$lcssa298;$195 = $1044;$222 = $1045;
      } else {
       do {
        switch ($$lcssa301|0) {
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $155 = $154;
         $1051 = $1045;$1052 = $155;
         label = 72;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $156 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $157 = ($156|0)<(0);
         $158 = $157 << 31 >> 31;
         $1051 = $158;$1052 = $156;
         label = 72;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $172 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $172 & 65535;
         $1051 = 0;$1052 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $160 = $arglist_current14;
         $161 = $160;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($160) + 4)|0;
         $164 = $163;
         $165 = HEAP32[$164>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1051 = $165;$1052 = $162;
         label = 72;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $159 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1051 = 0;$1052 = $159;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $166 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $167 = $166&65535;
         $168 = $167 << 16 >> 16;
         $169 = ($168|0)<(0);
         $170 = $169 << 31 >> 31;
         $sext93 = $166 << 16;
         $171 = $sext93 >> 16;
         $1051 = $170;$1052 = $171;
         label = 72;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
         $182 = HEAP32[tempDoublePtr+4>>2]|0;
         $1051 = $182;$1052 = $181;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $173 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $174 = $173&255;
         $175 = $174 << 24 >> 24;
         $176 = ($175|0)<(0);
         $177 = $176 << 31 >> 31;
         $sext = $173 << 24;
         $178 = $sext >> 24;
         $1051 = $177;$1052 = $178;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
         $185 = HEAP32[tempDoublePtr+4>>2]|0;
         $1049 = $184;$1050 = $185;
         label = 71;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $179 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $179 & 255;
         $1051 = 0;$1052 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        default: {
         $1051 = $1045;$1052 = $1044;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1051 = $1050;$1052 = $1049;
      label = 72;
     } else {
      $$be = $$lcssa299;$$be286 = $1049;$$be287 = $1050;$l$0$be = $37;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre268 = HEAP8[$$lcssa295>>0]|0;
     $187 = $$pre268;$195 = $1052;$222 = $1051;
    }
    $186 = $187 << 24 >> 24;
    $188 = ($st$0$lcssa296|0)!=(0);
    $189 = $186 & 15;
    $190 = ($189|0)==(3);
    $or$cond15 = $188 & $190;
    $191 = $186 & -33;
    $t$0 = $or$cond15 ? $191 : $186;
    $192 = $fl$1 & 8192;
    $193 = ($192|0)==(0);
    $194 = $fl$1 & -65537;
    $fl$1$ = $193 ? $fl$1 : $194;
    L98: do {
     switch ($t$0|0) {
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $195;HEAP32[tempDoublePtr+4>>2] = $222;$360 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $361 = ($222|0)<(0);
      if ($361) {
       $362 = -$360;
       $$013$i = $362;$pl$0$i = 1;$prefix$0$i = 29296;
      } else {
       $363 = $fl$1$ & 2048;
       $364 = ($363|0)==(0);
       if ($364) {
        $365 = $fl$1$ & 1;
        $366 = ($365|0)==(0);
        $$$i = $366 ? ((29296 + 1|0)) : ((29296 + 6|0));
        $$013$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
       } else {
        $$013$i = $360;$pl$0$i = 1;$prefix$0$i = ((29296 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$367 = HEAP32[tempDoublePtr>>2]|0;
      $368 = HEAP32[tempDoublePtr+4>>2]|0;
      $369 = $368 & 2146435072;
      $370 = ($369>>>0)<(2146435072);
      $371 = (0)<(0);
      $372 = ($369|0)==(2146435072);
      $373 = $372 & $371;
      $374 = $370 | $373;
      if (!($374)) {
       $375 = $t$0 & 32;
       $376 = ($375|0)!=(0);
       $377 = $376 ? 29320 : 29328;
       $378 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($378) {
        $379 = $376 ? 29336 : 29344;
        $pl$1$i = 0;$s1$0$i = $379;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $377;
       }
       $380 = (($pl$1$i) + 3)|0;
       $381 = $fl$1$ & 8192;
       $382 = ($381|0)==(0);
       $383 = ($w$1|0)>($380|0);
       $or$cond$i43$i = $382 & $383;
       if ($or$cond$i43$i) {
        $384 = (($w$1) - ($380))|0;
        $385 = ($384>>>0)>(256);
        $386 = $385 ? 256 : $384;
        _memset(($pad$i|0),32,($386|0))|0;
        $387 = ($384>>>0)>(255);
        if ($387) {
         $$01$i45$i = $384;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $388 = (($$01$i45$i) + -256)|0;
          $389 = ($388>>>0)>(255);
          if ($389) {
           $$01$i45$i = $388;
          } else {
           break;
          }
         }
         $390 = $384 & 255;
         $$0$lcssa$i47$i = $390;
        } else {
         $$0$lcssa$i47$i = $384;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $391 = $fl$1$ & 73728;
       $392 = ($391|0)==(8192);
       $or$cond$i50$i = $392 & $383;
       if ($or$cond$i50$i) {
        $393 = (($w$1) - ($380))|0;
        $394 = ($393>>>0)>(256);
        $395 = $394 ? 256 : $393;
        _memset(($pad$i|0),32,($395|0))|0;
        $396 = ($393>>>0)>(255);
        if ($396) {
         $$01$i52$i = $393;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $397 = (($$01$i52$i) + -256)|0;
          $398 = ($397>>>0)>(255);
          if ($398) {
           $$01$i52$i = $397;
          } else {
           break;
          }
         }
         $399 = $393 & 255;
         $$0$lcssa$i54$i = $399;
        } else {
         $$0$lcssa$i54$i = $393;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $383 ? $w$1 : $380;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $400 = (+_frexpl($$013$i,$e2$i));
      $401 = $400 * 2.0;
      $402 = $401 != 0.0;
      if ($402) {
       $403 = HEAP32[$e2$i>>2]|0;
       $404 = (($403) + -1)|0;
       HEAP32[$e2$i>>2] = $404;
      }
      $405 = $t$0 | 32;
      $406 = ($405|0)==(97);
      if ($406) {
       $407 = $t$0 & 32;
       $408 = ($407|0)==(0);
       $409 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $408 ? $prefix$0$i : $409;
       $410 = $pl$0$i | 2;
       $411 = ($p$0>>>0)>(11);
       $412 = (12 - ($p$0))|0;
       $re$0$i = $411 ? 0 : $412;
       $413 = ($re$0$i|0)==(0);
       do {
        if ($413) {
         $$1$i = $401;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $414 = (($re$1187$i) + -1)|0;
          $415 = $round$0186$i * 16.0;
          $416 = ($414|0)==(0);
          if ($416) {
           $$lcssa325 = $415;
           break;
          } else {
           $re$1187$i = $414;$round$0186$i = $415;
          }
         }
         $417 = HEAP8[$prefix$0$$i>>0]|0;
         $418 = ($417<<24>>24)==(45);
         if ($418) {
          $419 = -$401;
          $420 = $419 - $$lcssa325;
          $421 = $$lcssa325 + $420;
          $422 = -$421;
          $$1$i = $422;
          break;
         } else {
          $423 = $401 + $$lcssa325;
          $424 = $423 - $$lcssa325;
          $$1$i = $424;
          break;
         }
        }
       } while(0);
       $425 = HEAP32[$e2$i>>2]|0;
       $426 = ($425|0)<(0);
       $427 = (0 - ($425))|0;
       $428 = $426 ? $427 : $425;
       $429 = ($428|0)<(0);
       if ($429) {
        $430 = ($428|0)<(0);
        $431 = $430 << 31 >> 31;
        $$05$i$i = $7;$432 = $428;$433 = $431;
        while(1) {
         $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
         $435 = tempRet0;
         $436 = $434 | 48;
         $437 = $436&255;
         $438 = (($$05$i$i) + -1|0);
         HEAP8[$438>>0] = $437;
         $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
         $440 = tempRet0;
         $441 = ($433>>>0)>(9);
         $442 = ($432>>>0)>(4294967295);
         $443 = ($433|0)==(9);
         $444 = $443 & $442;
         $445 = $441 | $444;
         if ($445) {
          $$05$i$i = $438;$432 = $439;$433 = $440;
         } else {
          $$lcssa326 = $438;$1061 = $439;$1062 = $440;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa326;$$01$lcssa$off0$i$i = $1061;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $428;
       }
       $446 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($446) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $447 = (($y$03$i$i>>>0) % 10)&-1;
         $448 = $447 | 48;
         $449 = $448&255;
         $450 = (($$12$i$i) + -1|0);
         HEAP8[$450>>0] = $449;
         $451 = (($y$03$i$i>>>0) / 10)&-1;
         $452 = ($y$03$i$i>>>0)<(10);
         if ($452) {
          $$lcssa328 = $450;
          break;
         } else {
          $$12$i$i = $450;$y$03$i$i = $451;
         }
        }
        $$1$lcssa$i$i = $$lcssa328;
       }
       $453 = ($$1$lcssa$i$i|0)==($7|0);
       if ($453) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $454 = HEAP32[$e2$i>>2]|0;
       $455 = $454 >> 31;
       $456 = $455 & 2;
       $457 = (($456) + 43)|0;
       $458 = $457&255;
       $459 = (($estr$0$i) + -1|0);
       HEAP8[$459>>0] = $458;
       $460 = (($t$0) + 15)|0;
       $461 = $460&255;
       $462 = (($estr$0$i) + -2|0);
       HEAP8[$462>>0] = $461;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $463 = $fl$1$ & 8;
         $464 = ($463|0)==(0);
         if ($464) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $465 = (~~(($$2$us$us$i)));
           $466 = (29352 + ($465)|0);
           $467 = HEAP8[$466>>0]|0;
           $468 = $467&255;
           $469 = $468 | $407;
           $470 = $469&255;
           $471 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $470;
           $472 = (+($465|0));
           $473 = $$2$us$us$i - $472;
           $474 = $473 * 16.0;
           $475 = $471;
           $476 = (($475) - ($0))|0;
           $477 = ($476|0)!=(1);
           $notlhs$us$us$i = $474 == 0.0;
           $or$cond$i80 = $477 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $471;
           } else {
            $478 = (($s$0$us$us$i) + 2|0);
            HEAP8[$471>>0] = 46;
            $s$1$us$us$i = $478;
           }
           $479 = $474 != 0.0;
           if ($479) {
            $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $480 = (~~(($$2$us$i)));
           $481 = (29352 + ($480)|0);
           $482 = HEAP8[$481>>0]|0;
           $483 = $482&255;
           $484 = $483 | $407;
           $485 = $484&255;
           $486 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $485;
           $487 = (+($480|0));
           $488 = $$2$us$i - $487;
           $489 = $488 * 16.0;
           $490 = $486;
           $491 = (($490) - ($0))|0;
           $492 = ($491|0)==(1);
           if ($492) {
            $493 = (($s$0$us$i) + 2|0);
            HEAP8[$486>>0] = 46;
            $s$1$us$i = $493;
           } else {
            $s$1$us$i = $486;
           }
           $494 = $489 != 0.0;
           if ($494) {
            $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $495 = (~~(($$2$i)));
          $496 = (29352 + ($495)|0);
          $497 = HEAP8[$496>>0]|0;
          $498 = $497&255;
          $499 = $498 | $407;
          $500 = $499&255;
          $501 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $500;
          $502 = (+($495|0));
          $503 = $$2$i - $502;
          $504 = $503 * 16.0;
          $505 = $501;
          $506 = (($505) - ($0))|0;
          $507 = ($506|0)==(1);
          if ($507) {
           $508 = (($s$0$i) + 2|0);
           HEAP8[$501>>0] = 46;
           $s$1$i = $508;
          } else {
           $s$1$i = $501;
          }
          $509 = $504 != 0.0;
          if ($509) {
           $$2$i = $504;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $510 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $511 = (($11) + ($$pre308$i))|0;
       $512 = ($511|0)<($p$0|0);
       $or$cond277 = $510 & $512;
       $513 = $462;
       if ($or$cond277) {
        $514 = (($12) + ($p$0))|0;
        $515 = (($514) - ($513))|0;
        $l$0$i = $515;
       } else {
        $516 = (($10) - ($513))|0;
        $517 = (($516) + ($$pre308$i))|0;
        $l$0$i = $517;
       }
       $518 = (($l$0$i) + ($410))|0;
       $519 = $fl$1$ & 73728;
       $520 = ($519|0)==(0);
       $521 = ($w$1|0)>($518|0);
       $or$cond$i60$i = $520 & $521;
       if ($or$cond$i60$i) {
        $522 = (($w$1) - ($518))|0;
        $523 = ($522>>>0)>(256);
        $524 = $523 ? 256 : $522;
        _memset(($pad$i|0),32,($524|0))|0;
        $525 = ($522>>>0)>(255);
        if ($525) {
         $$01$i62$i = $522;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $526 = (($$01$i62$i) + -256)|0;
          $527 = ($526>>>0)>(255);
          if ($527) {
           $$01$i62$i = $526;
          } else {
           break;
          }
         }
         $528 = $522 & 255;
         $$0$lcssa$i64$i = $528;
        } else {
         $$0$lcssa$i64$i = $522;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$410,$f)|0);
       $529 = ($519|0)==(65536);
       $or$cond$i67$i = $529 & $521;
       if ($or$cond$i67$i) {
        $530 = (($w$1) - ($518))|0;
        $531 = ($530>>>0)>(256);
        $532 = $531 ? 256 : $530;
        _memset(($pad$i|0),48,($532|0))|0;
        $533 = ($530>>>0)>(255);
        if ($533) {
         $$01$i69$i = $530;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $534 = (($$01$i69$i) + -256)|0;
          $535 = ($534>>>0)>(255);
          if ($535) {
           $$01$i69$i = $534;
          } else {
           break;
          }
         }
         $536 = $530 & 255;
         $$0$lcssa$i71$i = $536;
        } else {
         $$0$lcssa$i71$i = $530;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $537 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$537,$f)|0);
       $538 = $462;
       $539 = (($9) - ($538))|0;
       $540 = (($l$0$i) - ($539))|0;
       $541 = (($540) - ($537))|0;
       $542 = ($541|0)>(0);
       if ($542) {
        $543 = ($541>>>0)>(256);
        $544 = $543 ? 256 : $541;
        _memset(($pad$i|0),48,($544|0))|0;
        $545 = ($541>>>0)>(255);
        if ($545) {
         $$01$i75$i = $541;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $546 = (($$01$i75$i) + -256)|0;
          $547 = ($546>>>0)>(255);
          if ($547) {
           $$01$i75$i = $546;
          } else {
           break;
          }
         }
         $548 = $541 & 255;
         $$0$lcssa$i77$i = $548;
        } else {
         $$0$lcssa$i77$i = $541;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($462,$539,$f)|0);
       $549 = ($519|0)==(8192);
       $or$cond$i80$i = $549 & $521;
       if ($or$cond$i80$i) {
        $550 = (($w$1) - ($518))|0;
        $551 = ($550>>>0)>(256);
        $552 = $551 ? 256 : $550;
        _memset(($pad$i|0),32,($552|0))|0;
        $553 = ($550>>>0)>(255);
        if ($553) {
         $$01$i82$i = $550;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $554 = (($$01$i82$i) + -256)|0;
          $555 = ($554>>>0)>(255);
          if ($555) {
           $$01$i82$i = $554;
          } else {
           break;
          }
         }
         $556 = $550 & 255;
         $$0$lcssa$i84$i = $556;
        } else {
         $$0$lcssa$i84$i = $550;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $521 ? $w$1 : $518;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $557 = ($p$0|0)<(0);
      $$p$i = $557 ? 6 : $p$0;
      if ($402) {
       $558 = $401 * 268435456.0;
       $559 = HEAP32[$e2$i>>2]|0;
       $560 = (($559) + -28)|0;
       HEAP32[$e2$i>>2] = $560;
       $$3$i = $558;$561 = $560;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $401;$561 = $$pre$i;
      }
      $562 = ($561|0)<(0);
      $$39$i = $562 ? $big$i : $13;
      $563 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $564 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $564;
       $565 = (($z$0$i) + 4|0);
       $566 = (+($564>>>0));
       $567 = $$4$i - $566;
       $568 = $567 * 1.0E+9;
       $569 = $568 != 0.0;
       if ($569) {
        $$4$i = $568;$z$0$i = $565;
       } else {
        $$lcssa302 = $565;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $570 = ($$pr$i|0)>(0);
      if ($570) {
       $571 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa302;
       while(1) {
        $572 = ($571|0)>(29);
        $573 = $572 ? 29 : $571;
        $d$0253$i = (($z$1260$i) + -4|0);
        $574 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($574) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $584 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $575 = HEAP32[$d$0255$i>>2]|0;
           $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
           $577 = tempRet0;
           $578 = (_i64Add(($576|0),($577|0),($carry$0254$i|0),0)|0);
           $579 = tempRet0;
           $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
           $581 = tempRet0;
           HEAP32[$d$0255$i>>2] = $580;
           $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
           $583 = tempRet0;
           $d$0$i = (($584) + -8|0);
           $585 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($585) {
            $$lcssa303 = $582;
            break;
           } else {
            $584$phi = $d$0255$i;$carry$0254$i = $582;$d$0255$i = $d$0$i;$584 = $584$phi;
           }
          }
          $586 = ($$lcssa303|0)==(0);
          if ($586) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $587 = (($a$1261$i) + -4|0);
          HEAP32[$587>>2] = $$lcssa303;
          $a$2$ph$i = $587;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $588 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($588)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $589 = (($z$2$i) + -4|0);
         $590 = HEAP32[$589>>2]|0;
         $591 = ($590|0)==(0);
         if ($591) {
          $z$2$i = $589;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $592 = HEAP32[$e2$i>>2]|0;
        $593 = (($592) - ($573))|0;
        HEAP32[$e2$i>>2] = $593;
        $594 = ($593|0)>(0);
        if ($594) {
         $571 = $593;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa304 = $593;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa304;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa302;
      }
      $595 = ($$pr154$i|0)<(0);
      do {
       if ($595) {
        $596 = (($$p$i) + 25)|0;
        $597 = (($596|0) / 9)&-1;
        $598 = (($597) + 1)|0;
        $599 = ($405|0)==(102);
        if ($599) {
         $600 = (($$39$i) + ($598<<2)|0);
         $601 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $602 = ($601|0)<(-9);
          $603 = (0 - ($601))|0;
          $$26$us$i = $602 ? 9 : $603;
          $604 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($604) {
            $629 = 1 << $$26$us$i;
            $622 = (($629) + -1)|0;
            $626 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $620 = HEAP32[$d$1241$us$i>>2]|0;
             $621 = $620 & $622;
             $623 = $620 >>> $$26$us$i;
             $624 = (($623) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $624;
             $625 = Math_imul($621, $626)|0;
             $627 = (($d$1241$us$i) + 4|0);
             $628 = ($627>>>0)<($z$3247$us$i>>>0);
             if ($628) {
              $carry3$0242$us$i = $625;$d$1241$us$i = $627;
             } else {
              $$lcssa306 = $625;
              break;
             }
            }
            $608 = HEAP32[$a$3248$us$i>>2]|0;
            $609 = ($608|0)==(0);
            $610 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $609 ? $610 : $a$3248$us$i;
            $611 = ($$lcssa306|0)==(0);
            if ($611) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $612 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa306;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $612;
           } else {
            $605 = HEAP32[$a$3248$us$i>>2]|0;
            $606 = ($605|0)==(0);
            $607 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $606 ? $607 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $613 = $z$4$us$i;
          $614 = (($613) - ($563))|0;
          $615 = $614 >> 2;
          $616 = ($615|0)>($598|0);
          $$z$4$us$i = $616 ? $600 : $z$4$us$i;
          $617 = HEAP32[$e2$i>>2]|0;
          $618 = (($617) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $618;
          $619 = ($618|0)<(0);
          if ($619) {
           $601 = $618;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $630 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $631 = ($630|0)<(-9);
         $632 = (0 - ($630))|0;
         $$26$i = $631 ? 9 : $632;
         $633 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($633) {
           $637 = 1 << $$26$i;
           $638 = (($637) + -1)|0;
           $639 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $640 = HEAP32[$d$1241$i>>2]|0;
            $641 = $640 & $638;
            $642 = $640 >>> $$26$i;
            $643 = (($642) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $643;
            $644 = Math_imul($641, $639)|0;
            $645 = (($d$1241$i) + 4|0);
            $646 = ($645>>>0)<($z$3247$i>>>0);
            if ($646) {
             $carry3$0242$i = $644;$d$1241$i = $645;
            } else {
             $$lcssa305 = $644;
             break;
            }
           }
           $647 = HEAP32[$a$3248$i>>2]|0;
           $648 = ($647|0)==(0);
           $649 = (($a$3248$i) + 4|0);
           $$a$3$i = $648 ? $649 : $a$3248$i;
           $650 = ($$lcssa305|0)==(0);
           if ($650) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $651 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa305;
           $$a$3312$i = $$a$3$i;$z$4$i = $651;
          } else {
           $634 = HEAP32[$a$3248$i>>2]|0;
           $635 = ($634|0)==(0);
           $636 = (($a$3248$i) + 4|0);
           $$a$3311$i = $635 ? $636 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $652 = $z$4$i;
         $653 = $$a$3312$i;
         $654 = (($652) - ($653))|0;
         $655 = $654 >> 2;
         $656 = ($655|0)>($598|0);
         if ($656) {
          $657 = (($$a$3312$i) + ($598<<2)|0);
          $z$5$i = $657;
         } else {
          $z$5$i = $z$4$i;
         }
         $658 = HEAP32[$e2$i>>2]|0;
         $659 = (($658) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $659;
         $660 = ($659|0)<(0);
         if ($660) {
          $630 = $659;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $661 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($661) {
        $662 = $a$3$lcssa$i;
        $663 = (($563) - ($662))|0;
        $664 = $663 >> 2;
        $665 = ($664*9)|0;
        $666 = HEAP32[$a$3$lcssa$i>>2]|0;
        $667 = ($666>>>0)<(10);
        if ($667) {
         $e$1$i = $665;
         break;
        }
        $e$0237$i = $665;$i$0236$i = 10;
        while(1) {
         $668 = ($i$0236$i*10)|0;
         $669 = (($e$0237$i) + 1)|0;
         $670 = ($666>>>0)<($668>>>0);
         if ($670) {
          $$lcssa307 = $669;
          break;
         } else {
          $e$0237$i = $669;$i$0236$i = $668;
         }
        }
        $e$1$i = $$lcssa307;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $671 = ($405|0)!=(102);
      $672 = $671 ? $e$1$i : 0;
      $673 = (($$p$i) - ($672))|0;
      $674 = ($405|0)==(103);
      $675 = ($$p$i|0)!=(0);
      $$27$i = $674 & $675;
      $$neg159$i = $$27$i << 31 >> 31;
      $676 = (($673) + ($$neg159$i))|0;
      $677 = $z$3$lcssa$i;
      $678 = (($677) - ($563))|0;
      $679 = $678 >> 2;
      $680 = ($679*9)|0;
      $681 = (($680) + -9)|0;
      $682 = ($676|0)<($681|0);
      if ($682) {
       $683 = (($676) + 9216)|0;
       $684 = (($683|0) / 9)&-1;
       $$sum$i = (($684) + -1023)|0;
       $685 = (($$39$i) + ($$sum$i<<2)|0);
       $686 = (($683|0) % 9)&-1;
       $j$0229$i = (($686) + 1)|0;
       $687 = ($j$0229$i|0)<(9);
       if ($687) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $688 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa308 = $688;
          break;
         } else {
          $i$1230$i = $688;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa308;
       } else {
        $i$1$lcssa$i = 10;
       }
       $689 = HEAP32[$685>>2]|0;
       $690 = (($689>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $691 = ($690|0)==(0);
       if ($691) {
        $$sum21$i = (($684) + -1022)|0;
        $692 = (($$39$i) + ($$sum21$i<<2)|0);
        $693 = ($692|0)==($z$3$lcssa$i|0);
        if ($693) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $694 = (($689>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $695 = $694 & 1;
         $696 = ($695|0)==(0);
         $$28$i = $696 ? 9007199254740992.0 : 9007199254740994.0;
         $697 = (($i$1$lcssa$i|0) / 2)&-1;
         $698 = ($690>>>0)<($697>>>0);
         do {
          if ($698) {
           $small$0$i = 0.5;
          } else {
           $699 = ($690|0)==($697|0);
           if ($699) {
            $$sum22$i = (($684) + -1022)|0;
            $700 = (($$39$i) + ($$sum22$i<<2)|0);
            $701 = ($700|0)==($z$3$lcssa$i|0);
            if ($701) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $702 = ($pl$0$i|0)==(0);
         do {
          if ($702) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $703 = HEAP8[$prefix$0$i>>0]|0;
           $704 = ($703<<24>>24)==(45);
           if (!($704)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $705 = -$$28$i;
           $706 = -$small$0$i;
           $round6$1$i = $705;$small$1$i = $706;
          }
         } while(0);
         $707 = (($689) - ($690))|0;
         HEAP32[$685>>2] = $707;
         $708 = $round6$1$i + $small$1$i;
         $709 = $708 != $round6$1$i;
         if (!($709)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
          break;
         }
         $710 = (($707) + ($i$1$lcssa$i))|0;
         HEAP32[$685>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $685;
          while(1) {
           $712 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $713 = ($712>>>0)<($a$5223$i>>>0);
           if ($713) {
            $714 = (($a$5223$i) + -4|0);
            HEAP32[$714>>2] = 0;
            $a$6$i = $714;
           } else {
            $a$6$i = $a$5223$i;
           }
           $715 = HEAP32[$712>>2]|0;
           $716 = (($715) + 1)|0;
           HEAP32[$712>>2] = $716;
           $717 = ($716>>>0)>(999999999);
           if ($717) {
            $a$5223$i = $a$6$i;$d$2222$i = $712;
           } else {
            $$lcssa309 = $712;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa309;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $685;
         }
         $718 = $a$5$lcssa$i;
         $719 = (($563) - ($718))|0;
         $720 = $719 >> 2;
         $721 = ($720*9)|0;
         $722 = HEAP32[$a$5$lcssa$i>>2]|0;
         $723 = ($722>>>0)<(10);
         if ($723) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $721;
          break;
         }
         $e$2218$i = $721;$i$2217$i = 10;
         while(1) {
          $724 = ($i$2217$i*10)|0;
          $725 = (($e$2218$i) + 1)|0;
          $726 = ($722>>>0)<($724>>>0);
          if ($726) {
           $$lcssa310 = $725;
           break;
          } else {
           $e$2218$i = $725;$i$2217$i = $724;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa310;
        }
       } while(0);
       $727 = (($d$3$i) + 4|0);
       $728 = ($z$3$lcssa$i>>>0)>($727>>>0);
       $$z$3$i = $728 ? $727 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $729 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $730 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($730)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $731 = (($z$6$i) + -4|0);
       $732 = HEAP32[$731>>2]|0;
       $733 = ($732|0)==(0);
       if ($733) {
        $z$6$i = $731;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($674) {
        $734 = ($$p$i|0)==(0);
        $735 = $734&1;
        $$$p$i = (($735) + ($$p$i))|0;
        $736 = ($$$p$i|0)>($e$4$ph$i|0);
        $737 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $736 & $737;
        if ($or$cond6$i) {
         $738 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $739 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $738;$$216$i = $739;
        } else {
         $740 = (($t$0) + -2)|0;
         $741 = (($$$p$i) + -1)|0;
         $$019$i = $740;$$216$i = $741;
        }
        $742 = $fl$1$ & 8;
        $743 = ($742|0)==(0);
        if (!($743)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $744 = (($z$6$i$lcssa) + -4|0);
          $745 = HEAP32[$744>>2]|0;
          $746 = ($745|0)==(0);
          if ($746) {
           $j$2$i = 9;
           break;
          }
          $747 = (($745>>>0) % 10)&-1;
          $748 = ($747|0)==(0);
          if (!($748)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $749 = ($i$3213$i*10)|0;
           $750 = (($j$1214$i) + 1)|0;
           $751 = (($745>>>0) % ($749>>>0))&-1;
           $752 = ($751|0)==(0);
           if ($752) {
            $i$3213$i = $749;$j$1214$i = $750;
           } else {
            $$lcssa311 = $750;
            break;
           }
          }
          $j$2$i = $$lcssa311;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $753 = $$019$i | 32;
        $754 = ($753|0)==(102);
        $755 = $z$6$i$lcssa;
        $756 = (($755) - ($563))|0;
        $757 = $756 >> 2;
        $758 = ($757*9)|0;
        $759 = (($758) + -9)|0;
        if ($754) {
         $760 = (($759) - ($j$2$i))|0;
         $761 = ($760|0)<(0);
         $$29$i = $761 ? 0 : $760;
         $762 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $762 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $763 = (($759) + ($e$4$ph$i))|0;
         $764 = (($763) - ($j$2$i))|0;
         $765 = ($764|0)<(0);
         $$31$i = $765 ? 0 : $764;
         $766 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $766 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $767 = ($$317$i|0)!=(0);
      if ($767) {
       $771 = 1;
      } else {
       $768 = $fl$1$ & 8;
       $769 = ($768|0)!=(0);
       $771 = $769;
      }
      $770 = $771&1;
      $772 = $$120$i | 32;
      $773 = ($772|0)==(102);
      if ($773) {
       $774 = ($e$4$ph$i|0)>(0);
       $775 = $774 ? $e$4$ph$i : 0;
       $$pn$i = $775;$estr$2$i = 0;
      } else {
       $776 = ($e$4$ph$i|0)<(0);
       $777 = $776 ? $729 : $e$4$ph$i;
       $778 = ($777|0)<(0);
       if ($778) {
        $779 = ($777|0)<(0);
        $780 = $779 << 31 >> 31;
        $$05$i87$i = $7;$781 = $777;$782 = $780;
        while(1) {
         $783 = (___uremdi3(($781|0),($782|0),10,0)|0);
         $784 = tempRet0;
         $785 = $783 | 48;
         $786 = $785&255;
         $787 = (($$05$i87$i) + -1|0);
         HEAP8[$787>>0] = $786;
         $788 = (___udivdi3(($781|0),($782|0),10,0)|0);
         $789 = tempRet0;
         $790 = ($782>>>0)>(9);
         $791 = ($781>>>0)>(4294967295);
         $792 = ($782|0)==(9);
         $793 = $792 & $791;
         $794 = $790 | $793;
         if ($794) {
          $$05$i87$i = $787;$781 = $788;$782 = $789;
         } else {
          $$lcssa312 = $787;$1063 = $788;$1064 = $789;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa312;$$01$lcssa$off0$i93$i = $1063;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $777;
       }
       $795 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($795) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $796 = (($y$03$i94$i>>>0) % 10)&-1;
         $797 = $796 | 48;
         $798 = $797&255;
         $799 = (($$12$i95$i) + -1|0);
         HEAP8[$799>>0] = $798;
         $800 = (($y$03$i94$i>>>0) / 10)&-1;
         $801 = ($y$03$i94$i>>>0)<(10);
         if ($801) {
          $$lcssa314 = $799;
          break;
         } else {
          $$12$i95$i = $799;$y$03$i94$i = $800;
         }
        }
        $estr$1$ph$i = $$lcssa314;
       }
       $802 = $estr$1$ph$i;
       $803 = (($9) - ($802))|0;
       $804 = ($803|0)<(2);
       if ($804) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $805 = (($estr$1209$i) + -1|0);
         HEAP8[$805>>0] = 48;
         $806 = $805;
         $807 = (($9) - ($806))|0;
         $808 = ($807|0)<(2);
         if ($808) {
          $estr$1209$i = $805;
         } else {
          $$lcssa315 = $805;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa315;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $809 = $e$4$ph$i >> 31;
       $810 = $809 & 2;
       $811 = (($810) + 43)|0;
       $812 = $811&255;
       $813 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$813>>0] = $812;
       $814 = $$120$i&255;
       $815 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$815>>0] = $814;
       $816 = $815;
       $817 = (($9) - ($816))|0;
       $$pn$i = $817;$estr$2$i = $815;
      }
      $818 = (($pl$0$i) + 1)|0;
      $819 = (($818) + ($$317$i))|0;
      $l$1$i = (($819) + ($770))|0;
      $820 = (($l$1$i) + ($$pn$i))|0;
      $821 = $fl$1$ & 73728;
      $822 = ($821|0)==(0);
      $823 = ($w$1|0)>($820|0);
      $or$cond$i101$i = $822 & $823;
      if ($or$cond$i101$i) {
       $824 = (($w$1) - ($820))|0;
       $825 = ($824>>>0)>(256);
       $826 = $825 ? 256 : $824;
       _memset(($pad$i|0),32,($826|0))|0;
       $827 = ($824>>>0)>(255);
       if ($827) {
        $$01$i103$i = $824;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $828 = (($$01$i103$i) + -256)|0;
         $829 = ($828>>>0)>(255);
         if ($829) {
          $$01$i103$i = $828;
         } else {
          break;
         }
        }
        $830 = $824 & 255;
        $$0$lcssa$i105$i = $830;
       } else {
        $$0$lcssa$i105$i = $824;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $831 = ($821|0)==(65536);
      $or$cond$i108$i = $831 & $823;
      if ($or$cond$i108$i) {
       $832 = (($w$1) - ($820))|0;
       $833 = ($832>>>0)>(256);
       $834 = $833 ? 256 : $832;
       _memset(($pad$i|0),48,($834|0))|0;
       $835 = ($832>>>0)>(255);
       if ($835) {
        $$01$i110$i = $832;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $836 = (($$01$i110$i) + -256)|0;
         $837 = ($836>>>0)>(255);
         if ($837) {
          $$01$i110$i = $836;
         } else {
          break;
         }
        }
        $838 = $832 & 255;
        $$0$lcssa$i112$i = $838;
       } else {
        $$0$lcssa$i112$i = $832;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($773) {
        $839 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $839 ? $$39$i : $a$8$ph$i;
        $840 = $563 ^ -1;
        $841 = $a$8$ph294$i ^ -1;
        $842 = ($840>>>0)>($841>>>0);
        $umax$i = $842 ? $840 : $841;
        $843 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $844 = ($843>>>0)>($uglygep296$i>>>0);
        $umax297$i = $844 ? $843 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $845 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $846 = HEAP32[$d$4199$i>>2]|0;
         $847 = ($846|0)==(0);
         if ($847) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $846;
          while(1) {
           $848 = (($y$03$i117$i>>>0) % 10)&-1;
           $849 = $848 | 48;
           $850 = $849&255;
           $851 = (($$12$i118$i) + -1|0);
           HEAP8[$851>>0] = $850;
           $852 = (($y$03$i117$i>>>0) / 10)&-1;
           $853 = ($y$03$i117$i>>>0)<(10);
           if ($853) {
            $$lcssa319 = $851;
            break;
           } else {
            $$12$i118$i = $851;$y$03$i117$i = $852;
           }
          }
          $$1$lcssa$i120$i = $$lcssa319;
         }
         $854 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($854) {
           $858 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($858)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $855 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($855)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $856 = (($s7$0196$i) + -1|0);
            HEAP8[$856>>0] = 48;
            $857 = ($856>>>0)>($buf$i>>>0);
            if ($857) {
             $s7$0196$i = $856;
            } else {
             $$lcssa320 = $856;
             break;
            }
           }
           $s7$1$i = $$lcssa320;
          }
         } while(0);
         $859 = $s7$1$i;
         $860 = (($15) - ($859))|0;
         (___fwritex($s7$1$i,$860,$f)|0);
         $861 = (($d$4199$i) + 4|0);
         $862 = ($861>>>0)>($$39$i>>>0);
         if ($862) {
          $$lcssa321 = $861;
          break;
         } else {
          $d$4199$i = $861;
         }
        }
        $863 = $uglygep300301$i & -4;
        $864 = (($863) + ($845))|0;
        $865 = $864;
        $$not$i = $767 ^ 1;
        $866 = $fl$1$ & 8;
        $867 = ($866|0)==(0);
        $or$cond35$i = $867 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(29368,1,$f)|0);
        }
        $868 = ($$lcssa321>>>0)<($z$6$i$lcssa>>>0);
        $869 = ($$317$i|0)>(0);
        $or$cond10191$i = $868 & $869;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$884 = $865;$d$5192$i = $$lcssa321;
         while(1) {
          $870 = HEAP32[$d$5192$i>>2]|0;
          $871 = ($870|0)==(0);
          if ($871) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $870;
           while(1) {
            $872 = (($y$03$i126$i>>>0) % 10)&-1;
            $873 = $872 | 48;
            $874 = $873&255;
            $875 = (($$12$i127$i) + -1|0);
            HEAP8[$875>>0] = $874;
            $876 = (($y$03$i126$i>>>0) / 10)&-1;
            $877 = ($y$03$i126$i>>>0)<(10);
            if ($877) {
             $$lcssa322 = $875;
             break;
            } else {
             $$12$i127$i = $875;$y$03$i126$i = $876;
            }
           }
           $878 = ($$lcssa322>>>0)>($buf$i>>>0);
           if ($878) {
            $s8$0188$i$ph = $$lcssa322;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa322;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $879 = (($s8$0188$i) + -1|0);
            HEAP8[$879>>0] = 48;
            $880 = ($879>>>0)>($buf$i>>>0);
            if ($880) {
             $s8$0188$i = $879;
            } else {
             $$lcssa323 = $879;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa323;
          }
          $881 = ($$418193$i|0)>(9);
          $882 = $881 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$882,$f)|0);
          $883 = (($884) + 8|0);
          $885 = (($$418193$i) + -9)|0;
          $886 = ($883>>>0)<($z$6$i$lcssa>>>0);
          $887 = ($885|0)>(0);
          $or$cond10$i = $886 & $887;
          if ($or$cond10$i) {
           $884$phi = $d$5192$i;$$418193$i = $885;$d$5192$i = $883;$884 = $884$phi;
          } else {
           $$lcssa324 = $885;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa324;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $888 = ($$418$lcssa$i|0)>(0);
        if (!($888)) {
         break;
        }
        $889 = ($$418$lcssa$i>>>0)>(256);
        $890 = $889 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($890|0))|0;
        $891 = ($$418$lcssa$i>>>0)>(255);
        if ($891) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $892 = (($$01$i134$i) + -256)|0;
          $893 = ($892>>>0)>(255);
          if ($893) {
           $$01$i134$i = $892;
          } else {
           break;
          }
         }
         $894 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $894;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $895 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $895;
        $896 = ($$317$i|0)>(-1);
        do {
         if ($896) {
          $897 = $fl$1$ & 8;
          $898 = ($897|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $899 = HEAP32[$d$6204$i>>2]|0;
           $900 = ($899|0)==(0);
           if ($900) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $899;
            while(1) {
             $901 = (($y$03$i141$i>>>0) % 10)&-1;
             $902 = $901 | 48;
             $903 = $902&255;
             $904 = (($$12$i142$i) + -1|0);
             HEAP8[$904>>0] = $903;
             $905 = (($y$03$i141$i>>>0) / 10)&-1;
             $906 = ($y$03$i141$i>>>0)<(10);
             if ($906) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa316 = $904;
              break;
             } else {
              $$12$i142$i = $904;$y$03$i141$i = $905;
             }
            }
            $907 = ($$lcssa316|0)==($14|0);
            if ($907) {
             label = 379;
            } else {
             $1065 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa316;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1065 = $14;$s9$0$i = $16;
           }
           $908 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($908) {
             (___fwritex($s9$0$i,1,$f)|0);
             $912 = ($$5205$i|0)<(1);
             $or$cond37$i = $912 & $898;
             if ($or$cond37$i) {
              $s9$2$i = $1065;
              break;
             }
             (___fwritex(29368,1,$f)|0);
             $s9$2$i = $1065;
            } else {
             $909 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($909)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $910 = (($s9$1200$i) + -1|0);
              HEAP8[$910>>0] = 48;
              $911 = ($910>>>0)>($buf$i>>>0);
              if ($911) {
               $s9$1200$i = $910;
              } else {
               $$lcssa317 = $910;
               break;
              }
             }
             $s9$2$i = $$lcssa317;
            }
           } while(0);
           $913 = $s9$2$i;
           $914 = (($15) - ($913))|0;
           $915 = ($$5205$i|0)>($914|0);
           $$$5$i = $915 ? $914 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $916 = (($$5205$i) - ($914))|0;
           $917 = (($d$6204$i) + 4|0);
           $918 = ($917>>>0)<($z$6$$i>>>0);
           $919 = ($916|0)>(-1);
           $or$cond12$i = $918 & $919;
           if ($or$cond12$i) {
            $$5205$i = $916;$d$6204$i = $917;
           } else {
            $$lcssa318 = $916;
            break;
           }
          }
          $920 = ($$lcssa318|0)>(0);
          if (!($920)) {
           break;
          }
          $921 = ($$lcssa318>>>0)>(256);
          $922 = $921 ? 256 : $$lcssa318;
          _memset(($pad$i|0),48,($922|0))|0;
          $923 = ($$lcssa318>>>0)>(255);
          if ($923) {
           $$01$i149$i = $$lcssa318;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $924 = (($$01$i149$i) + -256)|0;
            $925 = ($924>>>0)>(255);
            if ($925) {
             $$01$i149$i = $924;
            } else {
             break;
            }
           }
           $926 = $$lcssa318 & 255;
           $$0$lcssa$i151$i = $926;
          } else {
           $$0$lcssa$i151$i = $$lcssa318;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $927 = $estr$2$i;
        $928 = (($9) - ($927))|0;
        (___fwritex($estr$2$i,$928,$f)|0);
       }
      } while(0);
      $929 = ($821|0)==(8192);
      $or$cond$i$i = $929 & $823;
      if ($or$cond$i$i) {
       $930 = (($w$1) - ($820))|0;
       $931 = ($930>>>0)>(256);
       $932 = $931 ? 256 : $930;
       _memset(($pad$i|0),32,($932|0))|0;
       $933 = ($930>>>0)>(255);
       if ($933) {
        $$01$i$i = $930;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $934 = (($$01$i$i) + -256)|0;
         $935 = ($934>>>0)>(255);
         if ($935) {
          $$01$i$i = $934;
         } else {
          break;
         }
        }
        $936 = $930 & 255;
        $$0$lcssa$i$i = $936;
       } else {
        $$0$lcssa$i$i = $930;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $823 ? $w$1 : $820;
      $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 99:  {
      $309 = $195&255;
      HEAP8[$4>>0] = $309;
      $1053 = $195;$1054 = $222;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 29272;$z$2 = $2;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $195;
      HEAP32[$5>>2] = 0;
      $1057 = $wc;$1058 = $6;$p$4272 = -1;
      label = 115;
      break;
     }
     case 83:  {
      $321 = $195;
      $322 = ($p$0|0)==(0);
      if ($322) {
       $1059 = $195;$1060 = $321;$i$0$lcssa273 = 0;
       label = 120;
      } else {
       $1057 = $321;$1058 = $195;$p$4272 = $p$0;
       label = 115;
      }
      break;
     }
     case 112:  {
      $217 = ($p$0>>>0)>(8);
      $218 = $217 ? $p$0 : 8;
      $219 = $fl$1$ | 8;
      $fl$3 = $219;$p$1 = $218;$t$1 = 120;
      label = 83;
      break;
     }
     case 111:  {
      $243 = ($195|0)==(0);
      $244 = ($222|0)==(0);
      $245 = $243 & $244;
      if ($245) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$247 = $195;$251 = $222;
       while(1) {
        $246 = $247 & 7;
        $248 = $246 | 48;
        $249 = $248&255;
        $250 = (($$03$i49) + -1|0);
        HEAP8[$250>>0] = $249;
        $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
        $253 = tempRet0;
        $254 = ($252|0)==(0);
        $255 = ($253|0)==(0);
        $256 = $254 & $255;
        if ($256) {
         $$lcssa332 = $250;
         break;
        } else {
         $$03$i49 = $250;$247 = $252;$251 = $253;
        }
       }
       $$0$lcssa$i52 = $$lcssa332;
      }
      $257 = $fl$1$ & 8;
      $258 = ($257|0)==(0);
      $or$cond19 = $258 | $245;
      $$25 = $or$cond19 ? 29272 : ((29272 + 5|0));
      $259 = $or$cond19&1;
      $$26 = $259 ^ 1;
      $297 = $195;$299 = $222;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 105: case 100:  {
      $260 = ($222|0)<(0);
      if ($260) {
       $261 = (_i64Subtract(0,0,($195|0),($222|0))|0);
       $262 = tempRet0;
       $267 = $262;$269 = $261;$pl$0 = 1;$prefix$0 = 29272;
       label = 97;
       break L98;
      }
      $263 = $fl$1$ & 2048;
      $264 = ($263|0)==(0);
      if ($264) {
       $265 = $fl$1$ & 1;
       $266 = ($265|0)==(0);
       $$ = $266 ? 29272 : ((29272 + 2|0));
       $267 = $222;$269 = $195;$pl$0 = $265;$prefix$0 = $$;
       label = 97;
      } else {
       $267 = $222;$269 = $195;$pl$0 = 1;$prefix$0 = ((29272 + 1|0));
       label = 97;
      }
      break;
     }
     case 109:  {
      $310 = (___errno_location()|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = (_strerror(($311|0))|0);
      $a$1 = $312;
      label = 110;
      break;
     }
     case 117:  {
      $267 = $222;$269 = $195;$pl$0 = 0;$prefix$0 = 29272;
      label = 97;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 115:  {
      $313 = $195;
      $314 = ($195|0)==(0);
      $$21 = $314 ? 29288 : $313;
      $a$1 = $$21;
      label = 110;
      break;
     }
     case 110:  {
      switch ($st$0$lcssa296|0) {
      case 6:  {
       $209 = $195;
       HEAP32[$209>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $196 = $195;
       HEAP32[$196>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $197 = $195;
       HEAP32[$197>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $198 = ($cnt$1|0)<(0);
       $199 = $198 << 31 >> 31;
       $200 = $195;
       $201 = $200;
       $202 = $201;
       HEAP32[$202>>2] = $cnt$1;
       $203 = (($201) + 4)|0;
       $204 = $203;
       HEAP32[$204>>2] = $199;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $210 = ($cnt$1|0)<(0);
       $211 = $210 << 31 >> 31;
       $212 = $195;
       $213 = $212;
       $214 = $213;
       HEAP32[$214>>2] = $cnt$1;
       $215 = (($213) + 4)|0;
       $216 = $215;
       HEAP32[$216>>2] = $211;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $205 = $cnt$1&65535;
       $206 = $195;
       HEAP16[$206>>1] = $205;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $207 = $cnt$1&255;
       $208 = $195;
       HEAP8[$208>>0] = $207;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     default: {
      $1053 = $195;$1054 = $222;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 29272;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $220 = $t$1 & 32;
      $221 = ($195|0)==(0);
      $223 = ($222|0)==(0);
      $224 = $221 & $223;
      if ($224) {
       $297 = $195;$299 = $222;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 29272;
       label = 105;
      } else {
       $$012$i = $2;$226 = $195;$233 = $222;
       while(1) {
        $225 = $226 & 15;
        $227 = (29352 + ($225)|0);
        $228 = HEAP8[$227>>0]|0;
        $229 = $228&255;
        $230 = $229 | $220;
        $231 = $230&255;
        $232 = (($$012$i) + -1|0);
        HEAP8[$232>>0] = $231;
        $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(0);
        $238 = $236 & $237;
        if ($238) {
         $$lcssa333 = $232;
         break;
        } else {
         $$012$i = $232;$226 = $234;$233 = $235;
        }
       }
       $239 = $fl$3 & 8;
       $240 = ($239|0)==(0);
       if ($240) {
        $297 = $195;$299 = $222;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 29272;
        label = 105;
       } else {
        $241 = $t$1 >> 4;
        $242 = (29272 + ($241)|0);
        $297 = $195;$299 = $222;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $268 = ($267>>>0)>(0);
      $270 = ($269>>>0)>(4294967295);
      $271 = ($267|0)==(0);
      $272 = $271 & $270;
      $273 = $268 | $272;
      if ($273) {
       $$05$i = $2;$274 = $269;$275 = $267;
       while(1) {
        $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
        $277 = tempRet0;
        $278 = $276 | 48;
        $279 = $278&255;
        $280 = (($$05$i) + -1|0);
        HEAP8[$280>>0] = $279;
        $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
        $282 = tempRet0;
        $283 = ($275>>>0)>(9);
        $284 = ($274>>>0)>(4294967295);
        $285 = ($275|0)==(9);
        $286 = $285 & $284;
        $287 = $283 | $286;
        if ($287) {
         $$05$i = $280;$274 = $281;$275 = $282;
        } else {
         $$lcssa329 = $280;$1055 = $281;$1056 = $282;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa329;$$01$lcssa$off0$i = $1055;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $269;
      }
      $288 = ($$01$lcssa$off0$i|0)==(0);
      if ($288) {
       $297 = $269;$299 = $267;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $289 = (($y$03$i>>>0) % 10)&-1;
        $290 = $289 | 48;
        $291 = $290&255;
        $292 = (($$12$i) + -1|0);
        HEAP8[$292>>0] = $291;
        $293 = (($y$03$i>>>0) / 10)&-1;
        $294 = ($y$03$i>>>0)<(10);
        if ($294) {
         $$lcssa331 = $292;
         break;
        } else {
         $$12$i = $292;$y$03$i = $293;
        }
       }
       $297 = $269;$299 = $267;$a$0 = $$lcssa331;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $315 = (_memchr($a$1,0,$p$0)|0);
      $316 = ($315|0)==(0|0);
      if ($316) {
       $317 = (($a$1) + ($p$0)|0);
       $1053 = $195;$1054 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 29272;$z$2 = $317;
       break;
      } else {
       $318 = $315;
       $319 = $a$1;
       $320 = (($318) - ($319))|0;
       $1053 = $195;$1054 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 29272;$z$2 = $315;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1057;
      while(1) {
       $323 = HEAP32[$ws$0176>>2]|0;
       $324 = ($323|0)==(0);
       if ($324) {
        $i$0$lcssa = $i$0175;$l$2 = $l$1174;
        break;
       }
       $325 = (_wctomb($mb,$323)|0);
       $326 = ($325|0)<(0);
       $327 = (($p$4272) - ($i$0175))|0;
       $328 = ($325>>>0)>($327>>>0);
       $or$cond23 = $326 | $328;
       if ($or$cond23) {
        $i$0$lcssa = $i$0175;$l$2 = $325;
        break;
       }
       $329 = (($ws$0176) + 4|0);
       $330 = (($325) + ($i$0175))|0;
       $331 = ($p$4272>>>0)>($330>>>0);
       if ($331) {
        $i$0175 = $330;$l$1174 = $325;$ws$0176 = $329;
       } else {
        $i$0$lcssa = $330;$l$2 = $325;
        break;
       }
      }
      $332 = ($l$2|0)<(0);
      if ($332) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1059 = $1058;$1060 = $1057;$i$0$lcssa273 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $295 = ($p$2|0)>(-1);
     $296 = $fl$4 & -65537;
     $$fl$4 = $295 ? $296 : $fl$4;
     $298 = ($297|0)!=(0);
     $300 = ($299|0)!=(0);
     $301 = $298 | $300;
     $302 = ($p$2|0)!=(0);
     $or$cond = $301 | $302;
     if ($or$cond) {
      $303 = $a$0;
      $304 = (($3) - ($303))|0;
      $305 = $301&1;
      $306 = $305 ^ 1;
      $307 = (($306) + ($304))|0;
      $308 = ($p$2|0)>($307|0);
      $p$2$ = $308 ? $p$2 : $307;
      $1053 = $297;$1054 = $299;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1053 = $297;$1054 = $299;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $333 = $fl$1$ & 73728;
     $334 = ($333|0)==(0);
     $335 = ($w$1|0)>($i$0$lcssa273|0);
     $or$cond$i65 = $334 & $335;
     if ($or$cond$i65) {
      $336 = (($w$1) - ($i$0$lcssa273))|0;
      $337 = ($336>>>0)>(256);
      $338 = $337 ? 256 : $336;
      _memset(($pad$i|0),32,($338|0))|0;
      $339 = ($336>>>0)>(255);
      if ($339) {
       $$01$i67 = $336;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $340 = (($$01$i67) + -256)|0;
        $341 = ($340>>>0)>(255);
        if ($341) {
         $$01$i67 = $340;
        } else {
         break;
        }
       }
       $342 = $336 & 255;
       $$0$lcssa$i69 = $342;
      } else {
       $$0$lcssa$i69 = $336;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $343 = ($i$0$lcssa273|0)==(0);
     if (!($343)) {
      $i$1186 = 0;$ws$1187 = $1060;
      while(1) {
       $344 = HEAP32[$ws$1187>>2]|0;
       $345 = ($344|0)==(0);
       if ($345) {
        break;
       }
       $346 = (_wctomb($mb,$344)|0);
       $347 = (($346) + ($i$1186))|0;
       $348 = ($347|0)>($i$0$lcssa273|0);
       if ($348) {
        break;
       }
       $349 = (($ws$1187) + 4|0);
       (___fwritex($mb,$346,$f)|0);
       $350 = ($347>>>0)<($i$0$lcssa273>>>0);
       if ($350) {
        $i$1186 = $347;$ws$1187 = $349;
       } else {
        break;
       }
      }
     }
     $351 = ($333|0)==(8192);
     $or$cond$i72 = $351 & $335;
     if ($or$cond$i72) {
      $352 = (($w$1) - ($i$0$lcssa273))|0;
      $353 = ($352>>>0)>(256);
      $354 = $353 ? 256 : $352;
      _memset(($pad$i|0),32,($354|0))|0;
      $355 = ($352>>>0)>(255);
      if ($355) {
       $$01$i74 = $352;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $356 = (($$01$i74) + -256)|0;
        $357 = ($356>>>0)>(255);
        if ($357) {
         $$01$i74 = $356;
        } else {
         break;
        }
       }
       $358 = $352 & 255;
       $$0$lcssa$i76 = $358;
      } else {
       $$0$lcssa$i76 = $352;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $359 = $335 ? $w$1 : $i$0$lcssa273;
     $$be = $$lcssa299;$$be286 = $1059;$$be287 = $222;$l$0$be = $359;$l10n$0$be = $l10n$3;
     break;
    }
    $937 = $z$2;
    $938 = $a$2;
    $939 = (($937) - ($938))|0;
    $940 = ($p$5|0)<($939|0);
    $$p$5 = $940 ? $939 : $p$5;
    $941 = (($pl$2) + ($$p$5))|0;
    $942 = ($w$1|0)<($941|0);
    $w$2 = $942 ? $941 : $w$1;
    $943 = $fl$6 & 73728;
    $944 = ($943|0)==(0);
    $945 = ($w$2|0)>($941|0);
    $or$cond$i82 = $944 & $945;
    if ($or$cond$i82) {
     $946 = (($w$2) - ($941))|0;
     $947 = ($946>>>0)>(256);
     $948 = $947 ? 256 : $946;
     _memset(($pad$i|0),32,($948|0))|0;
     $949 = ($946>>>0)>(255);
     if ($949) {
      $$01$i84 = $946;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $950 = (($$01$i84) + -256)|0;
       $951 = ($950>>>0)>(255);
       if ($951) {
        $$01$i84 = $950;
       } else {
        break;
       }
      }
      $952 = $946 & 255;
      $$0$lcssa$i86 = $952;
     } else {
      $$0$lcssa$i86 = $946;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $953 = ($943|0)==(65536);
    $or$cond$i58 = $953 & $945;
    if ($or$cond$i58) {
     $954 = (($w$2) - ($941))|0;
     $955 = ($954>>>0)>(256);
     $956 = $955 ? 256 : $954;
     _memset(($pad$i|0),48,($956|0))|0;
     $957 = ($954>>>0)>(255);
     if ($957) {
      $$01$i60 = $954;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $958 = (($$01$i60) + -256)|0;
       $959 = ($958>>>0)>(255);
       if ($959) {
        $$01$i60 = $958;
       } else {
        break;
       }
      }
      $960 = $954 & 255;
      $$0$lcssa$i62 = $960;
     } else {
      $$0$lcssa$i62 = $954;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $961 = ($$p$5|0)>($939|0);
    if ($961) {
     $962 = (($$p$5) - ($939))|0;
     $963 = ($962>>>0)>(256);
     $964 = $963 ? 256 : $962;
     _memset(($pad$i|0),48,($964|0))|0;
     $965 = ($962>>>0)>(255);
     if ($965) {
      $$01$i45 = $962;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $966 = (($$01$i45) + -256)|0;
       $967 = ($966>>>0)>(255);
       if ($967) {
        $$01$i45 = $966;
       } else {
        break;
       }
      }
      $968 = $962 & 255;
      $$0$lcssa$i47 = $968;
     } else {
      $$0$lcssa$i47 = $962;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$939,$f)|0);
    $969 = ($943|0)==(8192);
    $or$cond$i = $969 & $945;
    if ($or$cond$i) {
     $970 = (($w$2) - ($941))|0;
     $971 = ($970>>>0)>(256);
     $972 = $971 ? 256 : $970;
     _memset(($pad$i|0),32,($972|0))|0;
     $973 = ($970>>>0)>(255);
     if ($973) {
      $$01$i = $970;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $974 = (($$01$i) + -256)|0;
       $975 = ($974>>>0)>(255);
       if ($975) {
        $$01$i = $974;
       } else {
        break;
       }
      }
      $976 = $970 & 255;
      $$0$lcssa$i = $976;
     } else {
      $$0$lcssa$i = $970;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $$lcssa106;$$be286 = $1044;$$be287 = $1045;$l$0$be = $37;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1044 = $$be286;$1045 = $$be287;$23 = $$be;$cnt$0 = $cnt$1;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $977 = ($f|0)==(0|0);
  if (!($977)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $978 = ($l10n$0$lcssa|0)==(0);
  if ($978) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2162 = 1;
  while(1) {
   $979 = (($nl_type) + ($i$2162<<2)|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = ($980|0)==(0);
   if ($981) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $982 = (($nl_arg) + ($i$2162<<3)|0);
   $983 = ($980>>>0)>(20);
   L610: do {
    if (!($983)) {
     do {
      switch ($980|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $984 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$982>>2] = $984;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $986 = ($985|0)<(0);
       $987 = $986 << 31 >> 31;
       $988 = $982;
       $989 = $988;
       HEAP32[$989>>2] = $985;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $993 = $982;
       $994 = $993;
       HEAP32[$994>>2] = $992;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = 0;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $997 = $arglist_current44;
       $998 = $997;
       $999 = HEAP32[$998>>2]|0;
       $1000 = (($997) + 4)|0;
       $1001 = $1000;
       $1002 = HEAP32[$1001>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1003 = $982;
       $1004 = $1003;
       HEAP32[$1004>>2] = $999;
       $1005 = (($1003) + 4)|0;
       $1006 = $1005;
       HEAP32[$1006>>2] = $1002;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1007 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1008 = $1007&65535;
       $1009 = $1008 << 16 >> 16;
       $1010 = ($1009|0)<(0);
       $1011 = $1010 << 31 >> 31;
       $1012 = $982;
       $1013 = $1012;
       HEAP32[$1013>>2] = $1009;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = $1011;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1016 & 65535;
       $1017 = $982;
       $1018 = $1017;
       HEAP32[$1018>>2] = $$mask1$i;
       $1019 = (($1017) + 4)|0;
       $1020 = $1019;
       HEAP32[$1020>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1021 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1022 = $1021&255;
       $1023 = $1022 << 24 >> 24;
       $1024 = ($1023|0)<(0);
       $1025 = $1024 << 31 >> 31;
       $1026 = $982;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1023;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = $1025;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1030 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1030 & 255;
       $1031 = $982;
       $1032 = $1031;
       HEAP32[$1032>>2] = $$mask$i;
       $1033 = (($1031) + 4)|0;
       $1034 = $1033;
       HEAP32[$1034>>2] = 0;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1035 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$982>>3] = $1035;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$982>>3] = $1036;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1037 = (($i$2162) + 1)|0;
   $1038 = ($1037|0)<(10);
   if ($1038) {
    $i$2162 = $1037;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3160 = $i$2162$lcssa;
  while(1) {
   $1041 = (($nl_type) + ($i$3160<<2)|0);
   $1042 = HEAP32[$1041>>2]|0;
   $1043 = ($1042|0)==(0);
   $1039 = (($i$3160) + 1)|0;
   if (!($1043)) {
    $$0$ph = -1;
    break;
   }
   $1040 = ($1039|0)<(10);
   if ($1040) {
    $i$3160 = $1039;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph285;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
function _perror__wrapper(p0) { p0 = p0|0; _perror(p0|0); }
function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
function b4(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(4); }
function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6); }
function b7() { ; nullFunc_v(7); }
function _abort__wrapper() { ; _abort(); }
function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0; }
function b9(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0; }
function _fopen__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0; }
function b10(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_Mask_mask0,_Mask_mask1,_Mask_mask2,_Mask_mask3,_Mask_mask4,_Mask_mask5,_Mask_mask6,_Mask_mask7,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,_fprintf__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,_png_create_struct_2,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_png_zalloc,b0,b0,b0,_zcalloc,b0,_do_read,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_png_set_tRNS,b1,b1
,_png_set_pHYs,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_png_set_filter_heuristics,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_exit__wrapper,b2,_perror__wrapper,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,_free,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_png_default_flush,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_png_destroy_write_struct,b3,b3,_png_init_io,b3
,b3,_png_write_info,_png_write_row,_png_write_end,b3,b3,b3,_png_free,b3,b3,b3,b3,_png_warning,_png_error,b3,b3,b3,b3,b3,_png_zfree,b3,b3,b3,_zcfree,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viiiiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_png_set_IHDR
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_malloc,b5,b5,b5,b5,b5,_png_create_info_struct,b5,b5,b5,b5,b5
,b5,b5,b5,b5,_fclose__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,_Mask_mask0466,_Mask_mask1467,_Mask_mask2468,_Mask_mask3469,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,_png_destroy_struct_2,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_png_default_write_data,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_abort__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_png_create_write_struct,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_snprintf,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_deflate_stored,_deflate_fast,_deflate_slow,b9,b9,b9,b9,_fopen__wrapper,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_png_malloc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_png_set_PLTE,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,_png_set_mem_fn,_png_set_error_fn,b10,b10,b10,b10,_png_set_write_fn,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _main: _main, _realloc: _realloc, _strncpy: _strncpy, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }
  var filedata = FS.readFile("gary.png", {"encoding" : "binary"});
  var wat = btoa(String.fromCharCode.apply(null, filedata));
  document.getElementById("gary").innerHTML="<img src=\"data:image/gif;base64," + wat + "\"/>";

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run(["-t", "PNG", "-o", "gary.png", "gary"]);


// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



